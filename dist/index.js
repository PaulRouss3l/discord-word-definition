/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./build/auth.json":
/*!*************************!*\
  !*** ./build/auth.json ***!
  \*************************/
/*! exports provided: token, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"token\\\":\\\"NzIxNzczMjYwNDk2NDM3MzY4.XuZZ7g.h-XBWdVBzUs0zursM6e2HVuIF7Q\\\"}\");\n\n//# sourceURL=webpack:///./build/auth.json?");

/***/ }),

/***/ "./node_modules/@discordjs/collection/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@discordjs/collection/dist/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n * @property {number} size - The amount of elements in this collection.\n */\nclass Collection extends Map {\n    constructor(entries) {\n        super(entries);\n        /**\n         * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called\n         * @name Collection#_array\n         * @type {?Array}\n         * @private\n         */\n        Object.defineProperty(this, '_array', { value: null, writable: true, configurable: true });\n        /**\n         * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called\n         * @name Collection#_keyArray\n         * @type {?Array}\n         * @private\n         */\n        Object.defineProperty(this, '_keyArray', { value: null, writable: true, configurable: true });\n    }\n    /**\n     * Identical to [Map.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get).\n     * Gets an element with the specified key, and returns its value, or `undefined` if the element does not exist.\n     * @param {*} key - The key to get from this collection\n     * @returns {* | undefined}\n     */\n    get(key) {\n        return super.get(key);\n    }\n    /**\n     * Identical to [Map.set()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set).\n     * Sets a new element in the collection with the specified key and value.\n     * @param {*} key - The key of the element to add\n     * @param {*} value - The value of the element to add\n     * @returns {Collection}\n     */\n    set(key, value) {\n        this._array = null;\n        this._keyArray = null;\n        return super.set(key, value);\n    }\n    /**\n     * Identical to [Map.has()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has).\n     * Checks if an element exists in the collection.\n     * @param {*} key - The key of the element to check for\n     * @returns {boolean} `true` if the element exists, `false` if it does not exist.\n     */\n    has(key) {\n        return super.has(key);\n    }\n    /**\n     * Identical to [Map.delete()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).\n     * Deletes an element from the collection.\n     * @param {*} key - The key to delete from the collection\n     * @returns {boolean} `true` if the element was removed, `false` if the element does not exist.\n     */\n    delete(key) {\n        this._array = null;\n        this._keyArray = null;\n        return super.delete(key);\n    }\n    /**\n     * Identical to [Map.clear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear).\n     * Removes all elements from the collection.\n     * @returns {undefined}\n     */\n    clear() {\n        return super.clear();\n    }\n    /**\n     * Creates an ordered array of the values of this collection, and caches it internally. The array will only be\n     * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n     * itself. If you don't want this caching behavior, use `[...collection.values()]` or\n     * `Array.from(collection.values())` instead.\n     * @returns {Array}\n     */\n    array() {\n        if (!this._array || this._array.length !== this.size)\n            this._array = [...this.values()];\n        return this._array;\n    }\n    /**\n     * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\n     * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n     * itself. If you don't want this caching behavior, use `[...collection.keys()]` or\n     * `Array.from(collection.keys())` instead.\n     * @returns {Array}\n     */\n    keyArray() {\n        if (!this._keyArray || this._keyArray.length !== this.size)\n            this._keyArray = [...this.keys()];\n        return this._keyArray;\n    }\n    first(amount) {\n        if (typeof amount === 'undefined')\n            return this.values().next().value;\n        if (amount < 0)\n            return this.last(amount * -1);\n        amount = Math.min(this.size, amount);\n        const iter = this.values();\n        return Array.from({ length: amount }, () => iter.next().value);\n    }\n    firstKey(amount) {\n        if (typeof amount === 'undefined')\n            return this.keys().next().value;\n        if (amount < 0)\n            return this.lastKey(amount * -1);\n        amount = Math.min(this.size, amount);\n        const iter = this.keys();\n        return Array.from({ length: amount }, () => iter.next().value);\n    }\n    last(amount) {\n        const arr = this.array();\n        if (typeof amount === 'undefined')\n            return arr[arr.length - 1];\n        if (amount < 0)\n            return this.first(amount * -1);\n        if (!amount)\n            return [];\n        return arr.slice(-amount);\n    }\n    lastKey(amount) {\n        const arr = this.keyArray();\n        if (typeof amount === 'undefined')\n            return arr[arr.length - 1];\n        if (amount < 0)\n            return this.firstKey(amount * -1);\n        if (!amount)\n            return [];\n        return arr.slice(-amount);\n    }\n    random(amount) {\n        let arr = this.array();\n        if (typeof amount === 'undefined')\n            return arr[Math.floor(Math.random() * arr.length)];\n        if (arr.length === 0 || !amount)\n            return [];\n        arr = arr.slice();\n        return Array.from({ length: amount }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n    }\n    randomKey(amount) {\n        let arr = this.keyArray();\n        if (typeof amount === 'undefined')\n            return arr[Math.floor(Math.random() * arr.length)];\n        if (arr.length === 0 || !amount)\n            return [];\n        arr = arr.slice();\n        return Array.from({ length: amount }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n    }\n    find(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        for (const [key, val] of this) {\n            if (fn(val, key, this))\n                return val;\n        }\n        return undefined;\n    }\n    findKey(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        for (const [key, val] of this) {\n            if (fn(val, key, this))\n                return key;\n        }\n        return undefined;\n    }\n    sweep(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        const previousSize = this.size;\n        for (const [key, val] of this) {\n            if (fn(val, key, this))\n                this.delete(key);\n        }\n        return previousSize - this.size;\n    }\n    filter(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        const results = new this.constructor[Symbol.species]();\n        for (const [key, val] of this) {\n            if (fn(val, key, this))\n                results.set(key, val);\n        }\n        return results;\n    }\n    partition(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        // TODO: consider removing the <K, V> from the constructors after TS 3.7.0 is released, as it infers it\n        const results = [new this.constructor[Symbol.species](), new this.constructor[Symbol.species]()];\n        for (const [key, val] of this) {\n            if (fn(val, key, this)) {\n                results[0].set(key, val);\n            }\n            else {\n                results[1].set(key, val);\n            }\n        }\n        return results;\n    }\n    flatMap(fn, thisArg) {\n        const collections = this.map(fn, thisArg);\n        return new this.constructor[Symbol.species]().concat(...collections);\n    }\n    map(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        const iter = this.entries();\n        return Array.from({ length: this.size }, () => {\n            const [key, value] = iter.next().value;\n            return fn(value, key, this);\n        });\n    }\n    mapValues(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        const coll = new this.constructor[Symbol.species]();\n        for (const [key, val] of this)\n            coll.set(key, fn(val, key, this));\n        return coll;\n    }\n    some(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        for (const [key, val] of this) {\n            if (fn(val, key, this))\n                return true;\n        }\n        return false;\n    }\n    every(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        for (const [key, val] of this) {\n            if (!fn(val, key, this))\n                return false;\n        }\n        return true;\n    }\n    /**\n     * Applies a function to produce a single value. Identical in behavior to\n     * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n     * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n     * and `collection`\n     * @param {*} [initialValue] Starting value for the accumulator\n     * @returns {*}\n     * @example collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n     */\n    reduce(fn, initialValue) {\n        let accumulator;\n        if (typeof initialValue !== 'undefined') {\n            accumulator = initialValue;\n            for (const [key, val] of this)\n                accumulator = fn(accumulator, val, key, this);\n            return accumulator;\n        }\n        let first = true;\n        for (const [key, val] of this) {\n            if (first) {\n                accumulator = val;\n                first = false;\n                continue;\n            }\n            accumulator = fn(accumulator, val, key, this);\n        }\n        // No items iterated.\n        if (first) {\n            throw new TypeError('Reduce of empty collection with no initial value');\n        }\n        return accumulator;\n    }\n    each(fn, thisArg) {\n        this.forEach(fn, thisArg);\n        return this;\n    }\n    tap(fn, thisArg) {\n        if (typeof thisArg !== 'undefined')\n            fn = fn.bind(thisArg);\n        fn(this);\n        return this;\n    }\n    /**\n     * Creates an identical shallow copy of this collection.\n     * @returns {Collection}\n     * @example const newColl = someColl.clone();\n     */\n    clone() {\n        return new this.constructor[Symbol.species](this);\n    }\n    /**\n     * Combines this collection with others into a new collection. None of the source collections are modified.\n     * @param {...Collection} collections Collections to merge\n     * @returns {Collection}\n     * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n     */\n    concat(...collections) {\n        const newColl = this.clone();\n        for (const coll of collections) {\n            for (const [key, val] of coll)\n                newColl.set(key, val);\n        }\n        return newColl;\n    }\n    /**\n     * Checks if this collection shares identical items with another.\n     * This is different to checking for equality using equal-signs, because\n     * the collections may be different objects, but contain the same data.\n     * @param {Collection} collection Collection to compare with\n     * @returns {boolean} Whether the collections have identical contents\n     */\n    equals(collection) {\n        if (!collection)\n            return false;\n        if (this === collection)\n            return true;\n        if (this.size !== collection.size)\n            return false;\n        for (const [key, value] of this) {\n            if (!collection.has(key) || value !== collection.get(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * The sort method sorts the items of a collection in place and returns it.\n     * The sort is not necessarily stable. The default sort order is according to string Unicode code points.\n     * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n     * If omitted, the collection is sorted according to each character's Unicode code point value,\n     * according to the string conversion of each element.\n     * @returns {Collection}\n     * @example collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n     */\n    sort(compareFunction = (x, y) => Number(x > y) || Number(x === y) - 1) {\n        const entries = [...this.entries()];\n        entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0]));\n        // Perform clean-up\n        super.clear();\n        this._array = null;\n        this._keyArray = null;\n        // Set the new entries\n        for (const [k, v] of entries) {\n            super.set(k, v);\n        }\n        return this;\n    }\n    /**\n     * The intersect method returns a new structure containing items where the keys are present in both original structures.\n     * @param {Collection} other The other Collection to filter against\n     * @returns {Collection}\n     */\n    intersect(other) {\n        return other.filter((_, k) => this.has(k));\n    }\n    /**\n     * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n     * @param {Collection} other The other Collection to filter against\n     * @returns {Collection}\n     */\n    difference(other) {\n        return other.filter((_, k) => !this.has(k)).concat(this.filter((_, k) => !other.has(k)));\n    }\n    /**\n     * The sorted method sorts the items of a collection and returns it.\n     * The sort is not necessarily stable. The default sort order is according to string Unicode code points.\n     * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n     * If omitted, the collection is sorted according to each character's Unicode code point value,\n     * according to the string conversion of each element.\n     * @returns {Collection}\n     * @example collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n     */\n    sorted(compareFunction = (x, y) => Number(x > y) || Number(x === y) - 1) {\n        return new this.constructor[Symbol.species]([...this.entries()])\n            .sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n    }\n}\nexports.Collection = Collection;\nCollection.default = Collection;\nexports.default = Collection;\nmodule.exports = Collection;\n//# sourceMappingURL=data:application/json;base64,\n\n//# sourceURL=webpack:///./node_modules/@discordjs/collection/dist/index.js?");

/***/ }),

/***/ "./node_modules/@discordjs/form-data/lib/form_data.js":
/*!************************************************************!*\
  !*** ./node_modules/@discordjs/form-data/lib/form_data.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var CombinedStream = __webpack_require__(/*! combined-stream */ \"./node_modules/combined-stream/lib/combined_stream.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar parseUrl = __webpack_require__(/*! url */ \"url\").parse;\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\").Stream;\nvar mime = __webpack_require__(/*! mime-types */ \"./node_modules/mime-types/index.js\");\nvar asynckit = __webpack_require__(/*! asynckit */ \"./node_modules/asynckit/index.js\");\nvar populate = __webpack_require__(/*! ./populate.js */ \"./node_modules/@discordjs/form-data/lib/populate.js\");\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData(options);\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (util.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response or not a stream\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n\n  if (value.hasOwnProperty('fd')) {\n\n    // take read range into a account\n    // `end` = Infinity –> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (value.hasOwnProperty('httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (value.hasOwnProperty('httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (!headers.hasOwnProperty(prop)) continue;\n    header = headers[prop];\n\n    // skip nullish headers.\n    if (header == null) {\n      continue;\n    }\n\n    // convert all headers to arrays.\n    if (!Array.isArray(header)) {\n      header = [header];\n    }\n\n    // add non-empty headers.\n    if (header.length) {\n      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path || '');\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (userHeaders.hasOwnProperty(header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype.getBuffer = function() {\n  var dataBuffer = new Buffer.alloc( 0 );\n  var boundary = this.getBoundary();\n\n  // Create the form content. Add Line breaks to the end of data.\n  for (var i = 0, len = this._streams.length; i < len; i++) {\n    if (typeof this._streams[i] !== 'function') {\n\n      // Add content to the buffer.\n      if(Buffer.isBuffer(this._streams[i])) {\n        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);\n      }else {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);\n      }\n\n      // Add break after content.\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );\n      }\n    }\n  }\n\n  // Add the footer and return the Buffer object.\n  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err && err !== 'Unknown stream') {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    if (length) {\n      request.setHeader('Content-Length', length);\n    }\n\n    this.pipe(request);\n    if (cb) {\n      var onResponse;\n\n      var callback = function (error, responce) {\n        request.removeListener('error', callback);\n        request.removeListener('response', onResponse);\n\n        return cb.call(this, error, responce);\n      };\n\n      onResponse = callback.bind(this, null);\n\n      request.on('error', callback);\n      request.on('response', onResponse);\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/@discordjs/form-data/lib/form_data.js?");

/***/ }),

/***/ "./node_modules/@discordjs/form-data/lib/populate.js":
/*!***********************************************************!*\
  !*** ./node_modules/@discordjs/form-data/lib/populate.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n\n\n//# sourceURL=webpack:///./node_modules/@discordjs/form-data/lib/populate.js?");

/***/ }),

/***/ "./node_modules/abort-controller/dist/abort-controller.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/abort-controller/dist/abort-controller.mjs ***!
  \*****************************************************************/
/*! exports provided: default, AbortController, AbortSignal */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbortController\", function() { return AbortController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AbortSignal\", function() { return AbortSignal; });\n/* harmony import */ var event_target_shim__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! event-target-shim */ \"./node_modules/event-target-shim/dist/event-target-shim.mjs\");\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n\n\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\nclass AbortSignal extends event_target_shim__WEBPACK_IMPORTED_MODULE_0__[\"EventTarget\"] {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */\n    constructor() {\n        super();\n        throw new TypeError(\"AbortSignal cannot be constructed directly\");\n    }\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */\n    get aborted() {\n        const aborted = abortedFlags.get(this);\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n        }\n        return aborted;\n    }\n}\nObject(event_target_shim__WEBPACK_IMPORTED_MODULE_0__[\"defineEventAttribute\"])(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */\nfunction createAbortSignal() {\n    const signal = Object.create(AbortSignal.prototype);\n    event_target_shim__WEBPACK_IMPORTED_MODULE_0__[\"EventTarget\"].call(signal);\n    abortedFlags.set(signal, false);\n    return signal;\n}\n/**\n * Abort a given signal.\n */\nfunction abortSignal(signal) {\n    if (abortedFlags.get(signal) !== false) {\n        return;\n    }\n    abortedFlags.set(signal, true);\n    signal.dispatchEvent({ type: \"abort\" });\n}\n/**\n * Aborted flag for each instances.\n */\nconst abortedFlags = new WeakMap();\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: { enumerable: true },\n});\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\",\n    });\n}\n\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\nclass AbortController {\n    /**\n     * Initialize this controller.\n     */\n    constructor() {\n        signals.set(this, createAbortSignal());\n    }\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */\n    get signal() {\n        return getSignal(this);\n    }\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */\n    abort() {\n        abortSignal(getSignal(this));\n    }\n}\n/**\n * Associated signals.\n */\nconst signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */\nfunction getSignal(controller) {\n    const signal = signals.get(controller);\n    if (signal == null) {\n        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n    }\n    return signal;\n}\n// Properties should be enumerable.\nObject.defineProperties(AbortController.prototype, {\n    signal: { enumerable: true },\n    abort: { enumerable: true },\n});\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\",\n    });\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (AbortController);\n\n//# sourceMappingURL=abort-controller.mjs.map\n\n\n//# sourceURL=webpack:///./node_modules/abort-controller/dist/abort-controller.mjs?");

/***/ }),

/***/ "./node_modules/asynckit/index.js":
/*!****************************************!*\
  !*** ./node_modules/asynckit/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n{\n  parallel      : __webpack_require__(/*! ./parallel.js */ \"./node_modules/asynckit/parallel.js\"),\n  serial        : __webpack_require__(/*! ./serial.js */ \"./node_modules/asynckit/serial.js\"),\n  serialOrdered : __webpack_require__(/*! ./serialOrdered.js */ \"./node_modules/asynckit/serialOrdered.js\")\n};\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/index.js?");

/***/ }),

/***/ "./node_modules/asynckit/lib/abort.js":
/*!********************************************!*\
  !*** ./node_modules/asynckit/lib/abort.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/lib/abort.js?");

/***/ }),

/***/ "./node_modules/asynckit/lib/async.js":
/*!********************************************!*\
  !*** ./node_modules/asynckit/lib/async.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var defer = __webpack_require__(/*! ./defer.js */ \"./node_modules/asynckit/lib/defer.js\");\n\n// API\nmodule.exports = async;\n\n/**\n * Runs provided callback asynchronously\n * even if callback itself is not\n *\n * @param   {function} callback - callback to invoke\n * @returns {function} - augmented callback\n */\nfunction async(callback)\n{\n  var isAsync = false;\n\n  // check if async happened\n  defer(function() { isAsync = true; });\n\n  return function async_callback(err, result)\n  {\n    if (isAsync)\n    {\n      callback(err, result);\n    }\n    else\n    {\n      defer(function nextTick_callback()\n      {\n        callback(err, result);\n      });\n    }\n  };\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/lib/async.js?");

/***/ }),

/***/ "./node_modules/asynckit/lib/defer.js":
/*!********************************************!*\
  !*** ./node_modules/asynckit/lib/defer.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = defer;\n\n/**\n * Runs provided function on next iteration of the event loop\n *\n * @param {function} fn - function to run\n */\nfunction defer(fn)\n{\n  var nextTick = typeof setImmediate == 'function'\n    ? setImmediate\n    : (\n      typeof process == 'object' && typeof process.nextTick == 'function'\n      ? process.nextTick\n      : null\n    );\n\n  if (nextTick)\n  {\n    nextTick(fn);\n  }\n  else\n  {\n    setTimeout(fn, 0);\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/lib/defer.js?");

/***/ }),

/***/ "./node_modules/asynckit/lib/iterate.js":
/*!**********************************************!*\
  !*** ./node_modules/asynckit/lib/iterate.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var async = __webpack_require__(/*! ./async.js */ \"./node_modules/asynckit/lib/async.js\")\n  , abort = __webpack_require__(/*! ./abort.js */ \"./node_modules/asynckit/lib/abort.js\")\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/lib/iterate.js?");

/***/ }),

/***/ "./node_modules/asynckit/lib/state.js":
/*!********************************************!*\
  !*** ./node_modules/asynckit/lib/state.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// API\nmodule.exports = state;\n\n/**\n * Creates initial state object\n * for iteration over list\n *\n * @param   {array|object} list - list to iterate over\n * @param   {function|null} sortMethod - function to use for keys sort,\n *                                     or `null` to keep them as is\n * @returns {object} - initial state object\n */\nfunction state(list, sortMethod)\n{\n  var isNamedList = !Array.isArray(list)\n    , initState =\n    {\n      index    : 0,\n      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,\n      jobs     : {},\n      results  : isNamedList ? {} : [],\n      size     : isNamedList ? Object.keys(list).length : list.length\n    }\n    ;\n\n  if (sortMethod)\n  {\n    // sort array keys based on it's values\n    // sort object's keys just on own merit\n    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)\n    {\n      return sortMethod(list[a], list[b]);\n    });\n  }\n\n  return initState;\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/lib/state.js?");

/***/ }),

/***/ "./node_modules/asynckit/lib/terminator.js":
/*!*************************************************!*\
  !*** ./node_modules/asynckit/lib/terminator.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var abort = __webpack_require__(/*! ./abort.js */ \"./node_modules/asynckit/lib/abort.js\")\n  , async = __webpack_require__(/*! ./async.js */ \"./node_modules/asynckit/lib/async.js\")\n  ;\n\n// API\nmodule.exports = terminator;\n\n/**\n * Terminates jobs in the attached state context\n *\n * @this  AsyncKitState#\n * @param {function} callback - final callback to invoke after termination\n */\nfunction terminator(callback)\n{\n  if (!Object.keys(this.jobs).length)\n  {\n    return;\n  }\n\n  // fast forward iteration index\n  this.index = this.size;\n\n  // abort jobs\n  abort(this);\n\n  // send back results we have so far\n  async(callback)(null, this.results);\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/lib/terminator.js?");

/***/ }),

/***/ "./node_modules/asynckit/parallel.js":
/*!*******************************************!*\
  !*** ./node_modules/asynckit/parallel.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var iterate    = __webpack_require__(/*! ./lib/iterate.js */ \"./node_modules/asynckit/lib/iterate.js\")\n  , initState  = __webpack_require__(/*! ./lib/state.js */ \"./node_modules/asynckit/lib/state.js\")\n  , terminator = __webpack_require__(/*! ./lib/terminator.js */ \"./node_modules/asynckit/lib/terminator.js\")\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/parallel.js?");

/***/ }),

/***/ "./node_modules/asynckit/serial.js":
/*!*****************************************!*\
  !*** ./node_modules/asynckit/serial.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var serialOrdered = __webpack_require__(/*! ./serialOrdered.js */ \"./node_modules/asynckit/serialOrdered.js\");\n\n// Public API\nmodule.exports = serial;\n\n/**\n * Runs iterator over provided array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serial(list, iterator, callback)\n{\n  return serialOrdered(list, iterator, null, callback);\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/serial.js?");

/***/ }),

/***/ "./node_modules/asynckit/serialOrdered.js":
/*!************************************************!*\
  !*** ./node_modules/asynckit/serialOrdered.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var iterate    = __webpack_require__(/*! ./lib/iterate.js */ \"./node_modules/asynckit/lib/iterate.js\")\n  , initState  = __webpack_require__(/*! ./lib/state.js */ \"./node_modules/asynckit/lib/state.js\")\n  , terminator = __webpack_require__(/*! ./lib/terminator.js */ \"./node_modules/asynckit/lib/terminator.js\")\n  ;\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending  = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback)\n{\n  var state = initState(list, sortMethod);\n\n  iterate(list, iterator, state, function iteratorHandler(error, result)\n  {\n    if (error)\n    {\n      callback(error, result);\n      return;\n    }\n\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length)\n    {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b)\n{\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b)\n{\n  return -1 * ascending(a, b);\n}\n\n\n//# sourceURL=webpack:///./node_modules/asynckit/serialOrdered.js?");

/***/ }),

/***/ "./node_modules/combined-stream/lib/combined_stream.js":
/*!*************************************************************!*\
  !*** ./node_modules/combined-stream/lib/combined_stream.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var util = __webpack_require__(/*! util */ \"util\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\").Stream;\nvar DelayedStream = __webpack_require__(/*! delayed-stream */ \"./node_modules/delayed-stream/lib/delayed_stream.js\");\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n  this._insideLoop = false;\n  this._pendingNext = false;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (typeof stream !== 'boolean')\n    && (typeof stream !== 'number')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n\n  if (this._insideLoop) {\n    this._pendingNext = true;\n    return; // defer call\n  }\n\n  this._insideLoop = true;\n  try {\n    do {\n      this._pendingNext = false;\n      this._realGetNext();\n    } while (this._pendingNext);\n  } finally {\n    this._insideLoop = false;\n  }\n};\n\nCombinedStream.prototype._realGetNext = function() {\n  var stream = this._streams.shift();\n\n\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    this._pipeNext(stream);\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n\n\n//# sourceURL=webpack:///./node_modules/combined-stream/lib/combined_stream.js?");

/***/ }),

/***/ "./node_modules/delayed-stream/lib/delayed_stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/delayed-stream/lib/delayed_stream.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stream = __webpack_require__(/*! stream */ \"stream\").Stream;\nvar util = __webpack_require__(/*! util */ \"util\");\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nObject.defineProperty(DelayedStream.prototype, 'readable', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.source.readable;\n  }\n});\n\nDelayedStream.prototype.setEncoding = function() {\n  return this.source.setEncoding.apply(this.source, arguments);\n};\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n\n\n//# sourceURL=webpack:///./node_modules/delayed-stream/lib/delayed_stream.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ \"./node_modules/discord.js/node_modules/ws/lib/websocket.js\");\n\nWebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ \"./node_modules/discord.js/node_modules/ws/lib/stream.js\");\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ \"./node_modules/discord.js/node_modules/ws/lib/websocket-server.js\");\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ \"./node_modules/discord.js/node_modules/ws/lib/receiver.js\");\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ \"./node_modules/discord.js/node_modules/ws/lib/sender.js\");\n\nmodule.exports = WebSocket;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/index.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/buffer-util.js":
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/buffer-util.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"./node_modules/discord.js/node_modules/ws/lib/constants.js\");\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n  const length = buffer.length;\n  for (let i = 0; i < length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'bufferutil'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n  const bu = bufferUtil.BufferUtil || bufferUtil;\n\n  module.exports = {\n    concat,\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bu.mask(source, mask, output, offset, length);\n    },\n    toArrayBuffer,\n    toBuffer,\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bu.unmask(buffer, mask);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/buffer-util.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/constants.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  EMPTY_BUFFER: Buffer.alloc(0),\n  NOOP: () => {}\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/constants.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/event-target.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/event-target.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n}\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(error, target) {\n    super('error', target);\n\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} options An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} options.once A `Boolean`` indicating that the listener\n   *     should be invoked at most once after being added. If `true`, the\n   *     listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    const method = options && options.once ? 'once' : 'on';\n\n    if (type === 'message') {\n      onMessage._listener = listener;\n      this[method](type, onMessage);\n    } else if (type === 'close') {\n      onClose._listener = listener;\n      this[method](type, onClose);\n    } else if (type === 'error') {\n      onError._listener = listener;\n      this[method](type, onError);\n    } else if (type === 'open') {\n      onOpen._listener = listener;\n      this[method](type, onOpen);\n    } else {\n      this[method](type, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(type, listener) {\n    const listeners = this.listeners(type);\n\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(type, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/event-target.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/extension.js":
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/extension.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n\n  if (header === undefined || header === '') return offers;\n\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\\t' */) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/extension.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/limiter.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/limiter.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} concurrency The maximum number of jobs allowed to run\n   *     concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/limiter.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/permessage-deflate.js":
/*!***************************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/permessage-deflate.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\n\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"./node_modules/discord.js/node_modules/ws/lib/buffer-util.js\");\nconst Limiter = __webpack_require__(/*! ./limiter */ \"./node_modules/discord.js/node_modules/ws/lib/limiter.js\");\nconst { kStatusCode, NOOP } = __webpack_require__(/*! ./constants */ \"./node_modules/discord.js/node_modules/ws/lib/constants.js\");\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Boolean} options.serverNoContextTakeover Request/accept disabling\n   *     of server context takeover\n   * @param {Boolean} options.clientNoContextTakeover Advertise/acknowledge\n   *     disabling of client context takeover\n   * @param {(Boolean|Number)} options.serverMaxWindowBits Request/confirm the\n   *     use of a custom server window size\n   * @param {(Boolean|Number)} options.clientMaxWindowBits Advertise support\n   *     for, or request, a custom client window size\n   * @param {Object} options.zlibDeflateOptions Options to pass to zlib on deflate\n   * @param {Object} options.zlibInflateOptions Options to pass to zlib on inflate\n   * @param {Number} options.threshold Size (in bytes) below which messages\n   *     should not be compressed\n   * @param {Number} options.concurrencyLimit The number of concurrent calls to\n   *     zlib\n   * @param {Boolean} isServer Create the instance in either server or client\n   *     mode\n   * @param {Number} maxPayload The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      //\n      // An `'error'` event is emitted, only on Node.js < 10.0.0, if the\n      // `zlib.DeflateRaw` instance is closed while data is being processed.\n      // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong\n      // time due to an abnormal WebSocket closure.\n      //\n      this._deflate.on('error', NOOP);\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.close();\n        this._deflate = null;\n      } else {\n        this._deflate[kTotalLength] = 0;\n        this._deflate[kBuffers] = [];\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/permessage-deflate.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/receiver.js":
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/receiver.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"./node_modules/discord.js/node_modules/ws/lib/permessage-deflate.js\");\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = __webpack_require__(/*! ./constants */ \"./node_modules/discord.js/node_modules/ws/lib/constants.js\");\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"./node_modules/discord.js/node_modules/ws/lib/buffer-util.js\");\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"./node_modules/discord.js/node_modules/ws/lib/validation.js\");\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends stream.Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {String} binaryType The type for binary data\n   * @param {Object} extensions An object containing the negotiated extensions\n   * @param {Boolean} isServer Specifies whether to operate in client or server\n   *     mode\n   * @param {Number} maxPayload The maximum allowed message length\n   */\n  constructor(binaryType, extensions, isServer, maxPayload) {\n    super();\n\n    this._binaryType = binaryType || BINARY_TYPES[0];\n    this[kWebSocket] = undefined;\n    this._extensions = extensions || {};\n    this._isServer = !!isServer;\n    this._maxPayload = maxPayload | 0;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = buf.slice(n);\n      return buf.slice(0, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = buf.slice(n);\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(RangeError, 'RSV2 and RSV3 must be clear', true, 1002);\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(RangeError, 'RSV1 must be clear', true, 1002);\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(RangeError, 'RSV1 must be clear', true, 1002);\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(RangeError, 'invalid opcode 0', true, 1002);\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(RangeError, 'FIN must be set', true, 1002);\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(RangeError, 'RSV1 must be clear', true, 1002);\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(RangeError, 'MASK must be set', true, 1002);\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(RangeError, 'MASK must be clear', true, 1002);\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(RangeError, 'Max payload size exceeded', false, 1009);\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n      if (this._masked) unmask(data, this._mask);\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its lenght is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(RangeError, 'Max payload size exceeded', false, 1009)\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!isValidUTF8(buf)) {\n          this._loop = false;\n          return error(Error, 'invalid UTF-8 sequence', true, 1007);\n        }\n\n        this.emit('message', buf.toString());\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, '');\n        this.end();\n      } else if (data.length === 1) {\n        return error(RangeError, 'invalid payload length 1', true, 1002);\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(RangeError, `invalid status code ${code}`, true, 1002);\n        }\n\n        const buf = data.slice(2);\n\n        if (!isValidUTF8(buf)) {\n          return error(Error, 'invalid UTF-8 sequence', true, 1007);\n        }\n\n        this.emit('conclude', code, buf.toString());\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {(Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err[kStatusCode] = statusCode;\n  return err;\n}\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/receiver.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/sender.js":
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/sender.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"./node_modules/discord.js/node_modules/ws/lib/permessage-deflate.js\");\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"./node_modules/discord.js/node_modules/ws/lib/constants.js\");\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"./node_modules/discord.js/node_modules/ws/lib/validation.js\");\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"./node_modules/discord.js/node_modules/ws/lib/buffer-util.js\");\n\nconst mask = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {net.Socket} socket The connection socket\n   * @param {Object} extensions An object containing the negotiated extensions\n   */\n  constructor(socket, extensions) {\n    this._extensions = extensions || {};\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */\n  static frame(data, options) {\n    const merge = options.mask && options.readOnly;\n    let offset = options.mask ? 6 : 2;\n    let payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2);\n    } else if (payloadLength === 127) {\n      target.writeUInt32BE(0, 2);\n      target.writeUInt32BE(data.length, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    randomFillSync(mask, 0, 4);\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, data.length);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {(Number|undefined)} code The status code component of the body\n   * @param {String} data The message component of the body\n   * @param {Boolean} mask Specifies whether or not to mask the message\n   * @param {Function} cb Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || data === '') {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n      buf.write(data, 2);\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @private\n   */\n  doClose(data, mask, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x08,\n        mask,\n        readOnly: false\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    const buf = toBuffer(data);\n\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPing(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @param {Function} cb Callback\n   * @private\n   */\n  doPing(data, mask, readOnly, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x09,\n        mask,\n        readOnly\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    const buf = toBuffer(data);\n\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPong(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @param {Function} cb Callback\n   * @private\n   */\n  doPong(data, mask, readOnly, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x0a,\n        mask,\n        readOnly\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const buf = toBuffer(data);\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (rsv1 && perMessageDeflate) {\n        rsv1 = buf.length >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        readOnly: toBuffer.readOnly\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);\n      } else {\n        this.dispatch(buf, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(buf, {\n          fin: options.fin,\n          rsv1: false,\n          opcode,\n          mask: options.mask,\n          readOnly: toBuffer.readOnly\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} compress Specifies whether or not to compress `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @param {Function} cb Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const callback = this._queue[i][4];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[1].length;\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[1].length;\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} cb Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/sender.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/stream.js":
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/stream.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {stream.Duplex} The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} options The options for the `Duplex` constructor\n * @return {stream.Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let resumeOnReceiverDrain = true;\n\n  function receiverOnDrain() {\n    if (resumeOnReceiverDrain) ws._socket.resume();\n  }\n\n  if (ws.readyState === ws.CONNECTING) {\n    ws.once('open', function open() {\n      ws._receiver.removeAllListeners('drain');\n      ws._receiver.on('drain', receiverOnDrain);\n    });\n  } else {\n    ws._receiver.removeAllListeners('drain');\n    ws._receiver.on('drain', receiverOnDrain);\n  }\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg) {\n    if (!duplex.push(msg)) {\n      resumeOnReceiverDrain = false;\n      ws._socket.pause();\n    }\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function(err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n    ws.terminate();\n  };\n\n  duplex._final = function(callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function() {\n    if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {\n      resumeOnReceiverDrain = true;\n      if (!ws._receiver._writableState.needDrain) ws._socket.resume();\n    }\n  };\n\n  duplex._write = function(chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/stream.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/validation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/validation.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\ntry {\n  const isValidUTF8 = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'utf-8-validate'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  exports.isValidUTF8 =\n    typeof isValidUTF8 === 'object'\n      ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0\n      : isValidUTF8;\n} catch (e) /* istanbul ignore next */ {\n  exports.isValidUTF8 = () => true;\n}\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nexports.isValidStatusCode = (code) => {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/validation.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/websocket-server.js":
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/websocket-server.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { createServer, STATUS_CODES } = __webpack_require__(/*! http */ \"http\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"./node_modules/discord.js/node_modules/ws/lib/permessage-deflate.js\");\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"./node_modules/discord.js/node_modules/ws/lib/websocket.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"./node_modules/discord.js/node_modules/ws/lib/extension.js\");\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"./node_modules/discord.js/node_modules/ws/lib/constants.js\");\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} options.backlog The maximum length of the queue of pending\n   *     connections\n   * @param {Boolean} options.clientTracking Specifies whether or not to track\n   *     clients\n   * @param {Function} options.handleProtocols A hook to handle protocols\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {String} options.path Accept only connections matching this path\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable\n   *     permessage-deflate\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient A hook to reject connections\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      ...options\n    };\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError(\n        'One of the \"port\", \"server\", or \"noServer\" options must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = createServer((req, res) => {\n        const body = STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, (ws) => {\n            this.emit('connection', ws, req);\n          });\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close(cb) {\n    if (cb) this.once('close', cb);\n\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) {\n        server.close(() => this.emit('close'));\n        return;\n      }\n    }\n\n    process.nextTick(emitClose, this);\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key'].trim()\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = parse(req.headers['sec-websocket-extensions']);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(key, extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(key, extensions, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(key, extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new WebSocket(null);\n    let protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.trim().split(/ *, */);\n\n      //\n      // Optionally call external protocol selection handler.\n      //\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws.protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/websocket-server.js?");

/***/ }),

/***/ "./node_modules/discord.js/node_modules/ws/lib/websocket.js":
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/node_modules/ws/lib/websocket.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"./node_modules/discord.js/node_modules/ws/lib/permessage-deflate.js\");\nconst Receiver = __webpack_require__(/*! ./receiver */ \"./node_modules/discord.js/node_modules/ws/lib/receiver.js\");\nconst Sender = __webpack_require__(/*! ./sender */ \"./node_modules/discord.js/node_modules/ws/lib/sender.js\");\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = __webpack_require__(/*! ./constants */ \"./node_modules/discord.js/node_modules/ws/lib/constants.js\");\nconst { addEventListener, removeEventListener } = __webpack_require__(/*! ./event-target */ \"./node_modules/discord.js/node_modules/ws/lib/event-target.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"./node_modules/discord.js/node_modules/ws/lib/extension.js\");\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"./node_modules/discord.js/node_modules/ws/lib/buffer-util.js\");\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|url.URL)} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this.readyState = WebSocket.CONNECTING;\n    this.protocol = '';\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = '';\n    this._closeTimer = null;\n    this._closeCode = 1006;\n    this._extensions = {};\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (Array.isArray(protocols)) {\n        protocols = protocols.join(', ');\n      } else if (typeof protocols === 'object' && protocols !== null) {\n        options = protocols;\n        protocols = undefined;\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  get CONNECTING() {\n    return WebSocket.CONNECTING;\n  }\n  get CLOSING() {\n    return WebSocket.CLOSING;\n  }\n  get CLOSED() {\n    return WebSocket.CLOSED;\n  }\n  get OPEN() {\n    return WebSocket.OPEN;\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    //\n    // `socket.bufferSize` is `undefined` if the socket is closed.\n    //\n    return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} maxPayload The maximum allowed message size\n   * @private\n   */\n  setSocket(socket, head, maxPayload) {\n    const receiver = new Receiver(\n      this._binaryType,\n      this._extensions,\n      this._isServer,\n      maxPayload\n    );\n\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this.readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this.readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this.readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();\n      return;\n    }\n\n    this.readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n      if (this._closeFrameReceived) this._socket.end();\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this.readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\nreadyStates.forEach((readyState, i) => {\n  WebSocket[readyState] = i;\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */\n    get() {\n      const listeners = this.listeners(method);\n      for (let i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n\n      return undefined;\n    },\n    /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */\n    set(listener) {\n      const listeners = this.listeners(method);\n      for (let i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n      this.addEventListener(method, listener);\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|url.URL)} address The URL to which to connect\n * @param {String} protocols The subprotocols\n * @param {Object} options Connection options\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable\n *     permessage-deflate\n * @param {Number} options.handshakeTimeout Timeout in milliseconds for the\n *     handshake request\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version`\n *     header\n * @param {String} options.origin Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {Number} options.maxPayload The maximum allowed message size\n * @param {Boolean} options.followRedirects Whether or not to follow redirects\n * @param {Number} options.maxRedirects The maximum number of redirects allowed\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket.url = address.href;\n  } else {\n    parsedUrl = new URL(address);\n    websocket.url = address;\n  }\n\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n\n  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\n    throw new Error(`Invalid URL: ${websocket.url}`);\n  }\n\n  const isSecure =\n    parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols) {\n    opts.headers['Sec-WebSocket-Protocol'] = protocols;\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (websocket._req.aborted) return;\n\n    req = websocket._req = null;\n    websocket.readyState = WebSocket.CLOSING;\n    websocket.emit('error', err);\n    websocket.emitClose();\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      const addr = new URL(location, address);\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (protocols || '').split(/, */);\n    let protError;\n\n    if (!protocols && serverProt) {\n      protError = 'Server sent a subprotocol but none was requested';\n    } else if (protocols && !serverProt) {\n      protError = 'Server sent no subprotocol';\n    } else if (serverProt && !protList.includes(serverProt)) {\n      protError = 'Server sent an invalid subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket.protocol = serverProt;\n\n    if (perMessageDeflate) {\n      try {\n        const extensions = parse(res.headers['sec-websocket-extensions']);\n\n        if (extensions[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n          websocket._extensions[\n            PerMessageDeflate.extensionName\n          ] = perMessageDeflate;\n        }\n      } catch (err) {\n        abortHandshake(\n          websocket,\n          socket,\n          'Invalid Sec-WebSocket-Extensions header'\n        );\n        return;\n      }\n    }\n\n    websocket.setSocket(socket, head, opts.maxPayload);\n  });\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the\n *     socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket.readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} data The data to send\n * @param {Function} cb Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {String} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._socket.removeListener('data', socketOnData);\n  websocket._socket.resume();\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  websocket._socket.removeListener('data', socketOnData);\n\n  websocket.readyState = WebSocket.CLOSING;\n  websocket._closeCode = err[kStatusCode];\n  websocket.emit('error', err);\n  websocket._socket.destroy();\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\n * @private\n */\nfunction receiverOnMessage(data) {\n  this[kWebSocket].emit('message', data);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('end', socketOnEnd);\n\n  websocket.readyState = WebSocket.CLOSING;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk and emitted synchronously in a single\n  // `'data'` event.\n  //\n  websocket._socket.read();\n  websocket._receiver.end();\n\n  this.removeListener('data', socketOnData);\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket.readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket.readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/node_modules/ws/lib/websocket.js?");

/***/ }),

/***/ "./node_modules/discord.js/package.json":
/*!**********************************************!*\
  !*** ./node_modules/discord.js/package.json ***!
  \**********************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, browser, bugs, bundleDependencies, commitlint, dependencies, deprecated, description, devDependencies, engines, exports, homepage, husky, keywords, license, lint-staged, main, name, peerDependencies, peerDependenciesMeta, repository, runkitExampleFilename, scripts, types, unpkg, version, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"_from\\\":\\\"discord.js@^12.2.0\\\",\\\"_id\\\":\\\"discord.js@12.2.0\\\",\\\"_inBundle\\\":false,\\\"_integrity\\\":\\\"sha512-Ueb/0SOsxXyqwvwFYFe0msMrGqH1OMqpp2Dpbplnlr4MzcRrFWwsBM9gKNZXPVBHWUKiQkwU8AihXBXIvTTSvg==\\\",\\\"_location\\\":\\\"/discord.js\\\",\\\"_phantomChildren\\\":{},\\\"_requested\\\":{\\\"type\\\":\\\"range\\\",\\\"registry\\\":true,\\\"raw\\\":\\\"discord.js@^12.2.0\\\",\\\"name\\\":\\\"discord.js\\\",\\\"escapedName\\\":\\\"discord.js\\\",\\\"rawSpec\\\":\\\"^12.2.0\\\",\\\"saveSpec\\\":null,\\\"fetchSpec\\\":\\\"^12.2.0\\\"},\\\"_requiredBy\\\":[\\\"/\\\"],\\\"_resolved\\\":\\\"https://registry.npmjs.org/discord.js/-/discord.js-12.2.0.tgz\\\",\\\"_shasum\\\":\\\"31018732e42a495c92655055192221eab2ad11a9\\\",\\\"_spec\\\":\\\"discord.js@^12.2.0\\\",\\\"_where\\\":\\\"/mnt/c/localhost/discord-bot/Word-definition\\\",\\\"author\\\":{\\\"name\\\":\\\"Amish Shah\\\",\\\"email\\\":\\\"amishshah.2k@gmail.com\\\"},\\\"browser\\\":{\\\"@discordjs/opus\\\":false,\\\"https\\\":false,\\\"ws\\\":false,\\\"erlpack\\\":false,\\\"prism-media\\\":false,\\\"opusscript\\\":false,\\\"node-opus\\\":false,\\\"tweetnacl\\\":false,\\\"sodium\\\":false,\\\"worker_threads\\\":false,\\\"zlib-sync\\\":false,\\\"src/sharding/Shard.js\\\":false,\\\"src/sharding/ShardClientUtil.js\\\":false,\\\"src/sharding/ShardingManager.js\\\":false,\\\"src/client/voice/ClientVoiceManager.js\\\":false,\\\"src/client/voice/VoiceBroadcast.js\\\":false,\\\"src/client/voice/VoiceConnection.js\\\":false,\\\"src/client/voice/dispatcher/BroadcastDispatcher.js\\\":false,\\\"src/client/voice/dispatcher/StreamDispatcher.js\\\":false,\\\"src/client/voice/networking/VoiceUDPClient.js\\\":false,\\\"src/client/voice/networking/VoiceWebSocket.js\\\":false,\\\"src/client/voice/player/AudioPlayer.js\\\":false,\\\"src/client/voice/player/BasePlayer.js\\\":false,\\\"src/client/voice/player/BroadcastAudioPlayer.js\\\":false,\\\"src/client/voice/receiver/PacketHandler.js\\\":false,\\\"src/client/voice/receiver/Receiver.js\\\":false,\\\"src/client/voice/util/PlayInterface.js\\\":false,\\\"src/client/voice/util/Secretbox.js\\\":false,\\\"src/client/voice/util/Silence.js\\\":false,\\\"src/client/voice/util/VolumeInterface.js\\\":false},\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/discordjs/discord.js/issues\\\"},\\\"bundleDependencies\\\":false,\\\"commitlint\\\":{\\\"extends\\\":[\\\"@commitlint/config-angular\\\"],\\\"rules\\\":{\\\"scope-case\\\":[2,\\\"always\\\",\\\"pascal-case\\\"],\\\"type-enum\\\":[2,\\\"always\\\",[\\\"chore\\\",\\\"build\\\",\\\"ci\\\",\\\"docs\\\",\\\"feat\\\",\\\"fix\\\",\\\"perf\\\",\\\"refactor\\\",\\\"revert\\\",\\\"style\\\",\\\"test\\\"]]}},\\\"dependencies\\\":{\\\"@discordjs/collection\\\":\\\"^0.1.5\\\",\\\"@discordjs/form-data\\\":\\\"^3.0.1\\\",\\\"abort-controller\\\":\\\"^3.0.0\\\",\\\"node-fetch\\\":\\\"^2.6.0\\\",\\\"prism-media\\\":\\\"^1.2.0\\\",\\\"setimmediate\\\":\\\"^1.0.5\\\",\\\"tweetnacl\\\":\\\"^1.0.3\\\",\\\"ws\\\":\\\"^7.2.1\\\"},\\\"deprecated\\\":false,\\\"description\\\":\\\"A powerful library for interacting with the Discord API\\\",\\\"devDependencies\\\":{\\\"@commitlint/cli\\\":\\\"^8.3.5\\\",\\\"@commitlint/config-angular\\\":\\\"^8.3.4\\\",\\\"@types/node\\\":\\\"^10.12.24\\\",\\\"@types/ws\\\":\\\"^7.2.1\\\",\\\"cross-env\\\":\\\"^7.0.2\\\",\\\"discord.js-docgen\\\":\\\"github:discordjs/docgen\\\",\\\"dtslint\\\":\\\"^3.0.0\\\",\\\"eslint\\\":\\\"^6.8.0\\\",\\\"eslint-config-prettier\\\":\\\"^6.10.0\\\",\\\"eslint-plugin-import\\\":\\\"^2.20.1\\\",\\\"eslint-plugin-prettier\\\":\\\"^3.1.2\\\",\\\"husky\\\":\\\"^4.2.3\\\",\\\"jest\\\":\\\"^25.1.0\\\",\\\"json-filter-loader\\\":\\\"^1.0.0\\\",\\\"lint-staged\\\":\\\"^10.0.8\\\",\\\"prettier\\\":\\\"^1.19.1\\\",\\\"terser-webpack-plugin\\\":\\\"^1.2.2\\\",\\\"tslint\\\":\\\"^6.0.0\\\",\\\"typescript\\\":\\\"^3.8.2\\\",\\\"webpack\\\":\\\"^4.41.6\\\",\\\"webpack-cli\\\":\\\"^3.3.11\\\"},\\\"engines\\\":{\\\"node\\\":\\\">=12.0.0\\\"},\\\"exports\\\":{\\\".\\\":[{\\\"require\\\":\\\"./src/index.js\\\",\\\"import\\\":\\\"./esm/discord.mjs\\\"},\\\"./src/index.js\\\"],\\\"./esm\\\":\\\"./esm/discord.mjs\\\"},\\\"homepage\\\":\\\"https://github.com/discordjs/discord.js#readme\\\",\\\"husky\\\":{\\\"hooks\\\":{\\\"pre-commit\\\":\\\"lint-staged\\\",\\\"commit-msg\\\":\\\"commitlint -E HUSKY_GIT_PARAMS\\\"}},\\\"keywords\\\":[\\\"discord\\\",\\\"api\\\",\\\"bot\\\",\\\"client\\\",\\\"node\\\",\\\"discordapp\\\"],\\\"license\\\":\\\"Apache-2.0\\\",\\\"lint-staged\\\":{\\\"*.js\\\":\\\"eslint --fix\\\",\\\"*.ts\\\":\\\"prettier --write --single-quote --print-width 120 --trailing-comma all --end-of-line lf\\\"},\\\"main\\\":\\\"./src/index\\\",\\\"name\\\":\\\"discord.js\\\",\\\"peerDependencies\\\":{\\\"bufferutil\\\":\\\"^4.0.1\\\",\\\"erlpack\\\":\\\"discordapp/erlpack\\\",\\\"libsodium-wrappers\\\":\\\"^0.7.6\\\",\\\"sodium\\\":\\\"^3.0.2\\\",\\\"utf-8-validate\\\":\\\"^5.0.2\\\",\\\"zlib-sync\\\":\\\"^0.1.6\\\"},\\\"peerDependenciesMeta\\\":{\\\"bufferutil\\\":{\\\"optional\\\":true},\\\"erlpack\\\":{\\\"optional\\\":true},\\\"libsodium-wrappers\\\":{\\\"optional\\\":true},\\\"sodium\\\":{\\\"optional\\\":true},\\\"utf-8-validate\\\":{\\\"optional\\\":true},\\\"zlib-sync\\\":{\\\"optional\\\":true}},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/discordjs/discord.js.git\\\"},\\\"runkitExampleFilename\\\":\\\"./docs/examples/ping.js\\\",\\\"scripts\\\":{\\\"build:browser\\\":\\\"webpack\\\",\\\"docs\\\":\\\"docgen --source src --custom docs/index.yml --output docs/docs.json\\\",\\\"docs:test\\\":\\\"docgen --source src --custom docs/index.yml\\\",\\\"lint\\\":\\\"eslint src\\\",\\\"lint:fix\\\":\\\"eslint src --fix\\\",\\\"lint:typings\\\":\\\"tslint typings/index.d.ts\\\",\\\"prepublishOnly\\\":\\\"npm run test && cross-env NODE_ENV=production npm run build:browser\\\",\\\"prettier\\\":\\\"prettier --write --single-quote --print-width 120 --trailing-comma all --end-of-line lf src/**/*.js typings/**/*.ts\\\",\\\"test\\\":\\\"npm run lint && npm run docs:test && npm run lint:typings\\\",\\\"test:typescript\\\":\\\"tsc\\\"},\\\"types\\\":\\\"./typings/index.d.ts\\\",\\\"unpkg\\\":\\\"./webpack/discord.min.js\\\",\\\"version\\\":\\\"12.2.0\\\"}\");\n\n//# sourceURL=webpack:///./node_modules/discord.js/package.json?");

/***/ }),

/***/ "./node_modules/discord.js/src/WebSocket.js":
/*!**************************************************!*\
  !*** ./node_modules/discord.js/src/WebSocket.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { browser } = __webpack_require__(/*! ./util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nlet erlpack;\n\ntry {\n  erlpack = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'erlpack'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n  if (!erlpack.pack) erlpack = null;\n} catch {} // eslint-disable-line no-empty\n\nlet TextDecoder;\n\nif (browser) {\n  TextDecoder = window.TextDecoder; // eslint-disable-line no-undef\n  exports.WebSocket = window.WebSocket; // eslint-disable-line no-undef\n} else {\n  TextDecoder = __webpack_require__(/*! util */ \"util\").TextDecoder;\n  exports.WebSocket = __webpack_require__(/*! ws */ \"./node_modules/discord.js/node_modules/ws/index.js\");\n}\n\nconst ab = new TextDecoder();\n\nexports.encoding = erlpack ? 'etf' : 'json';\n\nexports.pack = erlpack ? erlpack.pack : JSON.stringify;\n\nexports.unpack = (data, type) => {\n  if (exports.encoding === 'json' || type === 'json') {\n    if (typeof data !== 'string') {\n      data = ab.decode(data);\n    }\n    return JSON.parse(data);\n  }\n  if (!Buffer.isBuffer(data)) data = Buffer.from(new Uint8Array(data));\n  return erlpack.unpack(data);\n};\n\nexports.create = (gateway, query = {}, ...args) => {\n  const [g, q] = gateway.split('?');\n  query.encoding = exports.encoding;\n  query = new URLSearchParams(query);\n  if (q) new URLSearchParams(q).forEach((v, k) => query.set(k, v));\n  const ws = new exports.WebSocket(`${g}?${query}`, ...args);\n  if (browser) ws.binaryType = 'arraybuffer';\n  return ws;\n};\n\nfor (const state of ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED']) exports[state] = exports.WebSocket[state];\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/WebSocket.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/BaseClient.js":
/*!**********************************************************!*\
  !*** ./node_modules/discord.js/src/client/BaseClient.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst RESTManager = __webpack_require__(/*! ../rest/RESTManager */ \"./node_modules/discord.js/src/rest/RESTManager.js\");\nconst { DefaultOptions } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * The base class for all clients.\n * @extends {EventEmitter}\n */\nclass BaseClient extends EventEmitter {\n  constructor(options = {}) {\n    super();\n\n    /**\n     * Timeouts set by {@link BaseClient#setTimeout} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n    this._timeouts = new Set();\n\n    /**\n     * Intervals set by {@link BaseClient#setInterval} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n    this._intervals = new Set();\n\n    /**\n     * Intervals set by {@link BaseClient#setImmediate} that are still active\n     * @type {Set<Immediate>}\n     * @private\n     */\n    this._immediates = new Set();\n\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n    this.options = Util.mergeDefault(DefaultOptions, options);\n\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n    this.rest = new RESTManager(this, options._tokenType);\n  }\n\n  /**\n   * API shortcut\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  get api() {\n    return this.rest.api;\n  }\n\n  /**\n   * Destroys all assets used by the base client.\n   */\n  destroy() {\n    for (const t of this._timeouts) this.clearTimeout(t);\n    for (const i of this._intervals) this.clearInterval(i);\n    for (const i of this._immediates) this.clearImmediate(i);\n    this._timeouts.clear();\n    this._intervals.clear();\n    this._immediates.clear();\n  }\n\n  /**\n   * Sets a timeout that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setTimeout(fn, delay, ...args) {\n    const timeout = setTimeout(() => {\n      fn(...args);\n      this._timeouts.delete(timeout);\n    }, delay);\n    this._timeouts.add(timeout);\n    return timeout;\n  }\n\n  /**\n   * Clears a timeout.\n   * @param {Timeout} timeout Timeout to cancel\n   */\n  clearTimeout(timeout) {\n    clearTimeout(timeout);\n    this._timeouts.delete(timeout);\n  }\n\n  /**\n   * Sets an interval that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait between executions (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setInterval(fn, delay, ...args) {\n    const interval = setInterval(fn, delay, ...args);\n    this._intervals.add(interval);\n    return interval;\n  }\n\n  /**\n   * Clears an interval.\n   * @param {Timeout} interval Interval to cancel\n   */\n  clearInterval(interval) {\n    clearInterval(interval);\n    this._intervals.delete(interval);\n  }\n\n  /**\n   * Sets an immediate that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {...*} args Arguments for the function\n   * @returns {Immediate}\n   */\n  setImmediate(fn, ...args) {\n    const immediate = setImmediate(fn, ...args);\n    this._immediates.add(immediate);\n    return immediate;\n  }\n\n  /**\n   * Clears an immediate.\n   * @param {Immediate} immediate Immediate to cancel\n   */\n  clearImmediate(immediate) {\n    clearImmediate(immediate);\n    this._immediates.delete(immediate);\n  }\n\n  toJSON(...props) {\n    return Util.flatten(this, { domain: false }, ...props);\n  }\n}\n\nmodule.exports = BaseClient;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/BaseClient.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/Client.js":
/*!******************************************************!*\
  !*** ./node_modules/discord.js/src/client/Client.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseClient = __webpack_require__(/*! ./BaseClient */ \"./node_modules/discord.js/src/client/BaseClient.js\");\nconst ActionsManager = __webpack_require__(/*! ./actions/ActionsManager */ \"./node_modules/discord.js/src/client/actions/ActionsManager.js\");\nconst ClientVoiceManager = __webpack_require__(/*! ./voice/ClientVoiceManager */ \"./node_modules/discord.js/src/client/voice/ClientVoiceManager.js\");\nconst WebSocketManager = __webpack_require__(/*! ./websocket/WebSocketManager */ \"./node_modules/discord.js/src/client/websocket/WebSocketManager.js\");\nconst { Error, TypeError, RangeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst ChannelManager = __webpack_require__(/*! ../managers/ChannelManager */ \"./node_modules/discord.js/src/managers/ChannelManager.js\");\nconst GuildEmojiManager = __webpack_require__(/*! ../managers/GuildEmojiManager */ \"./node_modules/discord.js/src/managers/GuildEmojiManager.js\");\nconst GuildManager = __webpack_require__(/*! ../managers/GuildManager */ \"./node_modules/discord.js/src/managers/GuildManager.js\");\nconst UserManager = __webpack_require__(/*! ../managers/UserManager */ \"./node_modules/discord.js/src/managers/UserManager.js\");\nconst ShardClientUtil = __webpack_require__(/*! ../sharding/ShardClientUtil */ \"./node_modules/discord.js/src/sharding/ShardClientUtil.js\");\nconst ClientApplication = __webpack_require__(/*! ../structures/ClientApplication */ \"./node_modules/discord.js/src/structures/ClientApplication.js\");\nconst GuildPreview = __webpack_require__(/*! ../structures/GuildPreview */ \"./node_modules/discord.js/src/structures/GuildPreview.js\");\nconst Invite = __webpack_require__(/*! ../structures/Invite */ \"./node_modules/discord.js/src/structures/Invite.js\");\nconst VoiceRegion = __webpack_require__(/*! ../structures/VoiceRegion */ \"./node_modules/discord.js/src/structures/VoiceRegion.js\");\nconst Webhook = __webpack_require__(/*! ../structures/Webhook */ \"./node_modules/discord.js/src/structures/Webhook.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { Events, browser, DefaultOptions } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst DataResolver = __webpack_require__(/*! ../util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\");\nconst Intents = __webpack_require__(/*! ../util/Intents */ \"./node_modules/discord.js/src/util/Intents.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\nconst Structures = __webpack_require__(/*! ../util/Structures */ \"./node_modules/discord.js/src/util/Structures.js\");\n\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\nclass Client extends BaseClient {\n  /**\n   * @param {ClientOptions} [options] Options for the client\n   */\n  constructor(options = {}) {\n    super(Object.assign({ _tokenType: 'Bot' }, options));\n\n    // Obtain shard details from environment or if present, worker threads\n    let data = process.env;\n    try {\n      // Test if worker threads module is present and used\n      data = __webpack_require__(/*! worker_threads */ \"worker_threads\").workerData || data;\n    } catch {\n      // Do nothing\n    }\n\n    if (this.options.shards === DefaultOptions.shards) {\n      if ('SHARDS' in data) {\n        this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n\n    if (this.options.shardCount === DefaultOptions.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(this.options.shards)) {\n        this.options.shardCount = this.options.shards.length;\n      }\n    }\n\n    const typeofShards = typeof this.options.shards;\n\n    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {\n      this.options.shards = Array.from({ length: this.options.shardCount }, (_, i) => i);\n    }\n\n    if (typeofShards === 'number') this.options.shards = [this.options.shards];\n\n    if (Array.isArray(this.options.shards)) {\n      this.options.shards = [\n        ...new Set(\n          this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)),\n        ),\n      ];\n    }\n\n    this._validateOptions();\n\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n    this.ws = new WebSocketManager(this);\n\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n    this.actions = new ActionsManager(this);\n\n    /**\n     * The voice manager of the client (`null` in browsers)\n     * @type {?ClientVoiceManager}\n     */\n    this.voice = !browser ? new ClientVoiceManager(this) : null;\n\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n    this.shard =\n      !browser && process.env.SHARDING_MANAGER\n        ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE)\n        : null;\n\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their IDs\n     * @type {UserManager}\n     */\n    this.users = new UserManager(this);\n\n    /**\n     * All of the guilds the client is currently handling, mapped by their IDs -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n    this.guilds = new GuildManager(this);\n\n    /**\n     * All of the {@link Channel}s that the client is currently handling, mapped by their IDs -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n    this.channels = new ChannelManager(this);\n\n    const ClientPresence = Structures.get('ClientPresence');\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n    this.presence = new ClientPresence(this);\n\n    Object.defineProperty(this, 'token', { writable: true });\n    if (!browser && !this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.DISCORD_TOKEN;\n    } else {\n      this.token = null;\n    }\n\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n    this.user = null;\n\n    /**\n     * Time at which the client was last regarded as being in the `READY` state\n     * (each time the client disconnects and successfully reconnects, this will be overwritten)\n     * @type {?Date}\n     */\n    this.readyAt = null;\n\n    if (this.options.messageSweepInterval > 0) {\n      this.setInterval(this.sweepMessages.bind(this), this.options.messageSweepInterval * 1000);\n    }\n  }\n\n  /**\n   * All custom emojis that the client has access to, mapped by their IDs\n   * @type {GuildEmojiManager}\n   * @readonly\n   */\n  get emojis() {\n    const emojis = new GuildEmojiManager({ client: this });\n    for (const guild of this.guilds.cache.values()) {\n      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);\n    }\n    return emojis;\n  }\n\n  /**\n   * Timestamp of the time the client was last `READY` at\n   * @type {?number}\n   * @readonly\n   */\n  get readyTimestamp() {\n    return this.readyAt ? this.readyAt.getTime() : null;\n  }\n\n  /**\n   * How long it has been since the client last entered the `READY` state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n  get uptime() {\n    return this.readyAt ? Date.now() - this.readyAt : null;\n  }\n\n  /**\n   * Logs the client in, establishing a websocket connection to Discord.\n   * @param {string} token Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n  async login(token = this.token) {\n    if (!token || typeof token !== 'string') throw new Error('TOKEN_INVALID');\n    this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n    this.emit(\n      Events.DEBUG,\n      `Provided token: ${token\n        .split('.')\n        .map((val, i) => (i > 1 ? val.replace(/./g, '*') : val))\n        .join('.')}`,\n    );\n\n    if (this.options.presence) {\n      this.options.ws.presence = await this.presence._parse(this.options.presence);\n    }\n\n    this.emit(Events.DEBUG, 'Preparing to connect to the gateway...');\n\n    try {\n      await this.ws.connect();\n      return this.token;\n    } catch (error) {\n      this.destroy();\n      throw error;\n    }\n  }\n\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {void}\n   */\n  destroy() {\n    super.destroy();\n    this.ws.destroy();\n    this.token = null;\n  }\n\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @returns {Promise<Invite>}\n   * @example\n   * client.fetchInvite('https://discord.gg/bRCvFy9')\n   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n   *   .catch(console.error);\n   */\n  fetchInvite(invite) {\n    const code = DataResolver.resolveInviteCode(invite);\n    return this.api\n      .invites(code)\n      .get({ query: { with_counts: true } })\n      .then(data => new Invite(this, data));\n  }\n\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id ID of the webhook\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * client.fetchWebhook('id', 'token')\n   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n   *   .catch(console.error);\n   */\n  fetchWebhook(id, token) {\n    return this.api\n      .webhooks(id, token)\n      .get()\n      .then(data => new Webhook(this, data));\n  }\n\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * client.fetchVoiceRegions()\n   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  fetchVoiceRegions() {\n    return this.api.voice.regions.get().then(res => {\n      const regions = new Collection();\n      for (const region of res) regions.set(region.id, new VoiceRegion(region));\n      return regions;\n    });\n  }\n\n  /**\n   * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\n   * If the message has been edited, the time of the edit is used rather than the time of the original message.\n   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)\n   * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}\n   * @returns {number} Amount of messages that were removed from the caches,\n   * or -1 if the message cache lifetime is unlimited\n   * @example\n   * // Remove all messages older than 1800 seconds from the messages cache\n   * const amount = client.sweepMessages(1800);\n   * console.log(`Successfully removed ${amount} messages from the cache.`);\n   */\n  sweepMessages(lifetime = this.options.messageCacheLifetime) {\n    if (typeof lifetime !== 'number' || isNaN(lifetime)) {\n      throw new TypeError('INVALID_TYPE', 'lifetime', 'number');\n    }\n    if (lifetime <= 0) {\n      this.emit(Events.DEBUG, \"Didn't sweep messages - lifetime is unlimited\");\n      return -1;\n    }\n\n    const lifetimeMs = lifetime * 1000;\n    const now = Date.now();\n    let channels = 0;\n    let messages = 0;\n\n    for (const channel of this.channels.cache.values()) {\n      if (!channel.messages) continue;\n      channels++;\n\n      messages += channel.messages.cache.sweep(\n        message => now - (message.editedTimestamp || message.createdTimestamp) > lifetimeMs,\n      );\n    }\n\n    this.emit(\n      Events.DEBUG,\n      `Swept ${messages} messages older than ${lifetime} seconds in ${channels} text-based channels`,\n    );\n    return messages;\n  }\n\n  /**\n   * Obtains the OAuth Application of this bot from Discord.\n   * @returns {Promise<ClientApplication>}\n   */\n  fetchApplication() {\n    return this.api.oauth2\n      .applications('@me')\n      .get()\n      .then(app => new ClientApplication(this, app));\n  }\n\n  /**\n   * Obtains a guild preview from Discord, only available for public guilds.\n   * @param {GuildResolvable} guild The guild to fetch the preview for\n   * @returns {Promise<GuildPreview>}\n   */\n  fetchGuildPreview(guild) {\n    const id = this.guilds.resolveID(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    return this.api\n      .guilds(id)\n      .preview.get()\n      .then(data => new GuildPreview(this, data));\n  }\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * @param {PermissionResolvable} [permissions] Permissions to request\n   * @returns {Promise<string>}\n   * @example\n   * client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n   *   .then(link => console.log(`Generated bot invite link: ${link}`))\n   *   .catch(console.error);\n   */\n  async generateInvite(permissions) {\n    permissions = Permissions.resolve(permissions);\n    const application = await this.fetchApplication();\n    const query = new URLSearchParams({\n      client_id: application.id,\n      permissions: permissions,\n      scope: 'bot',\n    });\n    return `${this.options.http.api}${this.api.oauth2.authorize}?${query}`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      readyAt: false,\n      presences: false,\n    });\n  }\n\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n  _eval(script) {\n    return eval(script);\n  }\n\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n  _validateOptions(options = this.options) {\n    if (typeof options.ws.intents !== 'undefined') {\n      options.ws.intents = Intents.resolve(options.ws.intents);\n    }\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shardCount', 'a number greater than or equal to 1');\n    }\n    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shards', \"'auto', a number or array of numbers\");\n    }\n    if (options.shards && !options.shards.length) throw new RangeError('CLIENT_INVALID_PROVIDED_SHARDS');\n    if (typeof options.messageCacheMaxSize !== 'number' || isNaN(options.messageCacheMaxSize)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'messageCacheMaxSize', 'a number');\n    }\n    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'The messageCacheLifetime', 'a number');\n    }\n    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'messageSweepInterval', 'a number');\n    }\n    if (typeof options.fetchAllMembers !== 'boolean') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'fetchAllMembers', 'a boolean');\n    }\n    if (typeof options.disableMentions !== 'string') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'disableMentions', 'a string');\n    }\n    if (!Array.isArray(options.partials)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'partials', 'an Array');\n    }\n    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restWsBridgeTimeout', 'a number');\n    }\n    if (typeof options.restRequestTimeout !== 'number' || isNaN(options.restRequestTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restRequestTimeout', 'a number');\n    }\n    if (typeof options.restSweepInterval !== 'number' || isNaN(options.restSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restSweepInterval', 'a number');\n    }\n    if (typeof options.retryLimit !== 'number' || isNaN(options.retryLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'retryLimit', 'a number');\n    }\n  }\n}\n\nmodule.exports = Client;\n\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * Emitted for general debugging information.\n * @event Client#debug\n * @param {string} info The debug information\n */\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/Client.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/WebhookClient.js":
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/client/WebhookClient.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseClient = __webpack_require__(/*! ./BaseClient */ \"./node_modules/discord.js/src/client/BaseClient.js\");\nconst Webhook = __webpack_require__(/*! ../structures/Webhook */ \"./node_modules/discord.js/src/structures/Webhook.js\");\n\n/**\n * The webhook client.\n * @implements {Webhook}\n * @extends {BaseClient}\n */\nclass WebhookClient extends BaseClient {\n  /**\n   * @param {Snowflake} id ID of the webhook\n   * @param {string} token Token of the webhook\n   * @param {ClientOptions} [options] Options for the client\n   * @example\n   * // Create a new webhook and send a message\n   * const hook = new Discord.WebhookClient('1234', 'abcdef');\n   * hook.send('This will send a message').catch(console.error);\n   */\n  constructor(id, token, options) {\n    super(options);\n    Object.defineProperty(this, 'client', { value: this });\n    this.id = id;\n    Object.defineProperty(this, 'token', { value: token, writable: true, configurable: true });\n  }\n}\n\nWebhook.applyToClass(WebhookClient);\n\nmodule.exports = WebhookClient;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/WebhookClient.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/Action.js":
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/Action.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { PartialTypes } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/*\n\nABOUT ACTIONS\n\nActions are similar to WebSocket Packet Handlers, but since introducing\nthe REST API methods, in order to prevent rewriting code to handle data,\n\"actions\" have been introduced. They're basically what Packet Handlers\nused to be but they're strictly for manipulating data and making sure\nthat WebSocket events don't clash with REST methods.\n\n*/\n\nclass GenericAction {\n  constructor(client) {\n    this.client = client;\n  }\n\n  handle(data) {\n    return data;\n  }\n\n  getPayload(data, manager, id, partialType, cache) {\n    const existing = manager.cache.get(id);\n    if (!existing && this.client.options.partials.includes(partialType)) {\n      return manager.add(data, cache);\n    }\n    return existing;\n  }\n\n  getChannel(data) {\n    const id = data.channel_id || data.id;\n    return (\n      data.channel ||\n      this.getPayload(\n        {\n          id,\n          guild_id: data.guild_id,\n          recipients: [data.author || { id: data.user_id }],\n        },\n        this.client.channels,\n        id,\n        PartialTypes.CHANNEL,\n      )\n    );\n  }\n\n  getMessage(data, channel, cache) {\n    const id = data.message_id || data.id;\n    return (\n      data.message ||\n      this.getPayload(\n        {\n          id,\n          channel_id: channel.id,\n          guild_id: data.guild_id || (channel.guild ? channel.guild.id : null),\n        },\n        channel.messages,\n        id,\n        PartialTypes.MESSAGE,\n        cache,\n      )\n    );\n  }\n\n  getReaction(data, message, user) {\n    const id = data.emoji.id || decodeURIComponent(data.emoji.name);\n    return this.getPayload(\n      {\n        emoji: data.emoji,\n        count: message.partial ? null : 0,\n        me: user ? user.id === this.client.user.id : false,\n      },\n      message.reactions,\n      id,\n      PartialTypes.REACTION,\n    );\n  }\n\n  getMember(data, guild) {\n    const id = data.user.id;\n    return this.getPayload(\n      {\n        user: {\n          id,\n        },\n      },\n      guild.members,\n      id,\n      PartialTypes.GUILD_MEMBER,\n    );\n  }\n\n  getUser(data) {\n    const id = data.user_id;\n    return data.user || this.getPayload({ id }, this.client.users, id, PartialTypes.USER);\n  }\n}\n\nmodule.exports = GenericAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/Action.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/ActionsManager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ActionsManager.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nclass ActionsManager {\n  constructor(client) {\n    this.client = client;\n\n    this.register(__webpack_require__(/*! ./MessageCreate */ \"./node_modules/discord.js/src/client/actions/MessageCreate.js\"));\n    this.register(__webpack_require__(/*! ./MessageDelete */ \"./node_modules/discord.js/src/client/actions/MessageDelete.js\"));\n    this.register(__webpack_require__(/*! ./MessageDeleteBulk */ \"./node_modules/discord.js/src/client/actions/MessageDeleteBulk.js\"));\n    this.register(__webpack_require__(/*! ./MessageUpdate */ \"./node_modules/discord.js/src/client/actions/MessageUpdate.js\"));\n    this.register(__webpack_require__(/*! ./MessageReactionAdd */ \"./node_modules/discord.js/src/client/actions/MessageReactionAdd.js\"));\n    this.register(__webpack_require__(/*! ./MessageReactionRemove */ \"./node_modules/discord.js/src/client/actions/MessageReactionRemove.js\"));\n    this.register(__webpack_require__(/*! ./MessageReactionRemoveAll */ \"./node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js\"));\n    this.register(__webpack_require__(/*! ./MessageReactionRemoveEmoji */ \"./node_modules/discord.js/src/client/actions/MessageReactionRemoveEmoji.js\"));\n    this.register(__webpack_require__(/*! ./ChannelCreate */ \"./node_modules/discord.js/src/client/actions/ChannelCreate.js\"));\n    this.register(__webpack_require__(/*! ./ChannelDelete */ \"./node_modules/discord.js/src/client/actions/ChannelDelete.js\"));\n    this.register(__webpack_require__(/*! ./ChannelUpdate */ \"./node_modules/discord.js/src/client/actions/ChannelUpdate.js\"));\n    this.register(__webpack_require__(/*! ./GuildDelete */ \"./node_modules/discord.js/src/client/actions/GuildDelete.js\"));\n    this.register(__webpack_require__(/*! ./GuildUpdate */ \"./node_modules/discord.js/src/client/actions/GuildUpdate.js\"));\n    this.register(__webpack_require__(/*! ./InviteCreate */ \"./node_modules/discord.js/src/client/actions/InviteCreate.js\"));\n    this.register(__webpack_require__(/*! ./InviteDelete */ \"./node_modules/discord.js/src/client/actions/InviteDelete.js\"));\n    this.register(__webpack_require__(/*! ./GuildMemberRemove */ \"./node_modules/discord.js/src/client/actions/GuildMemberRemove.js\"));\n    this.register(__webpack_require__(/*! ./GuildBanRemove */ \"./node_modules/discord.js/src/client/actions/GuildBanRemove.js\"));\n    this.register(__webpack_require__(/*! ./GuildRoleCreate */ \"./node_modules/discord.js/src/client/actions/GuildRoleCreate.js\"));\n    this.register(__webpack_require__(/*! ./GuildRoleDelete */ \"./node_modules/discord.js/src/client/actions/GuildRoleDelete.js\"));\n    this.register(__webpack_require__(/*! ./GuildRoleUpdate */ \"./node_modules/discord.js/src/client/actions/GuildRoleUpdate.js\"));\n    this.register(__webpack_require__(/*! ./PresenceUpdate */ \"./node_modules/discord.js/src/client/actions/PresenceUpdate.js\"));\n    this.register(__webpack_require__(/*! ./UserUpdate */ \"./node_modules/discord.js/src/client/actions/UserUpdate.js\"));\n    this.register(__webpack_require__(/*! ./VoiceStateUpdate */ \"./node_modules/discord.js/src/client/actions/VoiceStateUpdate.js\"));\n    this.register(__webpack_require__(/*! ./GuildEmojiCreate */ \"./node_modules/discord.js/src/client/actions/GuildEmojiCreate.js\"));\n    this.register(__webpack_require__(/*! ./GuildEmojiDelete */ \"./node_modules/discord.js/src/client/actions/GuildEmojiDelete.js\"));\n    this.register(__webpack_require__(/*! ./GuildEmojiUpdate */ \"./node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js\"));\n    this.register(__webpack_require__(/*! ./GuildEmojisUpdate */ \"./node_modules/discord.js/src/client/actions/GuildEmojisUpdate.js\"));\n    this.register(__webpack_require__(/*! ./GuildRolesPositionUpdate */ \"./node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js\"));\n    this.register(__webpack_require__(/*! ./GuildChannelsPositionUpdate */ \"./node_modules/discord.js/src/client/actions/GuildChannelsPositionUpdate.js\"));\n    this.register(__webpack_require__(/*! ./GuildIntegrationsUpdate */ \"./node_modules/discord.js/src/client/actions/GuildIntegrationsUpdate.js\"));\n    this.register(__webpack_require__(/*! ./WebhooksUpdate */ \"./node_modules/discord.js/src/client/actions/WebhooksUpdate.js\"));\n  }\n\n  register(Action) {\n    this[Action.name.replace(/Action$/, '')] = new Action(this.client);\n  }\n}\n\nmodule.exports = ActionsManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/ActionsManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/ChannelCreate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelCreate.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass ChannelCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const existing = client.channels.cache.has(data.id);\n    const channel = client.channels.add(data);\n    if (!existing && channel) {\n      /**\n       * Emitted whenever a channel is created.\n       * @event Client#channelCreate\n       * @param {DMChannel|GuildChannel} channel The channel that was created\n       */\n      client.emit(Events.CHANNEL_CREATE, channel);\n    }\n    return { channel };\n  }\n}\n\nmodule.exports = ChannelCreateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/ChannelCreate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/ChannelDelete.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelDelete.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst DMChannel = __webpack_require__(/*! ../../structures/DMChannel */ \"./node_modules/discord.js/src/structures/DMChannel.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass ChannelDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    let channel = client.channels.cache.get(data.id);\n\n    if (channel) {\n      client.channels.remove(channel.id);\n      channel.deleted = true;\n      if (channel.messages && !(channel instanceof DMChannel)) {\n        for (const message of channel.messages.cache.values()) {\n          message.deleted = true;\n        }\n      }\n      /**\n       * Emitted whenever a channel is deleted.\n       * @event Client#channelDelete\n       * @param {DMChannel|GuildChannel} channel The channel that was deleted\n       */\n      client.emit(Events.CHANNEL_DELETE, channel);\n    }\n\n    return { channel };\n  }\n}\n\nmodule.exports = ChannelDeleteAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/ChannelDelete.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/ChannelUpdate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelUpdate.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst Channel = __webpack_require__(/*! ../../structures/Channel */ \"./node_modules/discord.js/src/structures/Channel.js\");\nconst { ChannelTypes } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    let channel = client.channels.cache.get(data.id);\n    if (channel) {\n      const old = channel._update(data);\n\n      if (ChannelTypes[channel.type.toUpperCase()] !== data.type) {\n        const newChannel = Channel.create(this.client, data, channel.guild);\n        for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);\n        newChannel._typing = new Map(channel._typing);\n        channel = newChannel;\n        this.client.channels.cache.set(channel.id, channel);\n      }\n\n      return {\n        old,\n        updated: channel,\n      };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = ChannelUpdateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/ChannelUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildBanRemove.js":
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildBanRemove.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildBanRemove extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    const user = client.users.add(data.user);\n    /**\n     * Emitted whenever a member is unbanned from a guild.\n     * @event Client#guildBanRemove\n     * @param {Guild} guild The guild that the unban occurred in\n     * @param {User} user The user that was unbanned\n     */\n    if (guild && user) client.emit(Events.GUILD_BAN_REMOVE, guild, user);\n  }\n}\n\nmodule.exports = GuildBanRemove;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildBanRemove.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildChannelsPositionUpdate.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildChannelsPositionUpdate.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\n\nclass GuildChannelsPositionUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      for (const partialChannel of data.channels) {\n        const channel = guild.channels.cache.get(partialChannel.id);\n        if (channel) channel.rawPosition = partialChannel.position;\n      }\n    }\n\n    return { guild };\n  }\n}\n\nmodule.exports = GuildChannelsPositionUpdate;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildChannelsPositionUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildDelete.js":
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildDelete.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    let guild = client.guilds.cache.get(data.id);\n    if (guild) {\n      for (const channel of guild.channels.cache.values()) {\n        if (channel.type === 'text') channel.stopTyping(true);\n      }\n\n      if (data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n\n        /**\n         * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n         * @event Client#guildUnavailable\n         * @param {Guild} guild The guild that has become unavailable\n         */\n        client.emit(Events.GUILD_UNAVAILABLE, guild);\n\n        // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n        return {\n          guild: null,\n        };\n      }\n\n      for (const channel of guild.channels.cache.values()) this.client.channels.remove(channel.id);\n      if (guild.voice && guild.voice.connection) guild.voice.connection.disconnect();\n\n      // Delete guild\n      client.guilds.cache.delete(guild.id);\n      guild.deleted = true;\n\n      /**\n       * Emitted whenever a guild kicks the client or the guild is deleted/left.\n       * @event Client#guildDelete\n       * @param {Guild} guild The guild that was deleted\n       */\n      client.emit(Events.GUILD_DELETE, guild);\n\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) || null;\n    }\n\n    return { guild };\n  }\n\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n}\n\nmodule.exports = GuildDeleteAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildDelete.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildEmojiCreate.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiCreate.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildEmojiCreateAction extends Action {\n  handle(guild, createdEmoji) {\n    const emoji = guild.emojis.add(createdEmoji);\n    /**\n     * Emitted whenever a custom emoji is created in a guild.\n     * @event Client#emojiCreate\n     * @param {GuildEmoji} emoji The emoji that was created\n     */\n    this.client.emit(Events.GUILD_EMOJI_CREATE, emoji);\n    return { emoji };\n  }\n}\n\nmodule.exports = GuildEmojiCreateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildEmojiCreate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildEmojiDelete.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiDelete.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildEmojiDeleteAction extends Action {\n  handle(emoji) {\n    emoji.guild.emojis.cache.delete(emoji.id);\n    emoji.deleted = true;\n    /**\n     * Emitted whenever a custom emoji is deleted in a guild.\n     * @event Client#emojiDelete\n     * @param {GuildEmoji} emoji The emoji that was deleted\n     */\n    this.client.emit(Events.GUILD_EMOJI_DELETE, emoji);\n    return { emoji };\n  }\n}\n\nmodule.exports = GuildEmojiDeleteAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildEmojiDelete.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildEmojiUpdateAction extends Action {\n  handle(current, data) {\n    const old = current._update(data);\n    /**\n     * Emitted whenever a custom emoji is updated in a guild.\n     * @event Client#emojiUpdate\n     * @param {GuildEmoji} oldEmoji The old emoji\n     * @param {GuildEmoji} newEmoji The new emoji\n     */\n    this.client.emit(Events.GUILD_EMOJI_UPDATE, old, current);\n    return { emoji: current };\n  }\n}\n\nmodule.exports = GuildEmojiUpdateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildEmojisUpdate.js":
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojisUpdate.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\n\nclass GuildEmojisUpdateAction extends Action {\n  handle(data) {\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild || !guild.emojis) return;\n\n    const deletions = new Map(guild.emojis.cache);\n\n    for (const emoji of data.emojis) {\n      // Determine type of emoji event\n      const cachedEmoji = guild.emojis.cache.get(emoji.id);\n      if (cachedEmoji) {\n        deletions.delete(emoji.id);\n        if (!cachedEmoji.equals(emoji)) {\n          // Emoji updated\n          this.client.actions.GuildEmojiUpdate.handle(cachedEmoji, emoji);\n        }\n      } else {\n        // Emoji added\n        this.client.actions.GuildEmojiCreate.handle(guild, emoji);\n      }\n    }\n\n    for (const emoji of deletions.values()) {\n      // Emoji deleted\n      this.client.actions.GuildEmojiDelete.handle(emoji);\n    }\n  }\n}\n\nmodule.exports = GuildEmojisUpdateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildEmojisUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildIntegrationsUpdate.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildIntegrationsUpdate.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildIntegrationsUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    /**\n     * Emitted whenever a guild integration is updated\n     * @event Client#guildIntegrationsUpdate\n     * @param {Guild} guild The guild whose integrations were updated\n     */\n    if (guild) client.emit(Events.GUILD_INTEGRATIONS_UPDATE, guild);\n  }\n}\n\nmodule.exports = GuildIntegrationsUpdate;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildIntegrationsUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildMemberRemove.js":
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildMemberRemove.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events, Status } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildMemberRemoveAction extends Action {\n  handle(data, shard) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    let member = null;\n    if (guild) {\n      member = this.getMember(data, guild);\n      guild.memberCount--;\n      if (member) {\n        member.deleted = true;\n        guild.members.cache.delete(member.id);\n        /**\n         * Emitted whenever a member leaves a guild, or is kicked.\n         * @event Client#guildMemberRemove\n         * @param {GuildMember} member The member that has left/been kicked from the guild\n         */\n        if (shard.status === Status.READY) client.emit(Events.GUILD_MEMBER_REMOVE, member);\n      }\n      guild.voiceStates.cache.delete(data.user.id);\n    }\n    return { guild, member };\n  }\n}\n\nmodule.exports = GuildMemberRemoveAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildMemberRemove.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildRoleCreate.js":
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleCreate.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildRoleCreate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    let role;\n    if (guild) {\n      const already = guild.roles.cache.has(data.role.id);\n      role = guild.roles.add(data.role);\n      /**\n       * Emitted whenever a role is created.\n       * @event Client#roleCreate\n       * @param {Role} role The role that was created\n       */\n      if (!already) client.emit(Events.GUILD_ROLE_CREATE, role);\n    }\n    return { role };\n  }\n}\n\nmodule.exports = GuildRoleCreate;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildRoleCreate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildRoleDelete.js":
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleDelete.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildRoleDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    let role;\n\n    if (guild) {\n      role = guild.roles.cache.get(data.role_id);\n      if (role) {\n        guild.roles.cache.delete(data.role_id);\n        role.deleted = true;\n        /**\n         * Emitted whenever a guild role is deleted.\n         * @event Client#roleDelete\n         * @param {Role} role The role that was deleted\n         */\n        client.emit(Events.GUILD_ROLE_DELETE, role);\n      }\n    }\n\n    return { role };\n  }\n}\n\nmodule.exports = GuildRoleDeleteAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildRoleDelete.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildRoleUpdate.js":
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleUpdate.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildRoleUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      let old = null;\n\n      const role = guild.roles.cache.get(data.role.id);\n      if (role) {\n        old = role._update(data.role);\n        /**\n         * Emitted whenever a guild role is updated.\n         * @event Client#roleUpdate\n         * @param {Role} oldRole The role before the update\n         * @param {Role} newRole The role after the update\n         */\n        client.emit(Events.GUILD_ROLE_UPDATE, old, role);\n      }\n\n      return {\n        old,\n        updated: role,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\nmodule.exports = GuildRoleUpdateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildRoleUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js":
/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\n\nclass GuildRolesPositionUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      for (const partialRole of data.roles) {\n        const role = guild.roles.cache.get(partialRole.id);\n        if (role) role.rawPosition = partialRole.position;\n      }\n    }\n\n    return { guild };\n  }\n}\n\nmodule.exports = GuildRolesPositionUpdate;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/GuildUpdate.js":
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildUpdate.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass GuildUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.cache.get(data.id);\n    if (guild) {\n      const old = guild._update(data);\n      /**\n       * Emitted whenever a guild is updated - e.g. name change.\n       * @event Client#guildUpdate\n       * @param {Guild} oldGuild The guild before the update\n       * @param {Guild} newGuild The guild after the update\n       */\n      client.emit(Events.GUILD_UPDATE, old, guild);\n      return {\n        old,\n        updated: guild,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\nmodule.exports = GuildUpdateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/GuildUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/InviteCreate.js":
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/InviteCreate.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst Invite = __webpack_require__(/*! ../../structures/Invite */ \"./node_modules/discord.js/src/structures/Invite.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass InviteCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (!channel && !guild) return false;\n\n    const inviteData = Object.assign(data, { channel, guild });\n    const invite = new Invite(client, inviteData);\n    /**\n     * Emitted when an invite is created.\n     * <info> This event only triggers if the client has `MANAGE_GUILD` permissions for the guild,\n     * or `MANAGE_CHANNEL` permissions for the channel.</info>\n     * @event Client#inviteCreate\n     * @param {Invite} invite The invite that was created\n     */\n    client.emit(Events.INVITE_CREATE, invite);\n    return { invite };\n  }\n}\n\nmodule.exports = InviteCreateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/InviteCreate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/InviteDelete.js":
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/InviteDelete.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst Invite = __webpack_require__(/*! ../../structures/Invite */ \"./node_modules/discord.js/src/structures/Invite.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass InviteDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (!channel && !guild) return false;\n\n    const inviteData = Object.assign(data, { channel, guild });\n    const invite = new Invite(client, inviteData);\n\n    /**\n     * Emitted when an invite is deleted.\n     * <info> This event only triggers if the client has `MANAGE_GUILD` permissions for the guild,\n     * or `MANAGE_CHANNEL` permissions for the channel.</info>\n     * @event Client#inviteDelete\n     * @param {Invite} invite The invite that was deleted\n     */\n    client.emit(Events.INVITE_DELETE, invite);\n    return { invite };\n  }\n}\n\nmodule.exports = InviteDeleteAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/InviteDelete.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/MessageCreate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageCreate.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass MessageCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n    if (channel) {\n      const existing = channel.messages.cache.get(data.id);\n      if (existing) return { message: existing };\n      const message = channel.messages.add(data);\n      const user = message.author;\n      let member = message.member;\n      channel.lastMessageID = data.id;\n      if (user) {\n        user.lastMessageID = data.id;\n        user.lastMessageChannelID = channel.id;\n      }\n      if (member) {\n        member.lastMessageID = data.id;\n        member.lastMessageChannelID = channel.id;\n      }\n\n      /**\n       * Emitted whenever a message is created.\n       * @event Client#message\n       * @param {Message} message The created message\n       */\n      client.emit(Events.MESSAGE_CREATE, message);\n      return { message };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = MessageCreateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/MessageCreate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/MessageDelete.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageDelete.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass MessageDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n    let message;\n    if (channel) {\n      message = this.getMessage(data, channel);\n      if (message) {\n        channel.messages.cache.delete(message.id);\n        message.deleted = true;\n        /**\n         * Emitted whenever a message is deleted.\n         * @event Client#messageDelete\n         * @param {Message} message The deleted message\n         */\n        client.emit(Events.MESSAGE_DELETE, message);\n      }\n    }\n\n    return { message };\n  }\n}\n\nmodule.exports = MessageDeleteAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/MessageDelete.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/MessageDeleteBulk.js":
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageDeleteBulk.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst Collection = __webpack_require__(/*! ../../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass MessageDeleteBulkAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n\n    if (channel) {\n      const ids = data.ids;\n      const messages = new Collection();\n      for (const id of ids) {\n        const message = this.getMessage(\n          {\n            id,\n            guild_id: data.guild_id,\n          },\n          channel,\n          false,\n        );\n        if (message) {\n          message.deleted = true;\n          messages.set(message.id, message);\n          channel.messages.cache.delete(id);\n        }\n      }\n\n      /**\n       * Emitted whenever messages are deleted in bulk.\n       * @event Client#messageDeleteBulk\n       * @param {Collection<Snowflake, Message>} messages The deleted messages, mapped by their ID\n       */\n      if (messages.size > 0) client.emit(Events.MESSAGE_BULK_DELETE, messages);\n      return { messages };\n    }\n    return {};\n  }\n}\n\nmodule.exports = MessageDeleteBulkAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/MessageDeleteBulk.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/MessageReactionAdd.js":
/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionAdd.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst { PartialTypes } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id' } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n\n    const user = this.getUser(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel || channel.type === 'voice') return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    if (message.partial && !this.client.options.partials.includes(PartialTypes.REACTION)) return false;\n    const reaction = message.reactions.add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id,\n    });\n    if (!reaction) return false;\n    reaction._add(user);\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n    this.client.emit(Events.MESSAGE_REACTION_ADD, reaction, user);\n\n    return { message, reaction, user };\n  }\n}\n\nmodule.exports = MessageReactionAdd;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/MessageReactionAdd.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/MessageReactionRemove.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionRemove.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id' } }\n*/\n\nclass MessageReactionRemove extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n\n    const user = this.getUser(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel || channel.type === 'voice') return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    const reaction = this.getReaction(data, message, user);\n    if (!reaction) return false;\n    reaction._remove(user);\n    /**\n     * Emitted whenever a reaction is removed from a cached message.\n     * @event Client#messageReactionRemove\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user whose emoji or reaction emoji was removed\n     */\n    this.client.emit(Events.MESSAGE_REACTION_REMOVE, reaction, user);\n\n    return { message, reaction, user };\n  }\n}\n\nmodule.exports = MessageReactionRemove;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/MessageReactionRemove.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js":
/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass MessageReactionRemoveAll extends Action {\n  handle(data) {\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel || channel.type === 'voice') return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    message.reactions.cache.clear();\n    this.client.emit(Events.MESSAGE_REACTION_REMOVE_ALL, message);\n\n    return { message };\n  }\n}\n\n/**\n * Emitted whenever all reactions are removed from a cached message.\n * @event Client#messageReactionRemoveAll\n * @param {Message} message The message the reactions were removed from\n */\n\nmodule.exports = MessageReactionRemoveAll;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/MessageReactionRemoveEmoji.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionRemoveEmoji.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass MessageReactionRemoveEmoji extends Action {\n  handle(data) {\n    const channel = this.getChannel(data);\n    if (!channel || channel.type === 'voice') return false;\n\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    const reaction = this.getReaction(data, message);\n    if (!reaction) return false;\n    if (!message.partial) message.reactions.cache.delete(reaction.emoji.id || reaction.emoji.name);\n\n    /**\n     * Emitted when a bot removes an emoji reaction from a cached message.\n     * @event Client#messageReactionRemoveEmoji\n     * @param {MessageReaction} reaction The reaction that was removed\n     */\n    this.client.emit(Events.MESSAGE_REACTION_REMOVE_EMOJI, reaction);\n    return { reaction };\n  }\n}\n\nmodule.exports = MessageReactionRemoveEmoji;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/MessageReactionRemoveEmoji.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/MessageUpdate.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageUpdate.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\n\nclass MessageUpdateAction extends Action {\n  handle(data) {\n    const channel = this.getChannel(data);\n    if (channel) {\n      const { id, channel_id, guild_id, author, timestamp, type } = data;\n      const message = this.getMessage({ id, channel_id, guild_id, author, timestamp, type }, channel);\n      if (message) {\n        message.patch(data);\n        return {\n          old: message._edits[0],\n          updated: message,\n        };\n      }\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = MessageUpdateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/MessageUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/PresenceUpdate.js":
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/PresenceUpdate.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass PresenceUpdateAction extends Action {\n  handle(data) {\n    let user = this.client.users.cache.get(data.user.id);\n    if (!user && data.user.username) user = this.client.users.add(data.user);\n    if (!user) return;\n\n    if (data.user && data.user.username) {\n      if (!user.equals(data.user)) this.client.actions.UserUpdate.handle(data.user);\n    }\n\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild) return;\n\n    let oldPresence = guild.presences.cache.get(user.id);\n    if (oldPresence) oldPresence = oldPresence._clone();\n    let member = guild.members.cache.get(user.id);\n    if (!member && data.status !== 'offline') {\n      member = guild.members.add({\n        user,\n        roles: data.roles,\n        deaf: false,\n        mute: false,\n      });\n      this.client.emit(Events.GUILD_MEMBER_AVAILABLE, member);\n    }\n    guild.presences.add(Object.assign(data, { guild }));\n    if (member && this.client.listenerCount(Events.PRESENCE_UPDATE)) {\n      /**\n       * Emitted whenever a guild member's presence (e.g. status, activity) is changed.\n       * @event Client#presenceUpdate\n       * @param {?Presence} oldPresence The presence before the update, if one at all\n       * @param {Presence} newPresence The presence after the update\n       */\n      this.client.emit(Events.PRESENCE_UPDATE, oldPresence, member.presence);\n    }\n  }\n}\n\nmodule.exports = PresenceUpdateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/PresenceUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/UserUpdate.js":
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/UserUpdate.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass UserUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const newUser = client.users.cache.get(data.id);\n    const oldUser = newUser._update(data);\n\n    if (!oldUser.equals(newUser)) {\n      /**\n       * Emitted whenever a user's details (e.g. username) are changed.\n       * @event Client#userUpdate\n       * @param {User} oldUser The user before the update\n       * @param {User} newUser The user after the update\n       */\n      client.emit(Events.USER_UPDATE, oldUser, newUser);\n      return {\n        old: oldUser,\n        updated: newUser,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\nmodule.exports = UserUpdateAction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/UserUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/VoiceStateUpdate.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/VoiceStateUpdate.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst VoiceState = __webpack_require__(/*! ../../structures/VoiceState */ \"./node_modules/discord.js/src/structures/VoiceState.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      // Update the state\n      const oldState = guild.voiceStates.cache.has(data.user_id)\n        ? guild.voiceStates.cache.get(data.user_id)._clone()\n        : new VoiceState(guild, { user_id: data.user_id });\n\n      const newState = guild.voiceStates.add(data);\n\n      // Get the member\n      let member = guild.members.cache.get(data.user_id);\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member && data.member.user && data.member.joined_at) {\n        member = guild.members.add(data.member);\n      }\n\n      // Emit event\n      if (member && member.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n      client.emit(Events.VOICE_STATE_UPDATE, oldState, newState);\n    }\n  }\n}\n\nmodule.exports = VoiceStateUpdate;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/VoiceStateUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/actions/WebhooksUpdate.js":
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/WebhooksUpdate.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Action = __webpack_require__(/*! ./Action */ \"./node_modules/discord.js/src/client/actions/Action.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass WebhooksUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n    /**\n     * Emitted whenever a guild text channel has its webhooks changed.\n     * @event Client#webhookUpdate\n     * @param {TextChannel} channel The channel that had a webhook update\n     */\n    if (channel) client.emit(Events.WEBHOOKS_UPDATE, channel);\n  }\n}\n\nmodule.exports = WebhooksUpdate;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/actions/WebhooksUpdate.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/ClientVoiceManager.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/ClientVoiceManager.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst VoiceBroadcast = __webpack_require__(/*! ./VoiceBroadcast */ \"./node_modules/discord.js/src/client/voice/VoiceBroadcast.js\");\nconst VoiceConnection = __webpack_require__(/*! ./VoiceConnection */ \"./node_modules/discord.js/src/client/voice/VoiceConnection.js\");\nconst { Error } = __webpack_require__(/*! ../../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\n\n/**\n * Manages voice connections for the client\n */\nclass ClientVoiceManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this voice manager\n     * @type {Client}\n     * @readonly\n     * @name ClientVoiceManager#client\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * A collection mapping connection IDs to the Connection objects\n     * @type {Collection<Snowflake, VoiceConnection>}\n     */\n    this.connections = new Collection();\n\n    /**\n     * Active voice broadcasts that have been created\n     * @type {VoiceBroadcast[]}\n     */\n    this.broadcasts = [];\n  }\n\n  /**\n   * Creates a voice broadcast.\n   * @returns {VoiceBroadcast}\n   */\n  createBroadcast() {\n    const broadcast = new VoiceBroadcast(this.client);\n    this.broadcasts.push(broadcast);\n    return broadcast;\n  }\n\n  onVoiceServer({ guild_id, token, endpoint }) {\n    this.client.emit('debug', `[VOICE] voiceServer guild: ${guild_id} token: ${token} endpoint: ${endpoint}`);\n    const connection = this.connections.get(guild_id);\n    if (connection) connection.setTokenAndEndpoint(token, endpoint);\n  }\n\n  onVoiceStateUpdate({ guild_id, session_id, channel_id }) {\n    const connection = this.connections.get(guild_id);\n    this.client.emit('debug', `[VOICE] connection? ${!!connection}, ${guild_id} ${session_id} ${channel_id}`);\n    if (!connection) return;\n    if (!channel_id) {\n      connection._disconnect();\n      this.connections.delete(guild_id);\n      return;\n    }\n    connection.channel = this.client.channels.cache.get(channel_id);\n    connection.setSessionID(session_id);\n  }\n\n  /**\n   * Sets up a request to join a voice channel.\n   * @param {VoiceChannel} channel The voice channel to join\n   * @returns {Promise<VoiceConnection>}\n   * @private\n   */\n  joinChannel(channel) {\n    return new Promise((resolve, reject) => {\n      if (!channel.joinable) {\n        throw new Error('VOICE_JOIN_CHANNEL', channel.full);\n      }\n\n      let connection = this.connections.get(channel.guild.id);\n\n      if (connection) {\n        if (connection.channel.id !== channel.id) {\n          this.connections.get(channel.guild.id).updateChannel(channel);\n        }\n        resolve(connection);\n        return;\n      } else {\n        connection = new VoiceConnection(this, channel);\n        connection.on('debug', msg =>\n          this.client.emit('debug', `[VOICE (${channel.guild.id}:${connection.status})]: ${msg}`),\n        );\n        connection.authenticate();\n        this.connections.set(channel.guild.id, connection);\n      }\n\n      connection.once('failed', reason => {\n        this.connections.delete(channel.guild.id);\n        reject(reason);\n      });\n\n      connection.on('error', reject);\n\n      connection.once('authenticated', () => {\n        connection.once('ready', () => {\n          resolve(connection);\n          connection.removeListener('error', reject);\n        });\n        connection.once('disconnect', () => this.connections.delete(channel.guild.id));\n      });\n    });\n  }\n}\n\nmodule.exports = ClientVoiceManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/ClientVoiceManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/VoiceBroadcast.js":
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/VoiceBroadcast.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst BroadcastAudioPlayer = __webpack_require__(/*! ./player/BroadcastAudioPlayer */ \"./node_modules/discord.js/src/client/voice/player/BroadcastAudioPlayer.js\");\nconst PlayInterface = __webpack_require__(/*! ./util/PlayInterface */ \"./node_modules/discord.js/src/client/voice/util/PlayInterface.js\");\nconst { Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * A voice broadcast can be played across multiple voice connections for improved shared-stream efficiency.\n *\n * Example usage:\n * ```js\n * const broadcast = client.voice.createBroadcast();\n * broadcast.play('./music.mp3');\n * // Play \"music.mp3\" in all voice connections that the client is in\n * for (const connection of client.voice.connections.values()) {\n *   connection.play(broadcast);\n * }\n * ```\n * @implements {PlayInterface}\n * @extends {EventEmitter}\n */\nclass VoiceBroadcast extends EventEmitter {\n  constructor(client) {\n    super();\n    /**\n     * The client that created the broadcast\n     * @type {Client}\n     */\n    this.client = client;\n    /**\n     * The subscribed StreamDispatchers of this broadcast\n     * @type {StreamDispatcher[]}\n     */\n    this.subscribers = [];\n    this.player = new BroadcastAudioPlayer(this);\n  }\n\n  /**\n   * The current master dispatcher, if any. This dispatcher controls all that is played by subscribed dispatchers.\n   * @type {?BroadcastDispatcher}\n   * @readonly\n   */\n  get dispatcher() {\n    return this.player.dispatcher;\n  }\n\n  /**\n   * Play an audio resource.\n   * @param {ReadableStream|string} resource The resource to play.\n   * @param {StreamOptions} [options] The options to play.\n   * @example\n   * // Play a local audio file\n   * broadcast.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });\n   * @example\n   * // Play a ReadableStream\n   * broadcast.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { filter: 'audioonly' }));\n   * @example\n   * // Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\n   * broadcast.play('http://www.sample-videos.com/audio/mp3/wave.mp3');\n   * @returns {BroadcastDispatcher}\n   */\n  play() {\n    return null;\n  }\n\n  /**\n   * Ends the broadcast, unsubscribing all subscribed channels and deleting the broadcast\n   */\n  end() {\n    for (const dispatcher of this.subscribers) this.delete(dispatcher);\n    const index = this.client.voice.broadcasts.indexOf(this);\n    if (index !== -1) this.client.voice.broadcasts.splice(index, 1);\n  }\n\n  add(dispatcher) {\n    const index = this.subscribers.indexOf(dispatcher);\n    if (index === -1) {\n      this.subscribers.push(dispatcher);\n      /**\n       * Emitted whenever a stream dispatcher subscribes to the broadcast.\n       * @event VoiceBroadcast#subscribe\n       * @param {StreamDispatcher} subscriber The subscribed dispatcher\n       */\n      this.emit(Events.VOICE_BROADCAST_SUBSCRIBE, dispatcher);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  delete(dispatcher) {\n    const index = this.subscribers.indexOf(dispatcher);\n    if (index !== -1) {\n      this.subscribers.splice(index, 1);\n      dispatcher.destroy();\n      /**\n       * Emitted whenever a stream dispatcher unsubscribes to the broadcast.\n       * @event VoiceBroadcast#unsubscribe\n       * @param {StreamDispatcher} dispatcher The unsubscribed dispatcher\n       */\n      this.emit(Events.VOICE_BROADCAST_UNSUBSCRIBE, dispatcher);\n      return true;\n    }\n    return false;\n  }\n}\n\nPlayInterface.applyToClass(VoiceBroadcast);\n\nmodule.exports = VoiceBroadcast;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/VoiceBroadcast.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/VoiceConnection.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/VoiceConnection.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst VoiceUDP = __webpack_require__(/*! ./networking/VoiceUDPClient */ \"./node_modules/discord.js/src/client/voice/networking/VoiceUDPClient.js\");\nconst VoiceWebSocket = __webpack_require__(/*! ./networking/VoiceWebSocket */ \"./node_modules/discord.js/src/client/voice/networking/VoiceWebSocket.js\");\nconst AudioPlayer = __webpack_require__(/*! ./player/AudioPlayer */ \"./node_modules/discord.js/src/client/voice/player/AudioPlayer.js\");\nconst VoiceReceiver = __webpack_require__(/*! ./receiver/Receiver */ \"./node_modules/discord.js/src/client/voice/receiver/Receiver.js\");\nconst PlayInterface = __webpack_require__(/*! ./util/PlayInterface */ \"./node_modules/discord.js/src/client/voice/util/PlayInterface.js\");\nconst Silence = __webpack_require__(/*! ./util/Silence */ \"./node_modules/discord.js/src/client/voice/util/Silence.js\");\nconst { Error } = __webpack_require__(/*! ../../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst { OPCodes, VoiceOPCodes, VoiceStatus, Events } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Speaking = __webpack_require__(/*! ../../util/Speaking */ \"./node_modules/discord.js/src/util/Speaking.js\");\nconst Util = __webpack_require__(/*! ../../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n// Workaround for Discord now requiring silence to be sent before being able to receive audio\nclass SingleSilence extends Silence {\n  _read() {\n    super._read();\n    this.push(null);\n  }\n}\n\nconst SUPPORTED_MODES = ['xsalsa20_poly1305_lite', 'xsalsa20_poly1305_suffix', 'xsalsa20_poly1305'];\n\n/**\n * Represents a connection to a guild's voice server.\n * ```js\n * // Obtained using:\n * voiceChannel.join()\n *   .then(connection => {\n *\n *   });\n * ```\n * @extends {EventEmitter}\n * @implements {PlayInterface}\n */\nclass VoiceConnection extends EventEmitter {\n  constructor(voiceManager, channel) {\n    super();\n\n    /**\n     * The voice manager that instantiated this connection\n     * @type {ClientVoiceManager}\n     */\n    this.voiceManager = voiceManager;\n\n    /**\n     * The voice channel this connection is currently serving\n     * @type {VoiceChannel}\n     */\n    this.channel = channel;\n\n    /**\n     * The current status of the voice connection\n     * @type {VoiceStatus}\n     */\n    this.status = VoiceStatus.AUTHENTICATING;\n\n    /**\n     * Our current speaking state\n     * @type {Readonly<Speaking>}\n     */\n    this.speaking = new Speaking().freeze();\n\n    /**\n     * The authentication data needed to connect to the voice server\n     * @type {Object}\n     * @private\n     */\n    this.authentication = {};\n\n    /**\n     * The audio player for this voice connection\n     * @type {AudioPlayer}\n     */\n    this.player = new AudioPlayer(this);\n\n    this.player.on('debug', m => {\n      /**\n       * Debug info from the connection.\n       * @event VoiceConnection#debug\n       * @param {string} message The debug message\n       */\n      this.emit('debug', `audio player - ${m}`);\n    });\n\n    this.player.on('error', e => {\n      /**\n       * Warning info from the connection.\n       * @event VoiceConnection#warn\n       * @param {string|Error} warning The warning\n       */\n      this.emit('warn', e);\n    });\n\n    this.once('closing', () => this.player.destroy());\n\n    /**\n     * Map SSRC values to user IDs\n     * @type {Map<number, Snowflake>}\n     * @private\n     */\n    this.ssrcMap = new Map();\n\n    /**\n     * Tracks which users are talking\n     * @type {Map<Snowflake, Readonly<Speaking>>}\n     * @private\n     */\n    this._speaking = new Map();\n\n    /**\n     * Object that wraps contains the `ws` and `udp` sockets of this voice connection\n     * @type {Object}\n     * @private\n     */\n    this.sockets = {};\n\n    /**\n     * The voice receiver of this connection\n     * @type {VoiceReceiver}\n     */\n    this.receiver = new VoiceReceiver(this);\n  }\n\n  /**\n   * The client that instantiated this connection\n   * @type {Client}\n   * @readonly\n   */\n  get client() {\n    return this.voiceManager.client;\n  }\n\n  /**\n   * The current stream dispatcher (if any)\n   * @type {?StreamDispatcher}\n   * @readonly\n   */\n  get dispatcher() {\n    return this.player.dispatcher;\n  }\n\n  /**\n   * Sets whether the voice connection should display as \"speaking\", \"soundshare\" or \"none\".\n   * @param {BitFieldResolvable} value The new speaking state\n   * @private\n   */\n  setSpeaking(value) {\n    if (this.speaking.equals(value)) return;\n    if (this.status !== VoiceStatus.CONNECTED) return;\n    this.speaking = new Speaking(value).freeze();\n    this.sockets.ws\n      .sendPacket({\n        op: VoiceOPCodes.SPEAKING,\n        d: {\n          speaking: this.speaking.bitfield,\n          delay: 0,\n          ssrc: this.authentication.ssrc,\n        },\n      })\n      .catch(e => {\n        this.emit('debug', e);\n      });\n  }\n\n  /**\n   * The voice state of this connection\n   * @type {VoiceState}\n   */\n  get voice() {\n    return this.channel.guild.voice;\n  }\n\n  /**\n   * Sends a request to the main gateway to join a voice channel.\n   * @param {Object} [options] The options to provide\n   * @returns {Promise<Shard>}\n   * @private\n   */\n  sendVoiceStateUpdate(options = {}) {\n    options = Util.mergeDefault(\n      {\n        guild_id: this.channel.guild.id,\n        channel_id: this.channel.id,\n        self_mute: this.voice ? this.voice.selfMute : false,\n        self_deaf: this.voice ? this.voice.selfDeaf : false,\n      },\n      options,\n    );\n\n    this.emit('debug', `Sending voice state update: ${JSON.stringify(options)}`);\n\n    return this.channel.guild.shard.send(\n      {\n        op: OPCodes.VOICE_STATE_UPDATE,\n        d: options,\n      },\n      true,\n    );\n  }\n\n  /**\n   * Set the token and endpoint required to connect to the voice servers.\n   * @param {string} token The voice token\n   * @param {string} endpoint The voice endpoint\n   * @private\n   * @returns {void}\n   */\n  setTokenAndEndpoint(token, endpoint) {\n    this.emit('debug', `Token \"${token}\" and endpoint \"${endpoint}\"`);\n    if (!endpoint) {\n      // Signifies awaiting endpoint stage\n      return;\n    }\n\n    if (!token) {\n      this.authenticateFailed('VOICE_TOKEN_ABSENT');\n      return;\n    }\n\n    endpoint = endpoint.match(/([^:]*)/)[0];\n    this.emit('debug', `Endpoint resolved as ${endpoint}`);\n\n    if (!endpoint) {\n      this.authenticateFailed('VOICE_INVALID_ENDPOINT');\n      return;\n    }\n\n    if (this.status === VoiceStatus.AUTHENTICATING) {\n      this.authentication.token = token;\n      this.authentication.endpoint = endpoint;\n      this.checkAuthenticated();\n    } else if (token !== this.authentication.token || endpoint !== this.authentication.endpoint) {\n      this.reconnect(token, endpoint);\n    }\n  }\n\n  /**\n   * Sets the Session ID for the connection.\n   * @param {string} sessionID The voice session ID\n   * @private\n   */\n  setSessionID(sessionID) {\n    this.emit('debug', `Setting sessionID ${sessionID} (stored as \"${this.authentication.sessionID}\")`);\n    if (!sessionID) {\n      this.authenticateFailed('VOICE_SESSION_ABSENT');\n      return;\n    }\n\n    if (this.status === VoiceStatus.AUTHENTICATING) {\n      this.authentication.sessionID = sessionID;\n      this.checkAuthenticated();\n    } else if (sessionID !== this.authentication.sessionID) {\n      this.authentication.sessionID = sessionID;\n      /**\n       * Emitted when a new session ID is received.\n       * @event VoiceConnection#newSession\n       * @private\n       */\n      this.emit('newSession', sessionID);\n    }\n  }\n\n  /**\n   * Checks whether the voice connection is authenticated.\n   * @private\n   */\n  checkAuthenticated() {\n    const { token, endpoint, sessionID } = this.authentication;\n    this.emit('debug', `Authenticated with sessionID ${sessionID}`);\n    if (token && endpoint && sessionID) {\n      this.status = VoiceStatus.CONNECTING;\n      /**\n       * Emitted when we successfully initiate a voice connection.\n       * @event VoiceConnection#authenticated\n       */\n      this.emit('authenticated');\n      this.connect();\n    }\n  }\n\n  /**\n   * Invoked when we fail to initiate a voice connection.\n   * @param {string} reason The reason for failure\n   * @private\n   */\n  authenticateFailed(reason) {\n    this.client.clearTimeout(this.connectTimeout);\n    this.emit('debug', `Authenticate failed - ${reason}`);\n    if (this.status === VoiceStatus.AUTHENTICATING) {\n      /**\n       * Emitted when we fail to initiate a voice connection.\n       * @event VoiceConnection#failed\n       * @param {Error} error The encountered error\n       */\n      this.emit('failed', new Error(reason));\n    } else {\n      /**\n       * Emitted whenever the connection encounters an error.\n       * @event VoiceConnection#error\n       * @param {Error} error The encountered error\n       */\n      this.emit('error', new Error(reason));\n    }\n    this.status = VoiceStatus.DISCONNECTED;\n  }\n\n  /**\n   * Move to a different voice channel in the same guild.\n   * @param {VoiceChannel} channel The channel to move to\n   * @private\n   */\n  updateChannel(channel) {\n    this.channel = channel;\n    this.sendVoiceStateUpdate();\n  }\n\n  /**\n   * Attempts to authenticate to the voice server.\n   * @private\n   */\n  authenticate() {\n    this.sendVoiceStateUpdate();\n    this.connectTimeout = this.client.setTimeout(() => this.authenticateFailed('VOICE_CONNECTION_TIMEOUT'), 15000);\n  }\n\n  /**\n   * Attempts to reconnect to the voice server (typically after a region change).\n   * @param {string} token The voice token\n   * @param {string} endpoint The voice endpoint\n   * @private\n   */\n  reconnect(token, endpoint) {\n    this.authentication.token = token;\n    this.authentication.endpoint = endpoint;\n    this.speaking = new Speaking().freeze();\n    this.status = VoiceStatus.RECONNECTING;\n    this.emit('debug', `Reconnecting to ${endpoint}`);\n    /**\n     * Emitted when the voice connection is reconnecting (typically after a region change).\n     * @event VoiceConnection#reconnecting\n     */\n    this.emit('reconnecting');\n    this.connect();\n  }\n\n  /**\n   * Disconnects the voice connection, causing a disconnect and closing event to be emitted.\n   */\n  disconnect() {\n    this.emit('closing');\n    this.emit('debug', 'disconnect() triggered');\n    this.client.clearTimeout(this.connectTimeout);\n    const conn = this.voiceManager.connections.get(this.channel.guild.id);\n    if (conn === this) this.voiceManager.connections.delete(this.channel.guild.id);\n    this.sendVoiceStateUpdate({\n      channel_id: null,\n    });\n    this._disconnect();\n  }\n\n  /**\n   * Internally disconnects (doesn't send disconnect packet).\n   * @private\n   */\n  _disconnect() {\n    this.cleanup();\n    this.status = VoiceStatus.DISCONNECTED;\n    /**\n     * Emitted when the voice connection disconnects.\n     * @event VoiceConnection#disconnect\n     */\n    this.emit('disconnect');\n  }\n\n  /**\n   * Cleans up after disconnect.\n   * @private\n   */\n  cleanup() {\n    this.player.destroy();\n    this.speaking = new Speaking().freeze();\n    const { ws, udp } = this.sockets;\n\n    this.emit('debug', 'Connection clean up');\n\n    if (ws) {\n      ws.removeAllListeners('error');\n      ws.removeAllListeners('ready');\n      ws.removeAllListeners('sessionDescription');\n      ws.removeAllListeners('speaking');\n      ws.shutdown();\n    }\n\n    if (udp) udp.removeAllListeners('error');\n\n    this.sockets.ws = null;\n    this.sockets.udp = null;\n  }\n\n  /**\n   * Connect the voice connection.\n   * @private\n   */\n  connect() {\n    this.emit('debug', `Connect triggered`);\n    if (this.status !== VoiceStatus.RECONNECTING) {\n      if (this.sockets.ws) throw new Error('WS_CONNECTION_EXISTS');\n      if (this.sockets.udp) throw new Error('UDP_CONNECTION_EXISTS');\n    }\n\n    if (this.sockets.ws) this.sockets.ws.shutdown();\n    if (this.sockets.udp) this.sockets.udp.shutdown();\n\n    this.sockets.ws = new VoiceWebSocket(this);\n    this.sockets.udp = new VoiceUDP(this);\n\n    const { ws, udp } = this.sockets;\n\n    ws.on('debug', msg => this.emit('debug', msg));\n    udp.on('debug', msg => this.emit('debug', msg));\n    ws.on('error', err => this.emit('error', err));\n    udp.on('error', err => this.emit('error', err));\n    ws.on('ready', this.onReady.bind(this));\n    ws.on('sessionDescription', this.onSessionDescription.bind(this));\n    ws.on('startSpeaking', this.onStartSpeaking.bind(this));\n\n    this.sockets.ws.connect();\n  }\n\n  /**\n   * Invoked when the voice websocket is ready.\n   * @param {Object} data The received data\n   * @private\n   */\n  onReady(data) {\n    Object.assign(this.authentication, data);\n    for (let mode of data.modes) {\n      if (SUPPORTED_MODES.includes(mode)) {\n        this.authentication.mode = mode;\n        this.emit('debug', `Selecting the ${mode} mode`);\n        break;\n      }\n    }\n    this.sockets.udp.createUDPSocket(data.ip);\n  }\n\n  /**\n   * Invoked when a session description is received.\n   * @param {Object} data The received data\n   * @private\n   */\n  onSessionDescription(data) {\n    Object.assign(this.authentication, data);\n    this.status = VoiceStatus.CONNECTED;\n    const ready = () => {\n      this.client.clearTimeout(this.connectTimeout);\n      this.emit('debug', `Ready with authentication details: ${JSON.stringify(this.authentication)}`);\n      /**\n       * Emitted once the connection is ready, when a promise to join a voice channel resolves,\n       * the connection will already be ready.\n       * @event VoiceConnection#ready\n       */\n      this.emit('ready');\n    };\n    if (this.dispatcher) {\n      ready();\n    } else {\n      // This serves to provide support for voice receive, sending audio is required to receive it.\n      const dispatcher = this.play(new SingleSilence(), { type: 'opus', volume: false });\n      dispatcher.once('finish', ready);\n    }\n  }\n\n  onStartSpeaking({ user_id, ssrc, speaking }) {\n    this.ssrcMap.set(+ssrc, { userID: user_id, speaking: speaking });\n  }\n\n  /**\n   * Invoked when a speaking event is received.\n   * @param {Object} data The received data\n   * @private\n   */\n  onSpeaking({ user_id, speaking }) {\n    speaking = new Speaking(speaking).freeze();\n    const guild = this.channel.guild;\n    const user = this.client.users.cache.get(user_id);\n    const old = this._speaking.get(user_id);\n    this._speaking.set(user_id, speaking);\n    /**\n     * Emitted whenever a user changes speaking state.\n     * @event VoiceConnection#speaking\n     * @param {User} user The user that has changed speaking state\n     * @param {Readonly<Speaking>} speaking The speaking state of the user\n     */\n    if (this.status === VoiceStatus.CONNECTED) {\n      this.emit('speaking', user, speaking);\n      if (!speaking.has(Speaking.FLAGS.SPEAKING)) {\n        this.receiver.packets._stoppedSpeaking(user_id);\n      }\n    }\n\n    if (guild && user && !speaking.equals(old)) {\n      const member = guild.member(user);\n      if (member) {\n        /**\n         * Emitted once a guild member changes speaking state.\n         * @event Client#guildMemberSpeaking\n         * @param {GuildMember} member The member that started/stopped speaking\n         * @param {Readonly<Speaking>} speaking The speaking state of the member\n         */\n        this.client.emit(Events.GUILD_MEMBER_SPEAKING, member, speaking);\n      }\n    }\n  }\n\n  play() {} // eslint-disable-line no-empty-function\n}\n\nPlayInterface.applyToClass(VoiceConnection);\n\nmodule.exports = VoiceConnection;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/VoiceConnection.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/dispatcher/BroadcastDispatcher.js":
/*!************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/dispatcher/BroadcastDispatcher.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst StreamDispatcher = __webpack_require__(/*! ./StreamDispatcher */ \"./node_modules/discord.js/src/client/voice/dispatcher/StreamDispatcher.js\");\n\n/**\n * The class that sends voice packet data to the voice connection.\n * @implements {VolumeInterface}\n * @extends {StreamDispatcher}\n */\nclass BroadcastDispatcher extends StreamDispatcher {\n  constructor(player, options, streams) {\n    super(player, options, streams);\n    this.broadcast = player.broadcast;\n  }\n\n  _write(chunk, enc, done) {\n    if (!this.startTime) this.startTime = Date.now();\n    for (const dispatcher of this.broadcast.subscribers) {\n      dispatcher._write(chunk, enc);\n    }\n    this._step(done);\n  }\n\n  _destroy(err, cb) {\n    if (this.player.dispatcher === this) this.player.dispatcher = null;\n    const { streams } = this;\n    if (streams.opus) streams.opus.unpipe(this);\n    if (streams.ffmpeg) streams.ffmpeg.destroy();\n    super._destroy(err, cb);\n  }\n\n  /**\n   * Set the bitrate of the current Opus encoder if using a compatible Opus stream.\n   * @param {number} value New bitrate, in kbps\n   * If set to 'auto', 48kbps will be used\n   * @returns {boolean} true if the bitrate has been successfully changed.\n   */\n  setBitrate(value) {\n    if (!value || !this.streams.opus || !this.streams.opus.setBitrate) return false;\n    const bitrate = value === 'auto' ? 48 : value;\n    this.streams.opus.setBitrate(bitrate * 1000);\n    return true;\n  }\n}\n\nmodule.exports = BroadcastDispatcher;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/dispatcher/BroadcastDispatcher.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/dispatcher/StreamDispatcher.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/dispatcher/StreamDispatcher.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst secretbox = __webpack_require__(/*! ../util/Secretbox */ \"./node_modules/discord.js/src/client/voice/util/Secretbox.js\");\nconst Silence = __webpack_require__(/*! ../util/Silence */ \"./node_modules/discord.js/src/client/voice/util/Silence.js\");\nconst VolumeInterface = __webpack_require__(/*! ../util/VolumeInterface */ \"./node_modules/discord.js/src/client/voice/util/VolumeInterface.js\");\n\nconst FRAME_LENGTH = 20;\nconst CHANNELS = 2;\nconst TIMESTAMP_INC = (48000 / 100) * CHANNELS;\n\nconst MAX_NONCE_SIZE = 2 ** 32 - 1;\nconst nonce = Buffer.alloc(24);\n\n/**\n * @external WritableStream\n * @see {@link https://nodejs.org/api/stream.html#stream_class_stream_writable}\n */\n\n/**\n * The class that sends voice packet data to the voice connection.\n * ```js\n * // Obtained using:\n * voiceChannel.join().then(connection => {\n *   // You can play a file or a stream here:\n *   const dispatcher = connection.play('/home/hydrabolt/audio.mp3');\n * });\n * ```\n * @implements {VolumeInterface}\n * @extends {WritableStream}\n */\nclass StreamDispatcher extends Writable {\n  constructor(player, { seek = 0, volume = 1, fec, plp, bitrate = 96, highWaterMark = 12 } = {}, streams) {\n    const streamOptions = { seek, volume, fec, plp, bitrate, highWaterMark };\n    super(streamOptions);\n    /**\n     * The Audio Player that controls this dispatcher\n     * @type {AudioPlayer}\n     */\n    this.player = player;\n    this.streamOptions = streamOptions;\n    this.streams = streams;\n    this.streams.silence = new Silence();\n\n    this._nonce = 0;\n    this._nonceBuffer = Buffer.alloc(24);\n\n    /**\n     * The time that the stream was paused at (null if not paused)\n     * @type {?number}\n     */\n    this.pausedSince = null;\n    this._writeCallback = null;\n\n    /**\n     * The broadcast controlling this dispatcher, if any\n     * @type {?VoiceBroadcast}\n     */\n    this.broadcast = this.streams.broadcast;\n\n    this._pausedTime = 0;\n    this._silentPausedTime = 0;\n    this.count = 0;\n\n    this.on('finish', () => {\n      this._cleanup();\n      this._setSpeaking(0);\n    });\n\n    this.setVolume(volume);\n    this.setBitrate(bitrate);\n    if (typeof fec !== 'undefined') this.setFEC(fec);\n    if (typeof plp !== 'undefined') this.setPLP(plp);\n\n    const streamError = (type, err) => {\n      /**\n       * Emitted when the dispatcher encounters an error.\n       * @event StreamDispatcher#error\n       */\n      if (type && err) {\n        err.message = `${type} stream: ${err.message}`;\n        this.emit(this.player.dispatcher === this ? 'error' : 'debug', err);\n      }\n      this.destroy();\n    };\n\n    this.on('error', () => streamError());\n    if (this.streams.input) this.streams.input.on('error', err => streamError('input', err));\n    if (this.streams.ffmpeg) this.streams.ffmpeg.on('error', err => streamError('ffmpeg', err));\n    if (this.streams.opus) this.streams.opus.on('error', err => streamError('opus', err));\n    if (this.streams.volume) this.streams.volume.on('error', err => streamError('volume', err));\n  }\n\n  get _sdata() {\n    return this.player.streamingData;\n  }\n\n  _write(chunk, enc, done) {\n    if (!this.startTime) {\n      /**\n       * Emitted once the stream has started to play.\n       * @event StreamDispatcher#start\n       */\n      this.emit('start');\n      this.startTime = Date.now();\n    }\n    this._playChunk(chunk);\n    this._step(done);\n  }\n\n  _destroy(err, cb) {\n    this._cleanup();\n    super._destroy(err, cb);\n  }\n\n  _cleanup() {\n    if (this.player.dispatcher === this) this.player.dispatcher = null;\n    const { streams } = this;\n    if (streams.broadcast) streams.broadcast.delete(this);\n    if (streams.opus) streams.opus.destroy();\n    if (streams.ffmpeg) streams.ffmpeg.destroy();\n  }\n\n  /**\n   * Pauses playback\n   * @param {boolean} [silence=false] Whether to play silence while paused to prevent audio glitches\n   */\n  pause(silence = false) {\n    if (this.paused) return;\n    if (this.streams.opus) this.streams.opus.unpipe(this);\n    if (silence) {\n      this.streams.silence.pipe(this);\n      this._silence = true;\n    } else {\n      this._setSpeaking(0);\n    }\n    this.pausedSince = Date.now();\n  }\n\n  /**\n   * Whether or not playback is paused\n   * @type {boolean}\n   * @readonly\n   */\n  get paused() {\n    return Boolean(this.pausedSince);\n  }\n\n  /**\n   * Total time that this dispatcher has been paused in milliseconds\n   * @type {number}\n   * @readonly\n   */\n  get pausedTime() {\n    return this._silentPausedTime + this._pausedTime + (this.paused ? Date.now() - this.pausedSince : 0);\n  }\n\n  /**\n   * Resumes playback\n   */\n  resume() {\n    if (!this.pausedSince) return;\n    this.streams.silence.unpipe(this);\n    if (this.streams.opus) this.streams.opus.pipe(this);\n    if (this._silence) {\n      this._silentPausedTime += Date.now() - this.pausedSince;\n      this._silence = false;\n    } else {\n      this._pausedTime += Date.now() - this.pausedSince;\n    }\n    this.pausedSince = null;\n    if (typeof this._writeCallback === 'function') this._writeCallback();\n  }\n\n  /**\n   * The time (in milliseconds) that the dispatcher has actually been playing audio for\n   * @type {number}\n   * @readonly\n   */\n  get streamTime() {\n    return this.count * FRAME_LENGTH;\n  }\n\n  /**\n   * The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses\n   * @type {number}\n   * @readonly\n   */\n  get totalStreamTime() {\n    return Date.now() - this.startTime;\n  }\n\n  /**\n   * Set the bitrate of the current Opus encoder if using a compatible Opus stream.\n   * @param {number} value New bitrate, in kbps\n   * If set to 'auto', the voice channel's bitrate will be used\n   * @returns {boolean} true if the bitrate has been successfully changed.\n   */\n  setBitrate(value) {\n    if (!value || !this.bitrateEditable) return false;\n    const bitrate = value === 'auto' ? this.player.voiceConnection.channel.bitrate : value;\n    this.streams.opus.setBitrate(bitrate * 1000);\n    return true;\n  }\n\n  /**\n   * Sets the expected packet loss percentage if using a compatible Opus stream.\n   * @param {number} value between 0 and 1\n   * @returns {boolean} Returns true if it was successfully set.\n   */\n  setPLP(value) {\n    if (!this.bitrateEditable) return false;\n    this.streams.opus.setPLP(value);\n    return true;\n  }\n\n  /**\n   * Enables or disables forward error correction if using a compatible Opus stream.\n   * @param {boolean} enabled true to enable\n   * @returns {boolean} Returns true if it was successfully set.\n   */\n  setFEC(enabled) {\n    if (!this.bitrateEditable) return false;\n    this.streams.opus.setFEC(enabled);\n    return true;\n  }\n\n  _step(done) {\n    this._writeCallback = () => {\n      this._writeCallback = null;\n      done();\n    };\n    if (!this.streams.broadcast) {\n      const next = FRAME_LENGTH + this.count * FRAME_LENGTH - (Date.now() - this.startTime - this._pausedTime);\n      setTimeout(() => {\n        if ((!this.pausedSince || this._silence) && this._writeCallback) this._writeCallback();\n      }, next);\n    }\n    this._sdata.sequence++;\n    this._sdata.timestamp += TIMESTAMP_INC;\n    if (this._sdata.sequence >= 2 ** 16) this._sdata.sequence = 0;\n    if (this._sdata.timestamp >= 2 ** 32) this._sdata.timestamp = 0;\n    this.count++;\n  }\n\n  _final(callback) {\n    this._writeCallback = null;\n    callback();\n  }\n\n  _playChunk(chunk) {\n    if (this.player.dispatcher !== this || !this.player.voiceConnection.authentication.secret_key) return;\n    this._sendPacket(this._createPacket(this._sdata.sequence, this._sdata.timestamp, chunk));\n  }\n\n  _encrypt(buffer) {\n    const { secret_key, mode } = this.player.voiceConnection.authentication;\n    if (mode === 'xsalsa20_poly1305_lite') {\n      this._nonce++;\n      if (this._nonce > MAX_NONCE_SIZE) this._nonce = 0;\n      this._nonceBuffer.writeUInt32BE(this._nonce, 0);\n      return [secretbox.methods.close(buffer, this._nonceBuffer, secret_key), this._nonceBuffer.slice(0, 4)];\n    } else if (mode === 'xsalsa20_poly1305_suffix') {\n      const random = secretbox.methods.random(24);\n      return [secretbox.methods.close(buffer, random, secret_key), random];\n    } else {\n      return [secretbox.methods.close(buffer, nonce, secret_key)];\n    }\n  }\n\n  _createPacket(sequence, timestamp, buffer) {\n    const packetBuffer = Buffer.alloc(12);\n    packetBuffer[0] = 0x80;\n    packetBuffer[1] = 0x78;\n\n    packetBuffer.writeUIntBE(sequence, 2, 2);\n    packetBuffer.writeUIntBE(timestamp, 4, 4);\n    packetBuffer.writeUIntBE(this.player.voiceConnection.authentication.ssrc, 8, 4);\n\n    packetBuffer.copy(nonce, 0, 0, 12);\n    return Buffer.concat([packetBuffer, ...this._encrypt(buffer)]);\n  }\n\n  _sendPacket(packet) {\n    /**\n     * Emitted whenever the dispatcher has debug information.\n     * @event StreamDispatcher#debug\n     * @param {string} info The debug info\n     */\n    this._setSpeaking(1);\n    if (!this.player.voiceConnection.sockets.udp) {\n      this.emit('debug', 'Failed to send a packet - no UDP socket');\n      return;\n    }\n    this.player.voiceConnection.sockets.udp.send(packet).catch(e => {\n      this._setSpeaking(0);\n      this.emit('debug', `Failed to send a packet - ${e}`);\n    });\n  }\n\n  _setSpeaking(value) {\n    if (typeof this.player.voiceConnection !== 'undefined') {\n      this.player.voiceConnection.setSpeaking(value);\n    }\n    /**\n     * Emitted when the dispatcher starts/stops speaking.\n     * @event StreamDispatcher#speaking\n     * @param {boolean} value Whether or not the dispatcher is speaking\n     */\n    this.emit('speaking', value);\n  }\n\n  get volumeEditable() {\n    return Boolean(this.streams.volume);\n  }\n\n  /**\n   * Whether or not the Opus bitrate of this stream is editable\n   * @type {boolean}\n   * @readonly\n   */\n  get bitrateEditable() {\n    return this.streams.opus && this.streams.opus.setBitrate;\n  }\n\n  // Volume\n  get volume() {\n    return this.streams.volume ? this.streams.volume.volume : 1;\n  }\n\n  setVolume(value) {\n    if (!this.streams.volume) return false;\n    /**\n     * Emitted when the volume of this dispatcher changes.\n     * @event StreamDispatcher#volumeChange\n     * @param {number} oldVolume The old volume of this dispatcher\n     * @param {number} newVolume The new volume of this dispatcher\n     */\n    this.emit('volumeChange', this.volume, value);\n    this.streams.volume.setVolume(value);\n    return true;\n  }\n\n  // Volume stubs for docs\n  /* eslint-disable no-empty-function*/\n  get volumeDecibels() {}\n  get volumeLogarithmic() {}\n  setVolumeDecibels() {}\n  setVolumeLogarithmic() {}\n}\n\nVolumeInterface.applyToClass(StreamDispatcher);\n\nmodule.exports = StreamDispatcher;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/dispatcher/StreamDispatcher.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/networking/VoiceUDPClient.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/networking/VoiceUDPClient.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst udp = __webpack_require__(/*! dgram */ \"dgram\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst { Error } = __webpack_require__(/*! ../../../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst { VoiceOPCodes } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * Represents a UDP client for a Voice Connection.\n * @extends {EventEmitter}\n * @private\n */\nclass VoiceConnectionUDPClient extends EventEmitter {\n  constructor(voiceConnection) {\n    super();\n\n    /**\n     * The voice connection that this UDP client serves\n     * @type {VoiceConnection}\n     */\n    this.voiceConnection = voiceConnection;\n\n    /**\n     * The UDP socket\n     * @type {?Socket}\n     */\n    this.socket = null;\n\n    /**\n     * The address of the Discord voice server\n     * @type {?string}\n     */\n    this.discordAddress = null;\n\n    /**\n     * The local IP address\n     * @type {?string}\n     */\n    this.localAddress = null;\n\n    /**\n     * The local port\n     * @type {?string}\n     */\n    this.localPort = null;\n\n    this.voiceConnection.on('closing', this.shutdown.bind(this));\n  }\n\n  shutdown() {\n    this.emit('debug', `[UDP] shutdown requested`);\n    if (this.socket) {\n      this.socket.removeAllListeners('message');\n      try {\n        this.socket.close();\n      } finally {\n        this.socket = null;\n      }\n    }\n  }\n\n  /**\n   * The port of the Discord voice server\n   * @type {number}\n   * @readonly\n   */\n  get discordPort() {\n    return this.voiceConnection.authentication.port;\n  }\n\n  /**\n   * Send a packet to the UDP client.\n   * @param {Object} packet The packet to send\n   * @returns {Promise<Object>}\n   */\n  send(packet) {\n    return new Promise((resolve, reject) => {\n      if (!this.socket) throw new Error('UDP_SEND_FAIL');\n      if (!this.discordAddress || !this.discordPort) throw new Error('UDP_ADDRESS_MALFORMED');\n      this.socket.send(packet, 0, packet.length, this.discordPort, this.discordAddress, error => {\n        if (error) {\n          this.emit('debug', `[UDP] >> ERROR: ${error}`);\n          reject(error);\n        } else {\n          resolve(packet);\n        }\n      });\n    });\n  }\n\n  async createUDPSocket(address) {\n    this.discordAddress = address;\n    const socket = (this.socket = udp.createSocket('udp4'));\n    socket.on('error', e => {\n      this.emit('debug', `[UDP] Error: ${e}`);\n      this.emit('error', e);\n    });\n    socket.on('close', () => {\n      this.emit('debug', '[UDP] socket closed');\n    });\n    this.emit('debug', `[UDP] created socket`);\n    socket.once('message', message => {\n      this.emit('debug', `[UDP] message: [${[...message]}] (${message})`);\n      // Stop if the sockets have been deleted because the connection has been closed already\n      if (!this.voiceConnection.sockets.ws) return;\n\n      const packet = parseLocalPacket(message);\n      if (packet.error) {\n        this.emit('debug', `[UDP] ERROR: ${packet.error}`);\n        this.emit('error', packet.error);\n        return;\n      }\n\n      this.localAddress = packet.address;\n      this.localPort = packet.port;\n\n      this.voiceConnection.sockets.ws.sendPacket({\n        op: VoiceOPCodes.SELECT_PROTOCOL,\n        d: {\n          protocol: 'udp',\n          data: {\n            address: packet.address,\n            port: packet.port,\n            mode: this.voiceConnection.authentication.mode,\n          },\n        },\n      });\n\n      this.emit('debug', `[UDP] << ${JSON.stringify(packet)}`);\n\n      socket.on('message', buffer => this.voiceConnection.receiver.packets.push(buffer));\n    });\n\n    const blankMessage = Buffer.alloc(70);\n    blankMessage.writeUIntBE(this.voiceConnection.authentication.ssrc, 0, 4);\n    this.emit('debug', `Sending IP discovery packet: [${[...blankMessage]}]`);\n    await this.send(blankMessage);\n    this.emit('debug', `Successfully sent IP discovery packet`);\n  }\n}\n\nfunction parseLocalPacket(message) {\n  try {\n    const packet = Buffer.from(message);\n    let address = '';\n    for (let i = 4; i < packet.indexOf(0, i); i++) address += String.fromCharCode(packet[i]);\n    const port = parseInt(packet.readUIntLE(packet.length - 2, 2).toString(10), 10);\n    return { address, port };\n  } catch (error) {\n    return { error };\n  }\n}\n\nmodule.exports = VoiceConnectionUDPClient;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/networking/VoiceUDPClient.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/networking/VoiceWebSocket.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/networking/VoiceWebSocket.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst WebSocket = __webpack_require__(/*! ../../../WebSocket */ \"./node_modules/discord.js/src/WebSocket.js\");\nconst { Error } = __webpack_require__(/*! ../../../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst { OPCodes, VoiceOPCodes } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * Represents a Voice Connection's WebSocket.\n * @extends {EventEmitter}\n * @private\n */\nclass VoiceWebSocket extends EventEmitter {\n  constructor(connection) {\n    super();\n    /**\n     * The Voice Connection that this WebSocket serves\n     * @type {VoiceConnection}\n     */\n    this.connection = connection;\n\n    /**\n     * How many connection attempts have been made\n     * @type {number}\n     */\n    this.attempts = 0;\n\n    this.dead = false;\n    this.connection.on('closing', this.shutdown.bind(this));\n  }\n\n  /**\n   * The client of this voice WebSocket\n   * @type {Client}\n   * @readonly\n   */\n  get client() {\n    return this.connection.client;\n  }\n\n  shutdown() {\n    this.emit('debug', `[WS] shutdown requested`);\n    this.dead = true;\n    this.reset();\n  }\n\n  /**\n   * Resets the current WebSocket.\n   */\n  reset() {\n    this.emit('debug', `[WS] reset requested`);\n    if (this.ws) {\n      if (this.ws.readyState !== WebSocket.CLOSED) this.ws.close();\n      this.ws = null;\n    }\n    this.clearHeartbeat();\n  }\n\n  /**\n   * Starts connecting to the Voice WebSocket Server.\n   */\n  connect() {\n    this.emit('debug', `[WS] connect requested`);\n    if (this.dead) return;\n    if (this.ws) this.reset();\n    if (this.attempts >= 5) {\n      this.emit('debug', new Error('VOICE_CONNECTION_ATTEMPTS_EXCEEDED', this.attempts));\n      return;\n    }\n\n    this.attempts++;\n\n    /**\n     * The actual WebSocket used to connect to the Voice WebSocket Server.\n     * @type {WebSocket}\n     */\n    this.ws = WebSocket.create(`wss://${this.connection.authentication.endpoint}/`, { v: 4 });\n    this.emit('debug', `[WS] connecting, ${this.attempts} attempts, ${this.ws.url}`);\n    this.ws.onopen = this.onOpen.bind(this);\n    this.ws.onmessage = this.onMessage.bind(this);\n    this.ws.onclose = this.onClose.bind(this);\n    this.ws.onerror = this.onError.bind(this);\n  }\n\n  /**\n   * Sends data to the WebSocket if it is open.\n   * @param {string} data The data to send to the WebSocket\n   * @returns {Promise<string>}\n   */\n  send(data) {\n    this.emit('debug', `[WS] >> ${data}`);\n    return new Promise((resolve, reject) => {\n      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) throw new Error('WS_NOT_OPEN', data);\n      this.ws.send(data, null, error => {\n        if (error) reject(error);\n        else resolve(data);\n      });\n    });\n  }\n\n  /**\n   * JSON.stringify's a packet and then sends it to the WebSocket Server.\n   * @param {Object} packet The packet to send\n   * @returns {Promise<string>}\n   */\n  sendPacket(packet) {\n    try {\n      packet = JSON.stringify(packet);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    return this.send(packet);\n  }\n\n  /**\n   * Called whenever the WebSocket opens.\n   */\n  onOpen() {\n    this.emit('debug', `[WS] opened at gateway ${this.connection.authentication.endpoint}`);\n    this.sendPacket({\n      op: OPCodes.DISPATCH,\n      d: {\n        server_id: this.connection.channel.guild.id,\n        user_id: this.client.user.id,\n        token: this.connection.authentication.token,\n        session_id: this.connection.authentication.sessionID,\n      },\n    }).catch(() => {\n      this.emit('error', new Error('VOICE_JOIN_SOCKET_CLOSED'));\n    });\n  }\n\n  /**\n   * Called whenever a message is received from the WebSocket.\n   * @param {MessageEvent} event The message event that was received\n   * @returns {void}\n   */\n  onMessage(event) {\n    try {\n      return this.onPacket(WebSocket.unpack(event.data, 'json'));\n    } catch (error) {\n      return this.onError(error);\n    }\n  }\n\n  /**\n   * Called whenever the connection to the WebSocket server is lost.\n   */\n  onClose() {\n    this.emit('debug', `[WS] closed`);\n    if (!this.dead) this.client.setTimeout(this.connect.bind(this), this.attempts * 1000);\n  }\n\n  /**\n   * Called whenever an error occurs with the WebSocket.\n   * @param {Error} error The error that occurred\n   */\n  onError(error) {\n    this.emit('debug', `[WS] Error: ${error}`);\n    this.emit('error', error);\n  }\n\n  /**\n   * Called whenever a valid packet is received from the WebSocket.\n   * @param {Object} packet The received packet\n   */\n  onPacket(packet) {\n    this.emit('debug', `[WS] << ${JSON.stringify(packet)}`);\n    switch (packet.op) {\n      case VoiceOPCodes.HELLO:\n        this.setHeartbeat(packet.d.heartbeat_interval);\n        break;\n      case VoiceOPCodes.READY:\n        /**\n         * Emitted once the voice WebSocket receives the ready packet.\n         * @param {Object} packet The received packet\n         * @event VoiceWebSocket#ready\n         */\n        this.emit('ready', packet.d);\n        break;\n      /* eslint-disable no-case-declarations */\n      case VoiceOPCodes.SESSION_DESCRIPTION:\n        packet.d.secret_key = new Uint8Array(packet.d.secret_key);\n        /**\n         * Emitted once the Voice Websocket receives a description of this voice session.\n         * @param {Object} packet The received packet\n         * @event VoiceWebSocket#sessionDescription\n         */\n        this.emit('sessionDescription', packet.d);\n        break;\n      case VoiceOPCodes.CLIENT_CONNECT:\n        this.connection.ssrcMap.set(+packet.d.audio_ssrc, packet.d.user_id);\n        break;\n      case VoiceOPCodes.CLIENT_DISCONNECT:\n        const streamInfo = this.connection.receiver && this.connection.receiver.packets.streams.get(packet.d.user_id);\n        if (streamInfo) {\n          this.connection.receiver.packets.streams.delete(packet.d.user_id);\n          streamInfo.stream.push(null);\n        }\n        break;\n      case VoiceOPCodes.SPEAKING:\n        /**\n         * Emitted whenever a speaking packet is received.\n         * @param {Object} data\n         * @event VoiceWebSocket#startSpeaking\n         */\n        this.emit('startSpeaking', packet.d);\n        break;\n      default:\n        /**\n         * Emitted when an unhandled packet is received.\n         * @param {Object} packet\n         * @event VoiceWebSocket#unknownPacket\n         */\n        this.emit('unknownPacket', packet);\n        break;\n    }\n  }\n\n  /**\n   * Sets an interval at which to send a heartbeat packet to the WebSocket.\n   * @param {number} interval The interval at which to send a heartbeat packet\n   */\n  setHeartbeat(interval) {\n    if (!interval || isNaN(interval)) {\n      this.onError(new Error('VOICE_INVALID_HEARTBEAT'));\n      return;\n    }\n    if (this.heartbeatInterval) {\n      /**\n       * Emitted whenever the voice WebSocket encounters a non-fatal error.\n       * @param {string} warn The warning\n       * @event VoiceWebSocket#warn\n       */\n      this.emit('warn', 'A voice heartbeat interval is being overwritten');\n      this.client.clearInterval(this.heartbeatInterval);\n    }\n    this.heartbeatInterval = this.client.setInterval(this.sendHeartbeat.bind(this), interval);\n  }\n\n  /**\n   * Clears a heartbeat interval, if one exists.\n   */\n  clearHeartbeat() {\n    if (!this.heartbeatInterval) {\n      this.emit('warn', 'Tried to clear a heartbeat interval that does not exist');\n      return;\n    }\n    this.client.clearInterval(this.heartbeatInterval);\n    this.heartbeatInterval = null;\n  }\n\n  /**\n   * Sends a heartbeat packet.\n   */\n  sendHeartbeat() {\n    this.sendPacket({ op: VoiceOPCodes.HEARTBEAT, d: Math.floor(Math.random() * 10e10) }).catch(() => {\n      this.emit('warn', 'Tried to send heartbeat, but connection is not open');\n      this.clearHeartbeat();\n    });\n  }\n}\n\nmodule.exports = VoiceWebSocket;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/networking/VoiceWebSocket.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/player/AudioPlayer.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/player/AudioPlayer.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BasePlayer = __webpack_require__(/*! ./BasePlayer */ \"./node_modules/discord.js/src/client/voice/player/BasePlayer.js\");\n\n/**\n * An Audio Player for a Voice Connection.\n * @private\n * @extends {BasePlayer}\n */\nclass AudioPlayer extends BasePlayer {\n  constructor(voiceConnection) {\n    super();\n    /**\n     * The voice connection that the player serves\n     * @type {VoiceConnection}\n     */\n    this.voiceConnection = voiceConnection;\n  }\n\n  playBroadcast(broadcast, options) {\n    const dispatcher = this.createDispatcher(options, { broadcast });\n    broadcast.add(dispatcher);\n    return dispatcher;\n  }\n}\n\nmodule.exports = AudioPlayer;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/player/AudioPlayer.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/player/BasePlayer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/player/BasePlayer.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst { Readable: ReadableStream } = __webpack_require__(/*! stream */ \"stream\");\nconst prism = __webpack_require__(/*! prism-media */ \"./node_modules/prism-media/src/index.js\");\nconst StreamDispatcher = __webpack_require__(/*! ../dispatcher/StreamDispatcher */ \"./node_modules/discord.js/src/client/voice/dispatcher/StreamDispatcher.js\");\n\nconst FFMPEG_ARGUMENTS = ['-analyzeduration', '0', '-loglevel', '0', '-f', 's16le', '-ar', '48000', '-ac', '2'];\n\n/**\n * An Audio Player for a Voice Connection.\n * @private\n * @extends {EventEmitter}\n */\nclass BasePlayer extends EventEmitter {\n  constructor() {\n    super();\n\n    this.dispatcher = null;\n\n    this.streamingData = {\n      channels: 2,\n      sequence: 0,\n      timestamp: 0,\n    };\n  }\n\n  destroy() {\n    this.destroyDispatcher();\n  }\n\n  destroyDispatcher() {\n    if (this.dispatcher) {\n      this.dispatcher.destroy();\n      this.dispatcher = null;\n    }\n  }\n\n  playUnknown(input, options) {\n    this.destroyDispatcher();\n\n    const isStream = input instanceof ReadableStream;\n\n    const args = isStream ? FFMPEG_ARGUMENTS.slice() : ['-i', input, ...FFMPEG_ARGUMENTS];\n    if (options.seek) args.unshift('-ss', String(options.seek));\n\n    const ffmpeg = new prism.FFmpeg({ args });\n    const streams = { ffmpeg };\n    if (isStream) {\n      streams.input = input;\n      input.pipe(ffmpeg);\n    }\n    return this.playPCMStream(ffmpeg, options, streams);\n  }\n\n  playPCMStream(stream, options, streams = {}) {\n    this.destroyDispatcher();\n    const opus = (streams.opus = new prism.opus.Encoder({ channels: 2, rate: 48000, frameSize: 960 }));\n    if (options && options.volume === false) {\n      stream.pipe(opus);\n      return this.playOpusStream(opus, options, streams);\n    }\n    streams.volume = new prism.VolumeTransformer({ type: 's16le', volume: options ? options.volume : 1 });\n    stream.pipe(streams.volume).pipe(opus);\n    return this.playOpusStream(opus, options, streams);\n  }\n\n  playOpusStream(stream, options, streams = {}) {\n    this.destroyDispatcher();\n    streams.opus = stream;\n    if (options.volume !== false && !streams.input) {\n      streams.input = stream;\n      const decoder = new prism.opus.Decoder({ channels: 2, rate: 48000, frameSize: 960 });\n      streams.volume = new prism.VolumeTransformer({ type: 's16le', volume: options ? options.volume : 1 });\n      streams.opus = stream\n        .pipe(decoder)\n        .pipe(streams.volume)\n        .pipe(new prism.opus.Encoder({ channels: 2, rate: 48000, frameSize: 960 }));\n    }\n    const dispatcher = this.createDispatcher(options, streams);\n    streams.opus.pipe(dispatcher);\n    return dispatcher;\n  }\n\n  createDispatcher(options, streams, broadcast) {\n    this.destroyDispatcher();\n    const dispatcher = (this.dispatcher = new StreamDispatcher(this, options, streams, broadcast));\n    return dispatcher;\n  }\n}\n\nmodule.exports = BasePlayer;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/player/BasePlayer.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/player/BroadcastAudioPlayer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/player/BroadcastAudioPlayer.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BasePlayer = __webpack_require__(/*! ./BasePlayer */ \"./node_modules/discord.js/src/client/voice/player/BasePlayer.js\");\nconst BroadcastDispatcher = __webpack_require__(/*! ../dispatcher/BroadcastDispatcher */ \"./node_modules/discord.js/src/client/voice/dispatcher/BroadcastDispatcher.js\");\n\n/**\n * An Audio Player for a Voice Connection.\n * @private\n * @extends {BasePlayer}\n */\nclass AudioPlayer extends BasePlayer {\n  constructor(broadcast) {\n    super();\n    /**\n     * The broadcast that the player serves\n     * @type {VoiceBroadcast}\n     */\n    this.broadcast = broadcast;\n  }\n\n  createDispatcher(options, streams) {\n    this.destroyDispatcher();\n    const dispatcher = (this.dispatcher = new BroadcastDispatcher(this, options, streams));\n    return dispatcher;\n  }\n}\n\nmodule.exports = AudioPlayer;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/player/BroadcastAudioPlayer.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/receiver/PacketHandler.js":
/*!****************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/receiver/PacketHandler.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst secretbox = __webpack_require__(/*! ../util/Secretbox */ \"./node_modules/discord.js/src/client/voice/util/Secretbox.js\");\n\n// The delay between packets when a user is considered to have stopped speaking\n// https://github.com/discordjs/discord.js/issues/3524#issuecomment-540373200\nconst DISCORD_SPEAKING_DELAY = 250;\n\nclass Readable extends __webpack_require__(/*! stream */ \"stream\").Readable {\n  _read() {} // eslint-disable-line no-empty-function\n}\n\nclass PacketHandler extends EventEmitter {\n  constructor(receiver) {\n    super();\n    this.nonce = Buffer.alloc(24);\n    this.receiver = receiver;\n    this.streams = new Map();\n    this.speakingTimeouts = new Map();\n  }\n\n  get connection() {\n    return this.receiver.connection;\n  }\n\n  _stoppedSpeaking(userID) {\n    const streamInfo = this.streams.get(userID);\n    if (streamInfo && streamInfo.end === 'silence') {\n      this.streams.delete(userID);\n      streamInfo.stream.push(null);\n    }\n  }\n\n  makeStream(user, end) {\n    if (this.streams.has(user)) return this.streams.get(user).stream;\n    const stream = new Readable();\n    stream.on('end', () => this.streams.delete(user));\n    this.streams.set(user, { stream, end });\n    return stream;\n  }\n\n  parseBuffer(buffer) {\n    const { secret_key, mode } = this.receiver.connection.authentication;\n\n    // Choose correct nonce depending on encryption\n    let end;\n    if (mode === 'xsalsa20_poly1305_lite') {\n      buffer.copy(this.nonce, 0, buffer.length - 4);\n      end = buffer.length - 4;\n    } else if (mode === 'xsalsa20_poly1305_suffix') {\n      buffer.copy(this.nonce, 0, buffer.length - 24);\n      end = buffer.length - 24;\n    } else {\n      buffer.copy(this.nonce, 0, 0, 12);\n    }\n\n    // Open packet\n    let packet = secretbox.methods.open(buffer.slice(12, end), this.nonce, secret_key);\n    if (!packet) return new Error('Failed to decrypt voice packet');\n    packet = Buffer.from(packet);\n\n    // Strip RTP Header Extensions (one-byte only)\n    if (packet[0] === 0xbe && packet[1] === 0xde && packet.length > 4) {\n      const headerExtensionLength = packet.readUInt16BE(2);\n      let offset = 4;\n      for (let i = 0; i < headerExtensionLength; i++) {\n        const byte = packet[offset];\n        offset++;\n        if (byte === 0) continue;\n        offset += 1 + (0b1111 & (byte >> 4));\n      }\n      // Skip over undocumented Discord byte\n      offset++;\n\n      packet = packet.slice(offset);\n    }\n\n    return packet;\n  }\n\n  push(buffer) {\n    const ssrc = buffer.readUInt32BE(8);\n    const userStat = this.connection.ssrcMap.get(ssrc);\n    if (!userStat) return;\n\n    let speakingTimeout = this.speakingTimeouts.get(ssrc);\n    if (typeof speakingTimeout === 'undefined') {\n      this.connection.onSpeaking({ user_id: userStat.userID, ssrc: ssrc, speaking: userStat.speaking });\n      speakingTimeout = this.receiver.connection.client.setTimeout(() => {\n        try {\n          this.connection.onSpeaking({ user_id: userStat.userID, ssrc: ssrc, speaking: 0 });\n          this.receiver.connection.client.clearTimeout(speakingTimeout);\n          this.speakingTimeouts.delete(ssrc);\n        } catch {\n          // Connection already closed, ignore\n        }\n      }, DISCORD_SPEAKING_DELAY);\n      this.speakingTimeouts.set(ssrc, speakingTimeout);\n    } else {\n      speakingTimeout.refresh();\n    }\n\n    let stream = this.streams.get(userStat.userID);\n    if (!stream) return;\n    stream = stream.stream;\n    const opusPacket = this.parseBuffer(buffer);\n    if (opusPacket instanceof Error) {\n      this.emit('error', opusPacket);\n      return;\n    }\n    stream.push(opusPacket);\n  }\n}\n\nmodule.exports = PacketHandler;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/receiver/PacketHandler.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/receiver/Receiver.js":
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/receiver/Receiver.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst prism = __webpack_require__(/*! prism-media */ \"./node_modules/prism-media/src/index.js\");\nconst PacketHandler = __webpack_require__(/*! ./PacketHandler */ \"./node_modules/discord.js/src/client/voice/receiver/PacketHandler.js\");\nconst { Error } = __webpack_require__(/*! ../../../errors */ \"./node_modules/discord.js/src/errors/index.js\");\n\n/**\n * Receives audio packets from a voice connection.\n * @example\n * const receiver = connection.createReceiver();\n * // opusStream is a ReadableStream - that means you could play it back to a voice channel if you wanted to!\n * const opusStream = receiver.createStream(user);\n */\nclass VoiceReceiver extends EventEmitter {\n  constructor(connection) {\n    super();\n    this.connection = connection;\n    this.packets = new PacketHandler(this);\n    /**\n     * Emitted whenever there is a warning\n     * @event VoiceReceiver#debug\n     * @param {Error|string} error The error or message to debug\n     */\n    this.packets.on('error', err => this.emit('debug', err));\n  }\n\n  /**\n   * Options passed to `VoiceReceiver#createStream`.\n   * @typedef {Object} ReceiveStreamOptions\n   * @property {string} [mode='opus'] The mode for audio output. This defaults to opus, meaning discord.js won't decode\n   * the packets for you. You can set this to 'pcm' so that the stream's output will be 16-bit little-endian stereo\n   * audio\n   * @property {string} [end='silence'] When the stream should be destroyed. If `silence`, this will be when the user\n   * stops talking. Otherwise, if `manual`, this should be handled by you.\n   */\n\n  /**\n   * Creates a new audio receiving stream. If a stream already exists for a user, then that stream will be returned\n   * rather than generating a new one.\n   * @param {UserResolvable} user The user to start listening to.\n   * @param {ReceiveStreamOptions} options Options.\n   * @returns {ReadableStream}\n   */\n  createStream(user, { mode = 'opus', end = 'silence' } = {}) {\n    user = this.connection.client.users.resolve(user);\n    if (!user) throw new Error('VOICE_USER_MISSING');\n    const stream = this.packets.makeStream(user.id, end);\n    if (mode === 'pcm') {\n      const decoder = new prism.opus.Decoder({ channels: 2, rate: 48000, frameSize: 960 });\n      stream.pipe(decoder);\n      return decoder;\n    }\n    return stream;\n  }\n}\n\nmodule.exports = VoiceReceiver;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/receiver/Receiver.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/util sync recursive":
/*!************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util sync ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/discord.js/src/client/voice/util sync recursive\";\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/util_sync?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/util/PlayInterface.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util/PlayInterface.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst prism = __webpack_require__(/*! prism-media */ \"./node_modules/prism-media/src/index.js\");\nconst { Error } = __webpack_require__(/*! ../../../errors */ \"./node_modules/discord.js/src/errors/index.js\");\n\n/**\n * Options that can be passed to stream-playing methods:\n * @typedef {Object} StreamOptions\n * @property {StreamType} [type='unknown'] The type of stream.\n * @property {number} [seek=0] The time to seek to, will be ignored when playing `ogg/opus` or `webm/opus` streams\n * @property {number|boolean} [volume=1] The volume to play at. Set this to false to disable volume transforms for\n * this stream to improve performance.\n * @property {number} [plp] Expected packet loss percentage\n * @property {boolean} [fec] Enabled forward error correction\n * @property {number|string} [bitrate=96] The bitrate (quality) of the audio in kbps.\n * If set to 'auto', the voice channel's bitrate will be used\n * @property {number} [highWaterMark=12] The maximum number of opus packets to make and store before they are\n * actually needed. See https://nodejs.org/en/docs/guides/backpressuring-in-streams/. Setting this value to\n * 1 means that changes in volume will be more instant.\n */\n\n/**\n * An option passed as part of `StreamOptions` specifying the type of the stream.\n * * `unknown`: The default type, streams/input will be passed through to ffmpeg before encoding.\n * Will play most streams.\n * * `converted`: Play a stream of 16bit signed stereo PCM data, skipping ffmpeg.\n * * `opus`: Play a stream of opus packets, skipping ffmpeg. You lose the ability to alter volume.\n * * `ogg/opus`: Play an ogg file with the opus encoding, skipping ffmpeg. You lose the ability to alter volume.\n * * `webm/opus`: Play a webm file with opus audio, skipping ffmpeg. You lose the ability to alter volume.\n * @typedef {string} StreamType\n */\n\n/**\n * An interface class to allow you to play audio over VoiceConnections and VoiceBroadcasts.\n */\nclass PlayInterface {\n  constructor(player) {\n    this.player = player;\n  }\n\n  /**\n   * Play an audio resource.\n   * @param {VoiceBroadcast|ReadableStream|string} resource The resource to play.\n   * @param {StreamOptions} [options] The options to play.\n   * @example\n   * // Play a local audio file\n   * connection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });\n   * @example\n   * // Play a ReadableStream\n   * connection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { quality: 'highestaudio' }));\n   * @example\n   * // Play a voice broadcast\n   * const broadcast = client.voice.createBroadcast();\n   * broadcast.play('/home/hydrabolt/audio.mp3');\n   * connection.play(broadcast);\n   * @example\n   * // Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\n   * connection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');\n   * @returns {StreamDispatcher}\n   */\n  play(resource, options = {}) {\n    const VoiceBroadcast = __webpack_require__(/*! ../VoiceBroadcast */ \"./node_modules/discord.js/src/client/voice/VoiceBroadcast.js\");\n    if (resource instanceof VoiceBroadcast) {\n      if (!this.player.playBroadcast) throw new Error('VOICE_PLAY_INTERFACE_NO_BROADCAST');\n      return this.player.playBroadcast(resource, options);\n    }\n    if (resource instanceof Readable || typeof resource === 'string') {\n      const type = options.type || 'unknown';\n      if (type === 'unknown') {\n        return this.player.playUnknown(resource, options);\n      } else if (type === 'converted') {\n        return this.player.playPCMStream(resource, options);\n      } else if (type === 'opus') {\n        return this.player.playOpusStream(resource, options);\n      } else if (type === 'ogg/opus') {\n        if (!(resource instanceof Readable)) throw new Error('VOICE_PRISM_DEMUXERS_NEED_STREAM');\n        return this.player.playOpusStream(resource.pipe(new prism.opus.OggDemuxer()), options);\n      } else if (type === 'webm/opus') {\n        if (!(resource instanceof Readable)) throw new Error('VOICE_PRISM_DEMUXERS_NEED_STREAM');\n        return this.player.playOpusStream(resource.pipe(new prism.opus.WebmDemuxer()), options);\n      }\n    }\n    throw new Error('VOICE_PLAY_INTERFACE_BAD_TYPE');\n  }\n\n  static applyToClass(structure) {\n    for (const prop of ['play']) {\n      Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(PlayInterface.prototype, prop));\n    }\n  }\n}\n\nmodule.exports = PlayInterface;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/util/PlayInterface.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/util/Secretbox.js":
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util/Secretbox.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst libs = {\n  sodium: sodium => ({\n    open: sodium.api.crypto_secretbox_open_easy,\n    close: sodium.api.crypto_secretbox_easy,\n    random: n => sodium.randombytes_buf(n),\n  }),\n  'libsodium-wrappers': sodium => ({\n    open: sodium.crypto_secretbox_open_easy,\n    close: sodium.crypto_secretbox_easy,\n    random: n => sodium.randombytes_buf(n),\n  }),\n  tweetnacl: tweetnacl => ({\n    open: tweetnacl.secretbox.open,\n    close: tweetnacl.secretbox,\n    random: n => tweetnacl.randomBytes(n),\n  }),\n};\n\nexports.methods = {};\n\n(async () => {\n  for (const libName of Object.keys(libs)) {\n    try {\n      const lib = __webpack_require__(\"./node_modules/discord.js/src/client/voice/util sync recursive\")(libName);\n      if (libName === 'libsodium-wrappers' && lib.ready) await lib.ready; // eslint-disable-line no-await-in-loop\n      exports.methods = libs[libName](lib);\n      break;\n    } catch {} // eslint-disable-line no-empty\n  }\n})();\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/util/Secretbox.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/util/Silence.js":
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util/Silence.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\n\nconst SILENCE_FRAME = Buffer.from([0xf8, 0xff, 0xfe]);\n\nclass Silence extends Readable {\n  _read() {\n    this.push(SILENCE_FRAME);\n  }\n}\n\nmodule.exports = Silence;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/util/Silence.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/voice/util/VolumeInterface.js":
/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util/VolumeInterface.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\n\n/**\n * An interface class for volume transformation.\n * @extends {EventEmitter}\n */\nclass VolumeInterface extends EventEmitter {\n  constructor({ volume = 1 } = {}) {\n    super();\n    this.setVolume(volume);\n  }\n\n  /**\n   * Whether or not the volume of this stream is editable\n   * @type {boolean}\n   * @readonly\n   */\n  get volumeEditable() {\n    return true;\n  }\n\n  /**\n   * The current volume of the stream\n   * @type {number}\n   * @readonly\n   */\n  get volume() {\n    return this._volume;\n  }\n\n  /**\n   * The current volume of the stream in decibels\n   * @type {number}\n   * @readonly\n   */\n  get volumeDecibels() {\n    return Math.log10(this.volume) * 20;\n  }\n\n  /**\n   * The current volume of the stream from a logarithmic scale\n   * @type {number}\n   * @readonly\n   */\n  get volumeLogarithmic() {\n    return Math.pow(this.volume, 1 / 1.660964);\n  }\n\n  applyVolume(buffer, volume) {\n    volume = volume || this._volume;\n    if (volume === 1) return buffer;\n\n    const out = Buffer.alloc(buffer.length);\n    for (let i = 0; i < buffer.length; i += 2) {\n      if (i >= buffer.length - 1) break;\n      const uint = Math.min(32767, Math.max(-32767, Math.floor(volume * buffer.readInt16LE(i))));\n      out.writeInt16LE(uint, i);\n    }\n\n    return out;\n  }\n\n  /**\n   * Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.\n   * @param {number} volume The volume that you want to set\n   */\n  setVolume(volume) {\n    /**\n     * Emitted when the volume of this interface changes.\n     * @event VolumeInterface#volumeChange\n     * @param {number} oldVolume The old volume of this interface\n     * @param {number} newVolume The new volume of this interface\n     */\n    this.emit('volumeChange', this._volume, volume);\n    this._volume = volume;\n  }\n\n  /**\n   * Sets the volume in decibels.\n   * @param {number} db The decibels\n   */\n  setVolumeDecibels(db) {\n    this.setVolume(Math.pow(10, db / 20));\n  }\n\n  /**\n   * Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.\n   * @param {number} value The value for the volume\n   */\n  setVolumeLogarithmic(value) {\n    this.setVolume(Math.pow(value, 1.660964));\n  }\n}\n\nconst props = ['volumeDecibels', 'volumeLogarithmic', 'setVolumeDecibels', 'setVolumeLogarithmic'];\n\nexports.applyToClass = function applyToClass(structure) {\n  for (const prop of props) {\n    Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(VolumeInterface.prototype, prop));\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/voice/util/VolumeInterface.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/WebSocketManager.js":
/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/WebSocketManager.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst WebSocketShard = __webpack_require__(/*! ./WebSocketShard */ \"./node_modules/discord.js/src/client/websocket/WebSocketShard.js\");\nconst PacketHandlers = __webpack_require__(/*! ./handlers */ \"./node_modules/discord.js/src/client/websocket/handlers/index.js\");\nconst { Error: DJSError } = __webpack_require__(/*! ../../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { Events, ShardEvents, Status, WSCodes, WSEvents } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Util = __webpack_require__(/*! ../../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\nconst BeforeReadyWhitelist = [\n  WSEvents.READY,\n  WSEvents.RESUMED,\n  WSEvents.GUILD_CREATE,\n  WSEvents.GUILD_DELETE,\n  WSEvents.GUILD_MEMBERS_CHUNK,\n  WSEvents.GUILD_MEMBER_ADD,\n  WSEvents.GUILD_MEMBER_REMOVE,\n];\n\nconst UNRECOVERABLE_CLOSE_CODES = Object.keys(WSCodes)\n  .slice(1)\n  .map(Number);\nconst UNRESUMABLE_CLOSE_CODES = [1000, 4006, 4007];\n\n/**\n * The WebSocket manager for this client.\n * <info>This class forwards raw dispatch events,\n * read more about it here {@link https://discordapp.com/developers/docs/topics/gateway}</info>\n * @extends EventEmitter\n */\nclass WebSocketManager extends EventEmitter {\n  constructor(client) {\n    super();\n\n    /**\n     * The client that instantiated this WebSocketManager\n     * @type {Client}\n     * @readonly\n     * @name WebSocketManager#client\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The gateway this manager uses\n     * @type {?string}\n     */\n    this.gateway = undefined;\n\n    /**\n     * The amount of shards this manager handles\n     * @private\n     * @type {number}\n     */\n    this.totalShards = this.client.options.shards.length;\n\n    /**\n     * A collection of all shards this manager handles\n     * @type {Collection<number, WebSocketShard>}\n     */\n    this.shards = new Collection();\n\n    /**\n     * An array of shards to be connected or that need to reconnect\n     * @type {Set<WebSocketShard>}\n     * @private\n     * @name WebSocketManager#shardQueue\n     */\n    Object.defineProperty(this, 'shardQueue', { value: new Set(), writable: true });\n\n    /**\n     * An array of queued events before this WebSocketManager became ready\n     * @type {object[]}\n     * @private\n     * @name WebSocketManager#packetQueue\n     */\n    Object.defineProperty(this, 'packetQueue', { value: [] });\n\n    /**\n     * The current status of this WebSocketManager\n     * @type {number}\n     */\n    this.status = Status.IDLE;\n\n    /**\n     * If this manager was destroyed. It will prevent shards from reconnecting\n     * @type {boolean}\n     * @private\n     */\n    this.destroyed = false;\n\n    /**\n     * If this manager is currently reconnecting one or multiple shards\n     * @type {boolean}\n     * @private\n     */\n    this.reconnecting = false;\n\n    /**\n     * The current session limit of the client\n     * @private\n     * @type {?Object}\n     * @prop {number} total Total number of identifies available\n     * @prop {number} remaining Number of identifies remaining\n     * @prop {number} reset_after Number of milliseconds after which the limit resets\n     */\n    this.sessionStartLimit = undefined;\n  }\n\n  /**\n   * The average ping of all WebSocketShards\n   * @type {number}\n   * @readonly\n   */\n  get ping() {\n    const sum = this.shards.reduce((a, b) => a + b.ping, 0);\n    return sum / this.shards.size;\n  }\n\n  /**\n   * Emits a debug message.\n   * @param {string} message The debug message\n   * @param {?WebSocketShard} [shard] The shard that emitted this message, if any\n   * @private\n   */\n  debug(message, shard) {\n    this.client.emit(Events.DEBUG, `[WS => ${shard ? `Shard ${shard.id}` : 'Manager'}] ${message}`);\n  }\n\n  /**\n   * Connects this manager to the gateway.\n   * @private\n   */\n  async connect() {\n    const invalidToken = new DJSError(WSCodes[4004]);\n    const {\n      url: gatewayURL,\n      shards: recommendedShards,\n      session_start_limit: sessionStartLimit,\n    } = await this.client.api.gateway.bot.get().catch(error => {\n      throw error.httpStatus === 401 ? invalidToken : error;\n    });\n\n    this.sessionStartLimit = sessionStartLimit;\n\n    const { total, remaining, reset_after } = sessionStartLimit;\n\n    this.debug(`Fetched Gateway Information\n    URL: ${gatewayURL}\n    Recommended Shards: ${recommendedShards}`);\n\n    this.debug(`Session Limit Information\n    Total: ${total}\n    Remaining: ${remaining}`);\n\n    this.gateway = `${gatewayURL}/`;\n\n    let { shards } = this.client.options;\n\n    if (shards === 'auto') {\n      this.debug(`Using the recommended shard count provided by Discord: ${recommendedShards}`);\n      this.totalShards = this.client.options.shardCount = recommendedShards;\n      shards = this.client.options.shards = Array.from({ length: recommendedShards }, (_, i) => i);\n    }\n\n    this.totalShards = shards.length;\n    this.debug(`Spawning shards: ${shards.join(', ')}`);\n    this.shardQueue = new Set(shards.map(id => new WebSocketShard(this, id)));\n\n    await this._handleSessionLimit(remaining, reset_after);\n\n    return this.createShards();\n  }\n\n  /**\n   * Handles the creation of a shard.\n   * @returns {Promise<boolean>}\n   * @private\n   */\n  async createShards() {\n    // If we don't have any shards to handle, return\n    if (!this.shardQueue.size) return false;\n\n    const [shard] = this.shardQueue;\n\n    this.shardQueue.delete(shard);\n\n    if (!shard.eventsAttached) {\n      shard.on(ShardEvents.ALL_READY, unavailableGuilds => {\n        /**\n         * Emitted when a shard turns ready.\n         * @event Client#shardReady\n         * @param {number} id The shard ID that turned ready\n         * @param {?Set<string>} unavailableGuilds Set of unavailable guild IDs, if any\n         */\n        this.client.emit(Events.SHARD_READY, shard.id, unavailableGuilds);\n\n        if (!this.shardQueue.size) this.reconnecting = false;\n        this.checkShardsReady();\n      });\n\n      shard.on(ShardEvents.CLOSE, event => {\n        if (event.code === 1000 ? this.destroyed : UNRECOVERABLE_CLOSE_CODES.includes(event.code)) {\n          /**\n           * Emitted when a shard's WebSocket disconnects and will no longer reconnect.\n           * @event Client#shardDisconnect\n           * @param {CloseEvent} event The WebSocket close event\n           * @param {number} id The shard ID that disconnected\n           */\n          this.client.emit(Events.SHARD_DISCONNECT, event, shard.id);\n          this.debug(WSCodes[event.code], shard);\n          return;\n        }\n\n        if (UNRESUMABLE_CLOSE_CODES.includes(event.code)) {\n          // These event codes cannot be resumed\n          shard.sessionID = undefined;\n        }\n\n        /**\n         * Emitted when a shard is attempting to reconnect or re-identify.\n         * @event Client#shardReconnecting\n         * @param {number} id The shard ID that is attempting to reconnect\n         */\n        this.client.emit(Events.SHARD_RECONNECTING, shard.id);\n\n        this.shardQueue.add(shard);\n\n        if (shard.sessionID) {\n          this.debug(`Session ID is present, attempting an immediate reconnect...`, shard);\n          this.reconnect(true);\n        } else {\n          shard.destroy({ reset: true, emit: false, log: false });\n          this.reconnect();\n        }\n      });\n\n      shard.on(ShardEvents.INVALID_SESSION, () => {\n        this.client.emit(Events.SHARD_RECONNECTING, shard.id);\n      });\n\n      shard.on(ShardEvents.DESTROYED, () => {\n        this.debug('Shard was destroyed but no WebSocket connection was present! Reconnecting...', shard);\n\n        this.client.emit(Events.SHARD_RECONNECTING, shard.id);\n\n        this.shardQueue.add(shard);\n        this.reconnect();\n      });\n\n      shard.eventsAttached = true;\n    }\n\n    this.shards.set(shard.id, shard);\n\n    try {\n      await shard.connect();\n    } catch (error) {\n      if (error && error.code && UNRECOVERABLE_CLOSE_CODES.includes(error.code)) {\n        throw new DJSError(WSCodes[error.code]);\n        // Undefined if session is invalid, error event for regular closes\n      } else if (!error || error.code) {\n        this.debug('Failed to connect to the gateway, requeueing...', shard);\n        this.shardQueue.add(shard);\n      } else {\n        throw error;\n      }\n    }\n    // If we have more shards, add a 5s delay\n    if (this.shardQueue.size) {\n      this.debug(`Shard Queue Size: ${this.shardQueue.size}; continuing in 5 seconds...`);\n      await Util.delayFor(5000);\n      await this._handleSessionLimit();\n      return this.createShards();\n    }\n\n    return true;\n  }\n\n  /**\n   * Handles reconnects for this manager.\n   * @param {boolean} [skipLimit=false] IF this reconnect should skip checking the session limit\n   * @private\n   * @returns {Promise<boolean>}\n   */\n  async reconnect(skipLimit = false) {\n    if (this.reconnecting || this.status !== Status.READY) return false;\n    this.reconnecting = true;\n    try {\n      if (!skipLimit) await this._handleSessionLimit();\n      await this.createShards();\n    } catch (error) {\n      this.debug(`Couldn't reconnect or fetch information about the gateway. ${error}`);\n      if (error.httpStatus !== 401) {\n        this.debug(`Possible network error occurred. Retrying in 5s...`);\n        await Util.delayFor(5000);\n        this.reconnecting = false;\n        return this.reconnect();\n      }\n      // If we get an error at this point, it means we cannot reconnect anymore\n      if (this.client.listenerCount(Events.INVALIDATED)) {\n        /**\n         * Emitted when the client's session becomes invalidated.\n         * You are expected to handle closing the process gracefully and preventing a boot loop\n         * if you are listening to this event.\n         * @event Client#invalidated\n         */\n        this.client.emit(Events.INVALIDATED);\n        // Destroy just the shards. This means you have to handle the cleanup yourself\n        this.destroy();\n      } else {\n        this.client.destroy();\n      }\n    } finally {\n      this.reconnecting = false;\n    }\n    return true;\n  }\n\n  /**\n   * Broadcasts a packet to every shard this manager handles.\n   * @param {Object} packet The packet to send\n   * @private\n   */\n  broadcast(packet) {\n    for (const shard of this.shards.values()) shard.send(packet);\n  }\n\n  /**\n   * Destroys this manager and all its shards.\n   * @private\n   */\n  destroy() {\n    if (this.destroyed) return;\n    this.debug(`Manager was destroyed. Called by:\\n${new Error('MANAGER_DESTROYED').stack}`);\n    this.destroyed = true;\n    this.shardQueue.clear();\n    for (const shard of this.shards.values()) shard.destroy({ closeCode: 1000, reset: true, emit: false, log: false });\n  }\n\n  /**\n   * Handles the timeout required if we cannot identify anymore.\n   * @param {number} [remaining] The amount of remaining identify sessions that can be done today\n   * @param {number} [resetAfter] The amount of time in which the identify counter resets\n   * @private\n   */\n  async _handleSessionLimit(remaining, resetAfter) {\n    if (typeof remaining === 'undefined' && typeof resetAfter === 'undefined') {\n      const { session_start_limit } = await this.client.api.gateway.bot.get();\n      this.sessionStartLimit = session_start_limit;\n      remaining = session_start_limit.remaining;\n      resetAfter = session_start_limit.reset_after;\n      this.debug(`Session Limit Information\n    Total: ${session_start_limit.total}\n    Remaining: ${remaining}`);\n    }\n    if (!remaining) {\n      this.debug(`Exceeded identify threshold. Will attempt a connection in ${resetAfter}ms`);\n      await Util.delayFor(resetAfter);\n    }\n  }\n\n  /**\n   * Processes a packet and queues it if this WebSocketManager is not ready.\n   * @param {Object} [packet] The packet to be handled\n   * @param {WebSocketShard} [shard] The shard that will handle this packet\n   * @returns {boolean}\n   * @private\n   */\n  handlePacket(packet, shard) {\n    if (packet && this.status !== Status.READY) {\n      if (!BeforeReadyWhitelist.includes(packet.t)) {\n        this.packetQueue.push({ packet, shard });\n        return false;\n      }\n    }\n\n    if (this.packetQueue.length) {\n      const item = this.packetQueue.shift();\n      this.client.setImmediate(() => {\n        this.handlePacket(item.packet, item.shard);\n      });\n    }\n\n    if (packet && PacketHandlers[packet.t]) {\n      PacketHandlers[packet.t](this.client, packet, shard);\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks whether the client is ready to be marked as ready.\n   * @private\n   */\n  async checkShardsReady() {\n    if (this.status === Status.READY) return;\n    if (this.shards.size !== this.totalShards || this.shards.some(s => s.status !== Status.READY)) {\n      return;\n    }\n\n    this.status = Status.NEARLY;\n\n    if (this.client.options.fetchAllMembers) {\n      try {\n        const promises = this.client.guilds.cache.map(guild => {\n          if (guild.available) return guild.members.fetch();\n          // Return empty promise if guild is unavailable\n          return Promise.resolve();\n        });\n        await Promise.all(promises);\n      } catch (err) {\n        this.debug(`Failed to fetch all members before ready! ${err}\\n${err.stack}`);\n      }\n    }\n\n    this.triggerClientReady();\n  }\n\n  /**\n   * Causes the client to be marked as ready and emits the ready event.\n   * @private\n   */\n  triggerClientReady() {\n    this.status = Status.READY;\n\n    this.client.readyAt = new Date();\n\n    /**\n     * Emitted when the client becomes ready to start working.\n     * @event Client#ready\n     */\n    this.client.emit(Events.CLIENT_READY);\n\n    this.handlePacket();\n  }\n}\n\nmodule.exports = WebSocketManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/WebSocketManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/WebSocketShard.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/WebSocketShard.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst WebSocket = __webpack_require__(/*! ../../WebSocket */ \"./node_modules/discord.js/src/WebSocket.js\");\nconst { browser, Status, Events, ShardEvents, OPCodes, WSEvents } = __webpack_require__(/*! ../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nconst STATUS_KEYS = Object.keys(Status);\nconst CONNECTION_STATE = Object.keys(WebSocket.WebSocket);\n\nlet zlib;\n\nif (!browser) {\n  try {\n    zlib = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'zlib-sync'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n  } catch {} // eslint-disable-line no-empty\n}\n\n/**\n * Represents a Shard's WebSocket connection\n */\nclass WebSocketShard extends EventEmitter {\n  constructor(manager, id) {\n    super();\n\n    /**\n     * The WebSocketManager of the shard\n     * @type {WebSocketManager}\n     */\n    this.manager = manager;\n\n    /**\n     * The ID of the shard\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * The current status of the shard\n     * @type {Status}\n     */\n    this.status = Status.IDLE;\n\n    /**\n     * The current sequence of the shard\n     * @type {number}\n     * @private\n     */\n    this.sequence = -1;\n\n    /**\n     * The sequence of the shard after close\n     * @type {number}\n     * @private\n     */\n    this.closeSequence = 0;\n\n    /**\n     * The current session ID of the shard\n     * @type {string}\n     * @private\n     */\n    this.sessionID = undefined;\n\n    /**\n     * The previous heartbeat ping of the shard\n     * @type {number}\n     */\n    this.ping = -1;\n\n    /**\n     * The last time a ping was sent (a timestamp)\n     * @type {number}\n     * @private\n     */\n    this.lastPingTimestamp = -1;\n\n    /**\n     * If we received a heartbeat ack back. Used to identify zombie connections\n     * @type {boolean}\n     * @private\n     */\n    this.lastHeartbeatAcked = true;\n\n    /**\n     * Contains the rate limit queue and metadata\n     * @type {Object}\n     * @private\n     */\n    Object.defineProperty(this, 'ratelimit', {\n      value: {\n        queue: [],\n        total: 120,\n        remaining: 120,\n        time: 60e3,\n        timer: null,\n      },\n    });\n\n    /**\n     * The WebSocket connection for the current shard\n     * @type {?WebSocket}\n     * @private\n     */\n    Object.defineProperty(this, 'connection', { value: null, writable: true });\n\n    /**\n     * @external Inflate\n     * @see {@link https://www.npmjs.com/package/zlib-sync}\n     */\n\n    /**\n     * The compression to use\n     * @type {?Inflate}\n     * @private\n     */\n    Object.defineProperty(this, 'inflate', { value: null, writable: true });\n\n    /**\n     * The HELLO timeout\n     * @type {?NodeJS.Timer}\n     * @private\n     */\n    Object.defineProperty(this, 'helloTimeout', { value: undefined, writable: true });\n\n    /**\n     * If the manager attached its event handlers on the shard\n     * @type {boolean}\n     * @private\n     */\n    Object.defineProperty(this, 'eventsAttached', { value: false, writable: true });\n\n    /**\n     * A set of guild IDs this shard expects to receive\n     * @type {?Set<string>}\n     * @private\n     */\n    Object.defineProperty(this, 'expectedGuilds', { value: undefined, writable: true });\n\n    /**\n     * The ready timeout\n     * @type {?NodeJS.Timer}\n     * @private\n     */\n    Object.defineProperty(this, 'readyTimeout', { value: undefined, writable: true });\n\n    /**\n     * Time when the WebSocket connection was opened\n     * @type {number}\n     * @private\n     */\n    Object.defineProperty(this, 'connectedAt', { value: 0, writable: true });\n  }\n\n  /**\n   * Emits a debug event.\n   * @param {string} message The debug message\n   * @private\n   */\n  debug(message) {\n    this.manager.debug(message, this);\n  }\n\n  /**\n   * Connects the shard to the gateway.\n   * @private\n   * @returns {Promise<void>} A promise that will resolve if the shard turns ready successfully,\n   * or reject if we couldn't connect\n   */\n  connect() {\n    const { gateway, client } = this.manager;\n\n    if (this.connection && this.connection.readyState === WebSocket.OPEN && this.status === Status.READY) {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve, reject) => {\n      const cleanup = () => {\n        this.removeListener(ShardEvents.CLOSE, onClose);\n        this.removeListener(ShardEvents.READY, onReady);\n        this.removeListener(ShardEvents.RESUMED, onResumed);\n        this.removeListener(ShardEvents.INVALID_SESSION, onInvalidOrDestroyed);\n        this.removeListener(ShardEvents.DESTROYED, onInvalidOrDestroyed);\n      };\n\n      const onReady = () => {\n        cleanup();\n        resolve();\n      };\n\n      const onResumed = () => {\n        cleanup();\n        resolve();\n      };\n\n      const onClose = event => {\n        cleanup();\n        reject(event);\n      };\n\n      const onInvalidOrDestroyed = () => {\n        cleanup();\n        // eslint-disable-next-line prefer-promise-reject-errors\n        reject();\n      };\n\n      this.once(ShardEvents.READY, onReady);\n      this.once(ShardEvents.RESUMED, onResumed);\n      this.once(ShardEvents.CLOSE, onClose);\n      this.once(ShardEvents.INVALID_SESSION, onInvalidOrDestroyed);\n      this.once(ShardEvents.DESTROYED, onInvalidOrDestroyed);\n\n      if (this.connection && this.connection.readyState === WebSocket.OPEN) {\n        this.debug('An open connection was found, attempting an immediate identify.');\n        this.identify();\n        return;\n      }\n\n      if (this.connection) {\n        this.debug(`A connection object was found. Cleaning up before continuing.\n    State: ${CONNECTION_STATE[this.connection.readyState]}`);\n        this.destroy({ emit: false });\n      }\n\n      const wsQuery = { v: client.options.ws.version };\n\n      if (zlib) {\n        this.inflate = new zlib.Inflate({\n          chunkSize: 65535,\n          flush: zlib.Z_SYNC_FLUSH,\n          to: WebSocket.encoding === 'json' ? 'string' : '',\n        });\n        wsQuery.compress = 'zlib-stream';\n      }\n\n      this.debug(\n        `[CONNECT]\n    Gateway    : ${gateway}\n    Version    : ${client.options.ws.version}\n    Encoding   : ${WebSocket.encoding}\n    Compression: ${zlib ? 'zlib-stream' : 'none'}`,\n      );\n\n      this.status = this.status === Status.DISCONNECTED ? Status.RECONNECTING : Status.CONNECTING;\n      this.setHelloTimeout();\n\n      this.connectedAt = Date.now();\n\n      const ws = (this.connection = WebSocket.create(gateway, wsQuery));\n      ws.onopen = this.onOpen.bind(this);\n      ws.onmessage = this.onMessage.bind(this);\n      ws.onerror = this.onError.bind(this);\n      ws.onclose = this.onClose.bind(this);\n    });\n  }\n\n  /**\n   * Called whenever a connection is opened to the gateway.\n   * @private\n   */\n  onOpen() {\n    this.debug(`[CONNECTED] ${this.connection.url} in ${Date.now() - this.connectedAt}ms`);\n    this.status = Status.NEARLY;\n  }\n\n  /**\n   * Called whenever a message is received.\n   * @param {MessageEvent} event Event received\n   * @private\n   */\n  onMessage({ data }) {\n    let raw;\n    if (data instanceof ArrayBuffer) data = new Uint8Array(data);\n    if (zlib) {\n      const l = data.length;\n      const flush =\n        l >= 4 && data[l - 4] === 0x00 && data[l - 3] === 0x00 && data[l - 2] === 0xff && data[l - 1] === 0xff;\n\n      this.inflate.push(data, flush && zlib.Z_SYNC_FLUSH);\n      if (!flush) return;\n      raw = this.inflate.result;\n    } else {\n      raw = data;\n    }\n    let packet;\n    try {\n      packet = WebSocket.unpack(raw);\n      this.manager.client.emit(Events.RAW, packet, this.id);\n      if (packet.op === OPCodes.DISPATCH) this.manager.emit(packet.t, packet.d, this.id);\n    } catch (err) {\n      this.manager.client.emit(Events.SHARD_ERROR, err, this.id);\n      return;\n    }\n    this.onPacket(packet);\n  }\n\n  /**\n   * Called whenever an error occurs with the WebSocket.\n   * @param {ErrorEvent} event The error that occurred\n   * @private\n   */\n  onError(event) {\n    const error = event && event.error ? event.error : event;\n    if (!error) return;\n\n    /**\n     * Emitted whenever a shard's WebSocket encounters a connection error.\n     * @event Client#shardError\n     * @param {Error} error The encountered error\n     * @param {number} shardID The shard that encountered this error\n     */\n    this.manager.client.emit(Events.SHARD_ERROR, error, this.id);\n  }\n\n  /**\n   * @external CloseEvent\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   */\n\n  /**\n   * @external ErrorEvent\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent}\n   */\n\n  /**\n   * @external MessageEvent\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent}\n   */\n\n  /**\n   * Called whenever a connection to the gateway is closed.\n   * @param {CloseEvent} event Close event that was received\n   * @private\n   */\n  onClose(event) {\n    if (this.sequence !== -1) this.closeSequence = this.sequence;\n    this.sequence = -1;\n\n    this.debug(`[CLOSE]\n    Event Code: ${event.code}\n    Clean     : ${event.wasClean}\n    Reason    : ${event.reason || 'No reason received'}`);\n\n    this.setHeartbeatTimer(-1);\n    this.setHelloTimeout(-1);\n    // If we still have a connection object, clean up its listeners\n    if (this.connection) this._cleanupConnection();\n\n    this.status = Status.DISCONNECTED;\n\n    /**\n     * Emitted when a shard's WebSocket closes.\n     * @private\n     * @event WebSocketShard#close\n     * @param {CloseEvent} event The received event\n     */\n    this.emit(ShardEvents.CLOSE, event);\n  }\n\n  /**\n   * Called whenever a packet is received.\n   * @param {Object} packet The received packet\n   * @private\n   */\n  onPacket(packet) {\n    if (!packet) {\n      this.debug(`Received broken packet: '${packet}'.`);\n      return;\n    }\n\n    switch (packet.t) {\n      case WSEvents.READY:\n        /**\n         * Emitted when the shard receives the READY payload and is now waiting for guilds\n         * @event WebSocketShard#ready\n         */\n        this.emit(ShardEvents.READY);\n\n        this.sessionID = packet.d.session_id;\n        this.expectedGuilds = new Set(packet.d.guilds.map(d => d.id));\n        this.status = Status.WAITING_FOR_GUILDS;\n        this.debug(`[READY] Session ${this.sessionID}.`);\n        this.lastHeartbeatAcked = true;\n        this.sendHeartbeat('ReadyHeartbeat');\n        break;\n      case WSEvents.RESUMED: {\n        /**\n         * Emitted when the shard resumes successfully\n         * @event WebSocketShard#resumed\n         */\n        this.emit(ShardEvents.RESUMED);\n\n        this.status = Status.READY;\n        const replayed = packet.s - this.closeSequence;\n        this.debug(`[RESUMED] Session ${this.sessionID} | Replayed ${replayed} events.`);\n        this.lastHeartbeatAcked = true;\n        this.sendHeartbeat('ResumeHeartbeat');\n        break;\n      }\n    }\n\n    if (packet.s > this.sequence) this.sequence = packet.s;\n\n    switch (packet.op) {\n      case OPCodes.HELLO:\n        this.setHelloTimeout(-1);\n        this.setHeartbeatTimer(packet.d.heartbeat_interval);\n        this.identify();\n        break;\n      case OPCodes.RECONNECT:\n        this.debug('[RECONNECT] Discord asked us to reconnect');\n        this.destroy({ closeCode: 4000 });\n        break;\n      case OPCodes.INVALID_SESSION:\n        this.debug(`[INVALID SESSION] Resumable: ${packet.d}.`);\n        // If we can resume the session, do so immediately\n        if (packet.d) {\n          this.identifyResume();\n          return;\n        }\n        // Reset the sequence\n        this.sequence = -1;\n        // Reset the session ID as it's invalid\n        this.sessionID = undefined;\n        // Set the status to reconnecting\n        this.status = Status.RECONNECTING;\n        // Finally, emit the INVALID_SESSION event\n        this.emit(ShardEvents.INVALID_SESSION);\n        break;\n      case OPCodes.HEARTBEAT_ACK:\n        this.ackHeartbeat();\n        break;\n      case OPCodes.HEARTBEAT:\n        this.sendHeartbeat('HeartbeatRequest', true);\n        break;\n      default:\n        this.manager.handlePacket(packet, this);\n        if (this.status === Status.WAITING_FOR_GUILDS && packet.t === WSEvents.GUILD_CREATE) {\n          this.expectedGuilds.delete(packet.d.id);\n          this.checkReady();\n        }\n    }\n  }\n\n  /**\n   * Checks if the shard can be marked as ready\n   * @private\n   */\n  checkReady() {\n    // Step 0. Clear the ready timeout, if it exists\n    if (this.readyTimeout) {\n      this.manager.client.clearTimeout(this.readyTimeout);\n      this.readyTimeout = undefined;\n    }\n    // Step 1. If we don't have any other guilds pending, we are ready\n    if (!this.expectedGuilds.size) {\n      this.debug('Shard received all its guilds. Marking as fully ready.');\n      this.status = Status.READY;\n\n      /**\n       * Emitted when the shard is fully ready.\n       * This event is emitted if:\n       * * all guilds were received by this shard\n       * * the ready timeout expired, and some guilds are unavailable\n       * @event WebSocketShard#allReady\n       * @param {?Set<string>} unavailableGuilds Set of unavailable guilds, if any\n       */\n      this.emit(ShardEvents.ALL_READY);\n      return;\n    }\n    // Step 2. Create a 15s timeout that will mark the shard as ready if there are still unavailable guilds\n    this.readyTimeout = this.manager.client.setTimeout(() => {\n      this.debug(`Shard did not receive any more guild packets in 15 seconds.\n  Unavailable guild count: ${this.expectedGuilds.size}`);\n\n      this.readyTimeout = undefined;\n\n      this.status = Status.READY;\n\n      this.emit(ShardEvents.ALL_READY, this.expectedGuilds);\n    }, 15000);\n  }\n\n  /**\n   * Sets the HELLO packet timeout.\n   * @param {number} [time] If set to -1, it will clear the hello timeout timeout\n   * @private\n   */\n  setHelloTimeout(time) {\n    if (time === -1) {\n      if (this.helloTimeout) {\n        this.debug('Clearing the HELLO timeout.');\n        this.manager.client.clearTimeout(this.helloTimeout);\n        this.helloTimeout = undefined;\n      }\n      return;\n    }\n    this.debug('Setting a HELLO timeout for 20s.');\n    this.helloTimeout = this.manager.client.setTimeout(() => {\n      this.debug('Did not receive HELLO in time. Destroying and connecting again.');\n      this.destroy({ reset: true, closeCode: 4009 });\n    }, 20000);\n  }\n\n  /**\n   * Sets the heartbeat timer for this shard.\n   * @param {number} time If -1, clears the interval, any other number sets an interval\n   * @private\n   */\n  setHeartbeatTimer(time) {\n    if (time === -1) {\n      if (this.heartbeatInterval) {\n        this.debug('Clearing the heartbeat interval.');\n        this.manager.client.clearInterval(this.heartbeatInterval);\n        this.heartbeatInterval = undefined;\n      }\n      return;\n    }\n    this.debug(`Setting a heartbeat interval for ${time}ms.`);\n    // Sanity checks\n    if (this.heartbeatInterval) this.manager.client.clearInterval(this.heartbeatInterval);\n    this.heartbeatInterval = this.manager.client.setInterval(() => this.sendHeartbeat(), time);\n  }\n\n  /**\n   * Sends a heartbeat to the WebSocket.\n   * If this shard didn't receive a heartbeat last time, it will destroy it and reconnect\n   * @param {string} [tag='HeartbeatTimer'] What caused this heartbeat to be sent\n   * @param {boolean} [ignoreHeartbeatAck] If we should send the heartbeat forcefully.\n   * @private\n   */\n  sendHeartbeat(\n    tag = 'HeartbeatTimer',\n    ignoreHeartbeatAck = [Status.WAITING_FOR_GUILDS, Status.IDENTIFYING, Status.RESUMING].includes(this.status),\n  ) {\n    if (ignoreHeartbeatAck && !this.lastHeartbeatAcked) {\n      this.debug(`[${tag}] Didn't process heartbeat ack yet but we are still connected. Sending one now.`);\n    } else if (!this.lastHeartbeatAcked) {\n      this.debug(\n        `[${tag}] Didn't receive a heartbeat ack last time, assuming zombie connection. Destroying and reconnecting.\n    Status          : ${STATUS_KEYS[this.status]}\n    Sequence        : ${this.sequence}\n    Connection State: ${this.connection ? CONNECTION_STATE[this.connection.readyState] : 'No Connection??'}`,\n      );\n\n      this.destroy({ closeCode: 4009, reset: true });\n      return;\n    }\n\n    this.debug(`[${tag}] Sending a heartbeat.`);\n    this.lastHeartbeatAcked = false;\n    this.lastPingTimestamp = Date.now();\n    this.send({ op: OPCodes.HEARTBEAT, d: this.sequence }, true);\n  }\n\n  /**\n   * Acknowledges a heartbeat.\n   * @private\n   */\n  ackHeartbeat() {\n    this.lastHeartbeatAcked = true;\n    const latency = Date.now() - this.lastPingTimestamp;\n    this.debug(`Heartbeat acknowledged, latency of ${latency}ms.`);\n    this.ping = latency;\n  }\n\n  /**\n   * Identifies the client on the connection.\n   * @private\n   * @returns {void}\n   */\n  identify() {\n    return this.sessionID ? this.identifyResume() : this.identifyNew();\n  }\n\n  /**\n   * Identifies as a new connection on the gateway.\n   * @private\n   */\n  identifyNew() {\n    const { client } = this.manager;\n    if (!client.token) {\n      this.debug('[IDENTIFY] No token available to identify a new session.');\n      return;\n    }\n\n    this.status = Status.IDENTIFYING;\n\n    // Clone the identify payload and assign the token and shard info\n    const d = {\n      ...client.options.ws,\n      token: client.token,\n      shard: [this.id, Number(client.options.shardCount)],\n    };\n\n    this.debug(`[IDENTIFY] Shard ${this.id}/${client.options.shardCount}`);\n    this.send({ op: OPCodes.IDENTIFY, d }, true);\n  }\n\n  /**\n   * Resumes a session on the gateway.\n   * @private\n   */\n  identifyResume() {\n    if (!this.sessionID) {\n      this.debug('[RESUME] No session ID was present; identifying as a new session.');\n      this.identifyNew();\n      return;\n    }\n\n    this.status = Status.RESUMING;\n\n    this.debug(`[RESUME] Session ${this.sessionID}, sequence ${this.closeSequence}`);\n\n    const d = {\n      token: this.manager.client.token,\n      session_id: this.sessionID,\n      seq: this.closeSequence,\n    };\n\n    this.send({ op: OPCodes.RESUME, d }, true);\n  }\n\n  /**\n   * Adds a packet to the queue to be sent to the gateway.\n   * <warn>If you use this method, make sure you understand that you need to provide\n   * a full [Payload](https://discordapp.com/developers/docs/topics/gateway#commands-and-events-gateway-commands).\n   * Do not use this method if you don't know what you're doing.</warn>\n   * @param {Object} data The full packet to send\n   * @param {boolean} [important=false] If this packet should be added first in queue\n   */\n  send(data, important = false) {\n    this.ratelimit.queue[important ? 'unshift' : 'push'](data);\n    this.processQueue();\n  }\n\n  /**\n   * Sends data, bypassing the queue.\n   * @param {Object} data Packet to send\n   * @returns {void}\n   * @private\n   */\n  _send(data) {\n    if (!this.connection || this.connection.readyState !== WebSocket.OPEN) {\n      this.debug(`Tried to send packet '${JSON.stringify(data)}' but no WebSocket is available!`);\n      this.destroy({ close: 4000 });\n      return;\n    }\n\n    this.connection.send(WebSocket.pack(data), err => {\n      if (err) this.manager.client.emit(Events.SHARD_ERROR, err, this.id);\n    });\n  }\n\n  /**\n   * Processes the current WebSocket queue.\n   * @returns {void}\n   * @private\n   */\n  processQueue() {\n    if (this.ratelimit.remaining === 0) return;\n    if (this.ratelimit.queue.length === 0) return;\n    if (this.ratelimit.remaining === this.ratelimit.total) {\n      this.ratelimit.timer = this.manager.client.setTimeout(() => {\n        this.ratelimit.remaining = this.ratelimit.total;\n        this.processQueue();\n      }, this.ratelimit.time);\n    }\n    while (this.ratelimit.remaining > 0) {\n      const item = this.ratelimit.queue.shift();\n      if (!item) return;\n      this._send(item);\n      this.ratelimit.remaining--;\n    }\n  }\n\n  /**\n   * Destroys this shard and closes its WebSocket connection.\n   * @param {Object} [options={ closeCode: 1000, reset: false, emit: true, log: true }] Options for destroying the shard\n   * @private\n   */\n  destroy({ closeCode = 1000, reset = false, emit = true, log = true } = {}) {\n    if (log) {\n      this.debug(`[DESTROY]\n    Close Code    : ${closeCode}\n    Reset         : ${reset}\n    Emit DESTROYED: ${emit}`);\n    }\n\n    // Step 0: Remove all timers\n    this.setHeartbeatTimer(-1);\n    this.setHelloTimeout(-1);\n\n    // Step 1: Close the WebSocket connection, if any, otherwise, emit DESTROYED\n    if (this.connection) {\n      // If the connection is currently opened, we will (hopefully) receive close\n      if (this.connection.readyState === WebSocket.OPEN) {\n        this.connection.close(closeCode);\n      } else {\n        // Connection is not OPEN\n        this.debug(`WS State: ${CONNECTION_STATE[this.connection.readyState]}`);\n        // Remove listeners from the connection\n        this._cleanupConnection();\n        // Attempt to close the connection just in case\n        try {\n          this.connection.close(closeCode);\n        } catch {\n          // No-op\n        }\n        // Emit the destroyed event if needed\n        if (emit) this._emitDestroyed();\n      }\n    } else if (emit) {\n      // We requested a destroy, but we had no connection. Emit destroyed\n      this._emitDestroyed();\n    }\n\n    // Step 2: Null the connection object\n    this.connection = null;\n\n    // Step 3: Set the shard status to DISCONNECTED\n    this.status = Status.DISCONNECTED;\n\n    // Step 4: Cache the old sequence (use to attempt a resume)\n    if (this.sequence !== -1) this.closeSequence = this.sequence;\n\n    // Step 5: Reset the sequence and session ID if requested\n    if (reset) {\n      this.sequence = -1;\n      this.sessionID = undefined;\n    }\n\n    // Step 6: reset the ratelimit data\n    this.ratelimit.remaining = this.ratelimit.total;\n    this.ratelimit.queue.length = 0;\n    if (this.ratelimit.timer) {\n      this.manager.client.clearTimeout(this.ratelimit.timer);\n      this.ratelimit.timer = null;\n    }\n  }\n\n  /**\n   * Cleans up the WebSocket connection listeners.\n   * @private\n   */\n  _cleanupConnection() {\n    this.connection.onopen = this.connection.onclose = this.connection.onerror = this.connection.onmessage = null;\n  }\n\n  /**\n   * Emits the DESTROYED event on the shard\n   * @private\n   */\n  _emitDestroyed() {\n    /**\n     * Emitted when a shard is destroyed, but no WebSocket connection was present.\n     * @private\n     * @event WebSocketShard#destroyed\n     */\n    this.emit(ShardEvents.DESTROYED);\n  }\n}\n\nmodule.exports = WebSocketShard;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/WebSocketShard.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers sync recursive ^\\.\\/.*\\.js$":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers sync ^\.\/.*\.js$ ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./CHANNEL_CREATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_CREATE.js\",\n\t\"./CHANNEL_DELETE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_DELETE.js\",\n\t\"./CHANNEL_PINS_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_PINS_UPDATE.js\",\n\t\"./CHANNEL_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_UPDATE.js\",\n\t\"./GUILD_BAN_ADD.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_BAN_ADD.js\",\n\t\"./GUILD_BAN_REMOVE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_BAN_REMOVE.js\",\n\t\"./GUILD_CREATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_CREATE.js\",\n\t\"./GUILD_DELETE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_DELETE.js\",\n\t\"./GUILD_EMOJIS_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_EMOJIS_UPDATE.js\",\n\t\"./GUILD_INTEGRATIONS_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_INTEGRATIONS_UPDATE.js\",\n\t\"./GUILD_MEMBERS_CHUNK.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBERS_CHUNK.js\",\n\t\"./GUILD_MEMBER_ADD.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_ADD.js\",\n\t\"./GUILD_MEMBER_REMOVE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_REMOVE.js\",\n\t\"./GUILD_MEMBER_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_UPDATE.js\",\n\t\"./GUILD_ROLE_CREATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_CREATE.js\",\n\t\"./GUILD_ROLE_DELETE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_DELETE.js\",\n\t\"./GUILD_ROLE_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_UPDATE.js\",\n\t\"./GUILD_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/GUILD_UPDATE.js\",\n\t\"./INVITE_CREATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/INVITE_CREATE.js\",\n\t\"./INVITE_DELETE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/INVITE_DELETE.js\",\n\t\"./MESSAGE_CREATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_CREATE.js\",\n\t\"./MESSAGE_DELETE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_DELETE.js\",\n\t\"./MESSAGE_DELETE_BULK.js\": \"./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_DELETE_BULK.js\",\n\t\"./MESSAGE_REACTION_ADD.js\": \"./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_ADD.js\",\n\t\"./MESSAGE_REACTION_REMOVE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE.js\",\n\t\"./MESSAGE_REACTION_REMOVE_ALL.js\": \"./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE_ALL.js\",\n\t\"./MESSAGE_REACTION_REMOVE_EMOJI.js\": \"./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE_EMOJI.js\",\n\t\"./MESSAGE_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_UPDATE.js\",\n\t\"./PRESENCE_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/PRESENCE_UPDATE.js\",\n\t\"./READY.js\": \"./node_modules/discord.js/src/client/websocket/handlers/READY.js\",\n\t\"./RESUMED.js\": \"./node_modules/discord.js/src/client/websocket/handlers/RESUMED.js\",\n\t\"./TYPING_START.js\": \"./node_modules/discord.js/src/client/websocket/handlers/TYPING_START.js\",\n\t\"./USER_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/USER_UPDATE.js\",\n\t\"./VOICE_SERVER_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/VOICE_SERVER_UPDATE.js\",\n\t\"./VOICE_STATE_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/VOICE_STATE_UPDATE.js\",\n\t\"./WEBHOOKS_UPDATE.js\": \"./node_modules/discord.js/src/client/websocket/handlers/WEBHOOKS_UPDATE.js\",\n\t\"./index.js\": \"./node_modules/discord.js/src/client/websocket/handlers/index.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/discord.js/src/client/websocket/handlers sync recursive ^\\\\.\\\\/.*\\\\.js$\";\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers_sync_^\\.\\/.*\\.js$?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_CREATE.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_CREATE.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.ChannelCreate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_CREATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_DELETE.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_DELETE.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.ChannelDelete.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_DELETE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_PINS_UPDATE.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_PINS_UPDATE.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, { d: data }) => {\n  const channel = client.channels.cache.get(data.channel_id);\n  const time = new Date(data.last_pin_timestamp);\n\n  if (channel && !Number.isNaN(time.getTime())) {\n    // Discord sends null for last_pin_timestamp if the last pinned message was removed\n    channel.lastPinTimestamp = time.getTime() || null;\n\n    /**\n     * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\n     * not much information can be provided easily here - you need to manually check the pins yourself.\n     * @event Client#channelPinsUpdate\n     * @param {DMChannel|TextChannel} channel The channel that the pins update occurred in\n     * @param {Date} time The time of the pins update\n     */\n    client.emit(Events.CHANNEL_PINS_UPDATE, channel, time);\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_PINS_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_UPDATE.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_UPDATE.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, packet) => {\n  const { old, updated } = client.actions.ChannelUpdate.handle(packet.d);\n  if (old && updated) {\n    /**\n     * Emitted whenever a channel is updated - e.g. name change, topic change, channel type change.\n     * @event Client#channelUpdate\n     * @param {DMChannel|GuildChannel} oldChannel The channel before the update\n     * @param {DMChannel|GuildChannel} newChannel The channel after the update\n     */\n    client.emit(Events.CHANNEL_UPDATE, old, updated);\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/CHANNEL_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_BAN_ADD.js":
/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_BAN_ADD.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, { d: data }) => {\n  const guild = client.guilds.cache.get(data.guild_id);\n  const user = client.users.add(data.user);\n\n  /**\n   * Emitted whenever a member is banned from a guild.\n   * @event Client#guildBanAdd\n   * @param {Guild} guild The guild that the ban occurred in\n   * @param {User} user The user that was banned\n   */\n  if (guild && user) client.emit(Events.GUILD_BAN_ADD, guild, user);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_BAN_ADD.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_BAN_REMOVE.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_BAN_REMOVE.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildBanRemove.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_BAN_REMOVE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_CREATE.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_CREATE.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events, Status } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = async (client, { d: data }, shard) => {\n  let guild = client.guilds.cache.get(data.id);\n  if (guild) {\n    if (!guild.available && !data.unavailable) {\n      // A newly available guild\n      guild._patch(data);\n      // If the client was ready before and we had unavailable guilds, fetch them\n      if (client.ws.status === Status.READY && client.options.fetchAllMembers) {\n        await guild.members\n          .fetch()\n          .catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n    }\n  } else {\n    // A new guild\n    data.shardID = shard.id;\n    guild = client.guilds.add(data);\n    if (client.ws.status === Status.READY) {\n      /**\n       * Emitted whenever the client joins a guild.\n       * @event Client#guildCreate\n       * @param {Guild} guild The created guild\n       */\n      if (client.options.fetchAllMembers) {\n        await guild.members\n          .fetch()\n          .catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n      client.emit(Events.GUILD_CREATE, guild);\n    }\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_CREATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_DELETE.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_DELETE.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildDelete.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_DELETE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_EMOJIS_UPDATE.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_EMOJIS_UPDATE.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildEmojisUpdate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_EMOJIS_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_INTEGRATIONS_UPDATE.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_INTEGRATIONS_UPDATE.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildIntegrationsUpdate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_INTEGRATIONS_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBERS_CHUNK.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBERS_CHUNK.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Collection = __webpack_require__(/*! ../../../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { Events } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, { d: data }) => {\n  const guild = client.guilds.cache.get(data.guild_id);\n  if (!guild) return;\n  const members = new Collection();\n\n  for (const member of data.members) members.set(member.user.id, guild.members.add(member));\n  if (data.presences) {\n    for (const presence of data.presences) guild.presences.cache.add(Object.assign(presence, { guild }));\n  }\n  /**\n   * Emitted whenever a chunk of guild members is received (all members come from the same guild).\n   * @event Client#guildMembersChunk\n   * @param {Collection<Snowflake, GuildMember>} members The members in the chunk\n   * @param {Guild} guild The guild related to the member chunk\n   */\n  client.emit(Events.GUILD_MEMBERS_CHUNK, members, guild);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBERS_CHUNK.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_ADD.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_ADD.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events, Status } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, { d: data }, shard) => {\n  const guild = client.guilds.cache.get(data.guild_id);\n  if (guild) {\n    guild.memberCount++;\n    const member = guild.members.add(data);\n    if (shard.status === Status.READY) {\n      /**\n       * Emitted whenever a user joins a guild.\n       * @event Client#guildMemberAdd\n       * @param {GuildMember} member The member that has joined a guild\n       */\n      client.emit(Events.GUILD_MEMBER_ADD, member);\n    }\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_ADD.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_REMOVE.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_REMOVE.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet, shard) => {\n  client.actions.GuildMemberRemove.handle(packet.d, shard);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_REMOVE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_UPDATE.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_UPDATE.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Status, Events } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, { d: data }, shard) => {\n  const guild = client.guilds.cache.get(data.guild_id);\n  if (guild) {\n    const member = guild.members.cache.get(data.user.id);\n    if (member) {\n      const old = member._update(data);\n      if (shard.status === Status.READY) {\n        /**\n         * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.\n         * @event Client#guildMemberUpdate\n         * @param {GuildMember} oldMember The member before the update\n         * @param {GuildMember} newMember The member after the update\n         */\n        client.emit(Events.GUILD_MEMBER_UPDATE, old, member);\n      }\n    }\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBER_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_CREATE.js":
/*!************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_CREATE.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildRoleCreate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_CREATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_DELETE.js":
/*!************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_DELETE.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildRoleDelete.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_DELETE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_UPDATE.js":
/*!************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_UPDATE.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildRoleUpdate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_ROLE_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/GUILD_UPDATE.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/GUILD_UPDATE.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildUpdate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/GUILD_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/INVITE_CREATE.js":
/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/INVITE_CREATE.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.InviteCreate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/INVITE_CREATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/INVITE_DELETE.js":
/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/INVITE_DELETE.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.InviteDelete.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/INVITE_DELETE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_CREATE.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_CREATE.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageCreate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_CREATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_DELETE.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_DELETE.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageDelete.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_DELETE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_DELETE_BULK.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_DELETE_BULK.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageDeleteBulk.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_DELETE_BULK.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_ADD.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_ADD.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageReactionAdd.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_ADD.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageReactionRemove.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE_ALL.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE_ALL.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageReactionRemoveAll.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE_ALL.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE_EMOJI.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE_EMOJI.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageReactionRemoveEmoji.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_REACTION_REMOVE_EMOJI.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_UPDATE.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_UPDATE.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, packet) => {\n  const { old, updated } = client.actions.MessageUpdate.handle(packet.d);\n  if (old && updated) {\n    /**\n     * Emitted whenever a message is updated - e.g. embed or content change.\n     * @event Client#messageUpdate\n     * @param {Message} oldMessage The message before the update\n     * @param {Message} newMessage The message after the update\n     */\n    client.emit(Events.MESSAGE_UPDATE, old, updated);\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/MESSAGE_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/PRESENCE_UPDATE.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/PRESENCE_UPDATE.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.PresenceUpdate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/PRESENCE_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/READY.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/READY.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nlet ClientUser;\n\nmodule.exports = (client, { d: data }, shard) => {\n  if (client.user) {\n    client.user._patch(data.user);\n  } else {\n    if (!ClientUser) ClientUser = __webpack_require__(/*! ../../../structures/ClientUser */ \"./node_modules/discord.js/src/structures/ClientUser.js\");\n    const clientUser = new ClientUser(client, data.user);\n    client.user = clientUser;\n    client.users.cache.set(clientUser.id, clientUser);\n  }\n\n  for (const guild of data.guilds) {\n    guild.shardID = shard.id;\n    client.guilds.add(guild);\n  }\n\n  shard.checkReady();\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/READY.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/RESUMED.js":
/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/RESUMED.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, packet, shard) => {\n  const replayed = shard.sequence - shard.closeSequence;\n  /**\n   * Emitted when a shard resumes successfully.\n   * @event Client#shardResume\n   * @param {number} id The shard ID that resumed\n   * @param {number} replayedEvents The amount of replayed events\n   */\n  client.emit(Events.SHARD_RESUME, shard.id, replayed);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/RESUMED.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/TYPING_START.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/TYPING_START.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nmodule.exports = (client, { d: data }) => {\n  const channel = client.channels.cache.get(data.channel_id);\n  const user = client.users.cache.get(data.user_id);\n  const timestamp = new Date(data.timestamp * 1000);\n\n  if (channel && user) {\n    if (channel.type === 'voice') {\n      client.emit(Events.WARN, `Discord sent a typing packet to a voice channel ${channel.id}`);\n      return;\n    }\n\n    if (channel._typing.has(user.id)) {\n      const typing = channel._typing.get(user.id);\n\n      typing.lastTimestamp = timestamp;\n      typing.elapsedTime = Date.now() - typing.since;\n      client.clearTimeout(typing.timeout);\n      typing.timeout = tooLate(channel, user);\n    } else {\n      const since = new Date();\n      const lastTimestamp = new Date();\n      channel._typing.set(user.id, {\n        user,\n        since,\n        lastTimestamp,\n        elapsedTime: Date.now() - since,\n        timeout: tooLate(channel, user),\n      });\n\n      /**\n       * Emitted whenever a user starts typing in a channel.\n       * @event Client#typingStart\n       * @param {Channel} channel The channel the user started typing in\n       * @param {User} user The user that started typing\n       */\n      client.emit(Events.TYPING_START, channel, user);\n    }\n  }\n};\n\nfunction tooLate(channel, user) {\n  return channel.client.setTimeout(() => {\n    channel._typing.delete(user.id);\n  }, 10000);\n}\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/TYPING_START.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/USER_UPDATE.js":
/*!******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/USER_UPDATE.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.UserUpdate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/USER_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/VOICE_SERVER_UPDATE.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/VOICE_SERVER_UPDATE.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.emit('debug', `[VOICE] received voice server: ${JSON.stringify(packet)}`);\n  client.voice.onVoiceServer(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/VOICE_SERVER_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/VOICE_STATE_UPDATE.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/VOICE_STATE_UPDATE.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.VoiceStateUpdate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/VOICE_STATE_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/WEBHOOKS_UPDATE.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/WEBHOOKS_UPDATE.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (client, packet) => {\n  client.actions.WebhooksUpdate.handle(packet.d);\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/WEBHOOKS_UPDATE.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/client/websocket/handlers/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/handlers/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { WSEvents } = __webpack_require__(/*! ../../../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nconst handlers = {};\n\nfor (const name of Object.keys(WSEvents)) {\n  try {\n    handlers[name] = __webpack_require__(\"./node_modules/discord.js/src/client/websocket/handlers sync recursive ^\\\\.\\\\/.*\\\\.js$\")(`./${name}.js`);\n  } catch {} // eslint-disable-line no-empty\n}\n\nmodule.exports = handlers;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/client/websocket/handlers/index.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/errors/DJSError.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/errors/DJSError.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// Heavily inspired by node's `internal/errors` module\n\nconst kCode = Symbol('code');\nconst messages = new Map();\n\n/**\n * Extend an error of some sort into a DiscordjsError.\n * @param {Error} Base Base error to extend\n * @returns {DiscordjsError}\n */\nfunction makeDiscordjsError(Base) {\n  return class DiscordjsError extends Base {\n    constructor(key, ...args) {\n      super(message(key, args));\n      this[kCode] = key;\n      if (Error.captureStackTrace) Error.captureStackTrace(this, DiscordjsError);\n    }\n\n    get name() {\n      return `${super.name} [${this[kCode]}]`;\n    }\n\n    get code() {\n      return this[kCode];\n    }\n  };\n}\n\n/**\n * Format the message for an error.\n * @param {string} key Error key\n * @param {Array<*>} args Arguments to pass for util format or as function args\n * @returns {string} Formatted string\n */\nfunction message(key, args) {\n  if (typeof key !== 'string') throw new Error('Error message key must be a string');\n  const msg = messages.get(key);\n  if (!msg) throw new Error(`An invalid error message key was used: ${key}.`);\n  if (typeof msg === 'function') return msg(...args);\n  if (args === undefined || args.length === 0) return msg;\n  args.unshift(msg);\n  return String(...args);\n}\n\n/**\n * Register an error code and message.\n * @param {string} sym Unique name for the error\n * @param {*} val Value of the error\n */\nfunction register(sym, val) {\n  messages.set(sym, typeof val === 'function' ? val : String(val));\n}\n\nmodule.exports = {\n  register,\n  Error: makeDiscordjsError(Error),\n  TypeError: makeDiscordjsError(TypeError),\n  RangeError: makeDiscordjsError(RangeError),\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/errors/DJSError.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/errors/Messages.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/errors/Messages.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { register } = __webpack_require__(/*! ./DJSError */ \"./node_modules/discord.js/src/errors/DJSError.js\");\n\nconst Messages = {\n  CLIENT_INVALID_OPTION: (prop, must) => `The ${prop} option must be ${must}`,\n  CLIENT_INVALID_PROVIDED_SHARDS: 'None of the provided shards were valid.',\n\n  TOKEN_INVALID: 'An invalid token was provided.',\n  TOKEN_MISSING: 'Request to use token, but token was unavailable to the client.',\n\n  WS_CLOSE_REQUESTED: 'WebSocket closed due to user request.',\n  WS_CONNECTION_EXISTS: 'There is already an existing WebSocket connection.',\n  WS_NOT_OPEN: (data = 'data') => `Websocket not open to send ${data}`,\n\n  BITFIELD_INVALID: 'Invalid bitfield flag or number.',\n\n  SHARDING_INVALID: 'Invalid shard settings were provided.',\n  SHARDING_REQUIRED: 'This session would have handled too many guilds - Sharding is required.',\n  INVALID_INTENTS: 'Invalid intent provided for WebSocket intents.',\n  DISALLOWED_INTENTS: 'Privileged intent provided is not enabled or whitelisted.',\n  SHARDING_NO_SHARDS: 'No shards have been spawned.',\n  SHARDING_IN_PROCESS: 'Shards are still being spawned.',\n  SHARDING_ALREADY_SPAWNED: count => `Already spawned ${count} shards.`,\n  SHARDING_PROCESS_EXISTS: id => `Shard ${id} already has an active process.`,\n  SHARDING_READY_TIMEOUT: id => `Shard ${id}'s Client took too long to become ready.`,\n  SHARDING_READY_DISCONNECTED: id => `Shard ${id}'s Client disconnected before becoming ready.`,\n  SHARDING_READY_DIED: id => `Shard ${id}'s process exited before its Client became ready.`,\n\n  COLOR_RANGE: 'Color must be within the range 0 - 16777215 (0xFFFFFF).',\n  COLOR_CONVERT: 'Unable to convert color to a number.',\n\n  EMBED_FIELD_NAME: 'MessageEmbed field names may not be empty.',\n  EMBED_FIELD_VALUE: 'MessageEmbed field values may not be empty.',\n\n  FILE_NOT_FOUND: file => `File could not be found: ${file}`,\n\n  USER_NO_DMCHANNEL: 'No DM Channel exists!',\n\n  VOICE_INVALID_HEARTBEAT: 'Tried to set voice heartbeat but no valid interval was specified.',\n  VOICE_USER_MISSING: \"Couldn't resolve the user to create stream.\",\n  VOICE_JOIN_CHANNEL: (full = false) =>\n    `You do not have permission to join this voice channel${full ? '; it is full.' : '.'}`,\n  VOICE_CONNECTION_TIMEOUT: 'Connection not established within 15 seconds.',\n  VOICE_TOKEN_ABSENT: 'Token not provided from voice server packet.',\n  VOICE_SESSION_ABSENT: 'Session ID not supplied.',\n  VOICE_INVALID_ENDPOINT: 'Invalid endpoint received.',\n  VOICE_NO_BROWSER: 'Voice connections are not available in browsers.',\n  VOICE_CONNECTION_ATTEMPTS_EXCEEDED: attempts => `Too many connection attempts (${attempts}).`,\n  VOICE_JOIN_SOCKET_CLOSED: 'Tried to send join packet, but the WebSocket is not open.',\n  VOICE_PLAY_INTERFACE_NO_BROADCAST: 'A broadcast cannot be played in this context.',\n  VOICE_PLAY_INTERFACE_BAD_TYPE: 'Unknown stream type',\n  VOICE_PRISM_DEMUXERS_NEED_STREAM: 'To play a webm/ogg stream, you need to pass a ReadableStream.',\n\n  VOICE_STATE_UNCACHED_MEMBER: 'The member of this voice state is uncached.',\n  VOICE_STATE_NOT_OWN: 'You cannot self-deafen/mute on VoiceStates that do not belong to the ClientUser.',\n  VOICE_STATE_INVALID_TYPE: name => `${name} must be a boolean.`,\n\n  UDP_SEND_FAIL: 'Tried to send a UDP packet, but there is no socket available.',\n  UDP_ADDRESS_MALFORMED: 'Malformed UDP address or port.',\n  UDP_CONNECTION_EXISTS: 'There is already an existing UDP connection.',\n\n  REQ_RESOURCE_TYPE: 'The resource must be a string, Buffer or a valid file stream.',\n\n  IMAGE_FORMAT: format => `Invalid image format: ${format}`,\n  IMAGE_SIZE: size => `Invalid image size: ${size}`,\n\n  MESSAGE_BULK_DELETE_TYPE: 'The messages must be an Array, Collection, or number.',\n  MESSAGE_NONCE_TYPE: 'Message nonce must fit in an unsigned 64-bit integer.',\n\n  TYPING_COUNT: 'Count must be at least 1',\n\n  SPLIT_MAX_LEN: 'Chunk exceeds the max length and contains no split characters.',\n\n  BAN_RESOLVE_ID: (ban = false) => `Couldn't resolve the user ID to ${ban ? 'ban' : 'unban'}.`,\n  FETCH_BAN_RESOLVE_ID: \"Couldn't resolve the user ID to fetch the ban.\",\n\n  PRUNE_DAYS_TYPE: 'Days must be a number',\n\n  GUILD_CHANNEL_RESOLVE: 'Could not resolve channel to a guild channel.',\n  GUILD_VOICE_CHANNEL_RESOLVE: 'Could not resolve channel to a guild voice channel.',\n  GUILD_CHANNEL_ORPHAN: 'Could not find a parent to this guild channel.',\n  GUILD_OWNED: 'Guild is owned by the client.',\n  GUILD_MEMBERS_TIMEOUT: \"Members didn't arrive in time.\",\n  GUILD_UNCACHED_ME: 'The client user as a member of this guild is uncached.',\n\n  INVALID_TYPE: (name, expected, an = false) => `Supplied ${name} is not a${an ? 'n' : ''} ${expected}.`,\n\n  WEBHOOK_MESSAGE: 'The message was not sent by a webhook.',\n\n  EMOJI_TYPE: 'Emoji must be a string or GuildEmoji/ReactionEmoji',\n  EMOJI_MANAGED: 'Emoji is managed and has no Author.',\n  MISSING_MANAGE_EMOJIS_PERMISSION: guild =>\n    `Client must have Manage Emoji permission in guild ${guild} to see emoji authors.`,\n\n  REACTION_RESOLVE_USER: \"Couldn't resolve the user ID to remove from the reaction.\",\n\n  VANITY_URL: 'This guild does not have the VANITY_URL feature enabled.',\n\n  DELETE_GROUP_DM_CHANNEL: \"Bots don't have access to Group DM Channels and cannot delete them\",\n  FETCH_GROUP_DM_CHANNEL: \"Bots don't have access to Group DM Channels and cannot fetch them\",\n};\n\nfor (const [name, message] of Object.entries(Messages)) register(name, message);\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/errors/Messages.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/errors/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/discord.js/src/errors/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(/*! ./DJSError */ \"./node_modules/discord.js/src/errors/DJSError.js\");\nmodule.exports.Messages = __webpack_require__(/*! ./Messages */ \"./node_modules/discord.js/src/errors/Messages.js\");\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/errors/index.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/discord.js/src/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Util = __webpack_require__(/*! ./util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\nmodule.exports = {\n  // \"Root\" classes (starting points)\n  BaseClient: __webpack_require__(/*! ./client/BaseClient */ \"./node_modules/discord.js/src/client/BaseClient.js\"),\n  Client: __webpack_require__(/*! ./client/Client */ \"./node_modules/discord.js/src/client/Client.js\"),\n  Shard: __webpack_require__(/*! ./sharding/Shard */ \"./node_modules/discord.js/src/sharding/Shard.js\"),\n  ShardClientUtil: __webpack_require__(/*! ./sharding/ShardClientUtil */ \"./node_modules/discord.js/src/sharding/ShardClientUtil.js\"),\n  ShardingManager: __webpack_require__(/*! ./sharding/ShardingManager */ \"./node_modules/discord.js/src/sharding/ShardingManager.js\"),\n  WebhookClient: __webpack_require__(/*! ./client/WebhookClient */ \"./node_modules/discord.js/src/client/WebhookClient.js\"),\n\n  // Utilities\n  ActivityFlags: __webpack_require__(/*! ./util/ActivityFlags */ \"./node_modules/discord.js/src/util/ActivityFlags.js\"),\n  BitField: __webpack_require__(/*! ./util/BitField */ \"./node_modules/discord.js/src/util/BitField.js\"),\n  Collection: __webpack_require__(/*! ./util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\"),\n  Constants: __webpack_require__(/*! ./util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\"),\n  DataResolver: __webpack_require__(/*! ./util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\"),\n  BaseManager: __webpack_require__(/*! ./managers/BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\"),\n  DiscordAPIError: __webpack_require__(/*! ./rest/DiscordAPIError */ \"./node_modules/discord.js/src/rest/DiscordAPIError.js\"),\n  HTTPError: __webpack_require__(/*! ./rest/HTTPError */ \"./node_modules/discord.js/src/rest/HTTPError.js\"),\n  MessageFlags: __webpack_require__(/*! ./util/MessageFlags */ \"./node_modules/discord.js/src/util/MessageFlags.js\"),\n  Intents: __webpack_require__(/*! ./util/Intents */ \"./node_modules/discord.js/src/util/Intents.js\"),\n  Permissions: __webpack_require__(/*! ./util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\"),\n  Speaking: __webpack_require__(/*! ./util/Speaking */ \"./node_modules/discord.js/src/util/Speaking.js\"),\n  Snowflake: __webpack_require__(/*! ./util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\"),\n  SnowflakeUtil: __webpack_require__(/*! ./util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\"),\n  Structures: __webpack_require__(/*! ./util/Structures */ \"./node_modules/discord.js/src/util/Structures.js\"),\n  SystemChannelFlags: __webpack_require__(/*! ./util/SystemChannelFlags */ \"./node_modules/discord.js/src/util/SystemChannelFlags.js\"),\n  UserFlags: __webpack_require__(/*! ./util/UserFlags */ \"./node_modules/discord.js/src/util/UserFlags.js\"),\n  Util: Util,\n  version: __webpack_require__(/*! ../package.json */ \"./node_modules/discord.js/package.json\").version,\n\n  // Managers\n  ChannelManager: __webpack_require__(/*! ./managers/ChannelManager */ \"./node_modules/discord.js/src/managers/ChannelManager.js\"),\n  GuildChannelManager: __webpack_require__(/*! ./managers/GuildChannelManager */ \"./node_modules/discord.js/src/managers/GuildChannelManager.js\"),\n  GuildEmojiManager: __webpack_require__(/*! ./managers/GuildEmojiManager */ \"./node_modules/discord.js/src/managers/GuildEmojiManager.js\"),\n  GuildEmojiRoleManager: __webpack_require__(/*! ./managers/GuildEmojiRoleManager */ \"./node_modules/discord.js/src/managers/GuildEmojiRoleManager.js\"),\n  GuildMemberManager: __webpack_require__(/*! ./managers/GuildMemberManager */ \"./node_modules/discord.js/src/managers/GuildMemberManager.js\"),\n  GuildMemberRoleManager: __webpack_require__(/*! ./managers/GuildMemberRoleManager */ \"./node_modules/discord.js/src/managers/GuildMemberRoleManager.js\"),\n  GuildManager: __webpack_require__(/*! ./managers/GuildManager */ \"./node_modules/discord.js/src/managers/GuildManager.js\"),\n  ReactionUserManager: __webpack_require__(/*! ./managers/ReactionUserManager */ \"./node_modules/discord.js/src/managers/ReactionUserManager.js\"),\n  MessageManager: __webpack_require__(/*! ./managers/MessageManager */ \"./node_modules/discord.js/src/managers/MessageManager.js\"),\n  PresenceManager: __webpack_require__(/*! ./managers/PresenceManager */ \"./node_modules/discord.js/src/managers/PresenceManager.js\"),\n  RoleManager: __webpack_require__(/*! ./managers/RoleManager */ \"./node_modules/discord.js/src/managers/RoleManager.js\"),\n  UserManager: __webpack_require__(/*! ./managers/UserManager */ \"./node_modules/discord.js/src/managers/UserManager.js\"),\n\n  // Shortcuts to Util methods\n  discordSort: Util.discordSort,\n  escapeMarkdown: Util.escapeMarkdown,\n  fetchRecommendedShards: Util.fetchRecommendedShards,\n  resolveColor: Util.resolveColor,\n  resolveString: Util.resolveString,\n  splitMessage: Util.splitMessage,\n\n  // Structures\n  Base: __webpack_require__(/*! ./structures/Base */ \"./node_modules/discord.js/src/structures/Base.js\"),\n  Activity: __webpack_require__(/*! ./structures/Presence */ \"./node_modules/discord.js/src/structures/Presence.js\").Activity,\n  APIMessage: __webpack_require__(/*! ./structures/APIMessage */ \"./node_modules/discord.js/src/structures/APIMessage.js\"),\n  BaseGuildEmoji: __webpack_require__(/*! ./structures/BaseGuildEmoji */ \"./node_modules/discord.js/src/structures/BaseGuildEmoji.js\"),\n  CategoryChannel: __webpack_require__(/*! ./structures/CategoryChannel */ \"./node_modules/discord.js/src/structures/CategoryChannel.js\"),\n  Channel: __webpack_require__(/*! ./structures/Channel */ \"./node_modules/discord.js/src/structures/Channel.js\"),\n  ClientApplication: __webpack_require__(/*! ./structures/ClientApplication */ \"./node_modules/discord.js/src/structures/ClientApplication.js\"),\n  get ClientUser() {\n    // This is a getter so that it properly extends any custom User class\n    return __webpack_require__(/*! ./structures/ClientUser */ \"./node_modules/discord.js/src/structures/ClientUser.js\");\n  },\n  Collector: __webpack_require__(/*! ./structures/interfaces/Collector */ \"./node_modules/discord.js/src/structures/interfaces/Collector.js\"),\n  DMChannel: __webpack_require__(/*! ./structures/DMChannel */ \"./node_modules/discord.js/src/structures/DMChannel.js\"),\n  Emoji: __webpack_require__(/*! ./structures/Emoji */ \"./node_modules/discord.js/src/structures/Emoji.js\"),\n  Guild: __webpack_require__(/*! ./structures/Guild */ \"./node_modules/discord.js/src/structures/Guild.js\"),\n  GuildAuditLogs: __webpack_require__(/*! ./structures/GuildAuditLogs */ \"./node_modules/discord.js/src/structures/GuildAuditLogs.js\"),\n  GuildChannel: __webpack_require__(/*! ./structures/GuildChannel */ \"./node_modules/discord.js/src/structures/GuildChannel.js\"),\n  GuildEmoji: __webpack_require__(/*! ./structures/GuildEmoji */ \"./node_modules/discord.js/src/structures/GuildEmoji.js\"),\n  GuildMember: __webpack_require__(/*! ./structures/GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\"),\n  GuildPreview: __webpack_require__(/*! ./structures/GuildPreview */ \"./node_modules/discord.js/src/structures/GuildPreview.js\"),\n  Integration: __webpack_require__(/*! ./structures/Integration */ \"./node_modules/discord.js/src/structures/Integration.js\"),\n  Invite: __webpack_require__(/*! ./structures/Invite */ \"./node_modules/discord.js/src/structures/Invite.js\"),\n  Message: __webpack_require__(/*! ./structures/Message */ \"./node_modules/discord.js/src/structures/Message.js\"),\n  MessageAttachment: __webpack_require__(/*! ./structures/MessageAttachment */ \"./node_modules/discord.js/src/structures/MessageAttachment.js\"),\n  MessageCollector: __webpack_require__(/*! ./structures/MessageCollector */ \"./node_modules/discord.js/src/structures/MessageCollector.js\"),\n  MessageEmbed: __webpack_require__(/*! ./structures/MessageEmbed */ \"./node_modules/discord.js/src/structures/MessageEmbed.js\"),\n  MessageMentions: __webpack_require__(/*! ./structures/MessageMentions */ \"./node_modules/discord.js/src/structures/MessageMentions.js\"),\n  MessageReaction: __webpack_require__(/*! ./structures/MessageReaction */ \"./node_modules/discord.js/src/structures/MessageReaction.js\"),\n  NewsChannel: __webpack_require__(/*! ./structures/NewsChannel */ \"./node_modules/discord.js/src/structures/NewsChannel.js\"),\n  PermissionOverwrites: __webpack_require__(/*! ./structures/PermissionOverwrites */ \"./node_modules/discord.js/src/structures/PermissionOverwrites.js\"),\n  Presence: __webpack_require__(/*! ./structures/Presence */ \"./node_modules/discord.js/src/structures/Presence.js\").Presence,\n  ClientPresence: __webpack_require__(/*! ./structures/ClientPresence */ \"./node_modules/discord.js/src/structures/ClientPresence.js\"),\n  ReactionCollector: __webpack_require__(/*! ./structures/ReactionCollector */ \"./node_modules/discord.js/src/structures/ReactionCollector.js\"),\n  ReactionEmoji: __webpack_require__(/*! ./structures/ReactionEmoji */ \"./node_modules/discord.js/src/structures/ReactionEmoji.js\"),\n  RichPresenceAssets: __webpack_require__(/*! ./structures/Presence */ \"./node_modules/discord.js/src/structures/Presence.js\").RichPresenceAssets,\n  Role: __webpack_require__(/*! ./structures/Role */ \"./node_modules/discord.js/src/structures/Role.js\"),\n  StoreChannel: __webpack_require__(/*! ./structures/StoreChannel */ \"./node_modules/discord.js/src/structures/StoreChannel.js\"),\n  Team: __webpack_require__(/*! ./structures/Team */ \"./node_modules/discord.js/src/structures/Team.js\"),\n  TeamMember: __webpack_require__(/*! ./structures/TeamMember */ \"./node_modules/discord.js/src/structures/TeamMember.js\"),\n  TextChannel: __webpack_require__(/*! ./structures/TextChannel */ \"./node_modules/discord.js/src/structures/TextChannel.js\"),\n  User: __webpack_require__(/*! ./structures/User */ \"./node_modules/discord.js/src/structures/User.js\"),\n  VoiceChannel: __webpack_require__(/*! ./structures/VoiceChannel */ \"./node_modules/discord.js/src/structures/VoiceChannel.js\"),\n  VoiceRegion: __webpack_require__(/*! ./structures/VoiceRegion */ \"./node_modules/discord.js/src/structures/VoiceRegion.js\"),\n  VoiceState: __webpack_require__(/*! ./structures/VoiceState */ \"./node_modules/discord.js/src/structures/VoiceState.js\"),\n  Webhook: __webpack_require__(/*! ./structures/Webhook */ \"./node_modules/discord.js/src/structures/Webhook.js\"),\n\n  WebSocket: __webpack_require__(/*! ./WebSocket */ \"./node_modules/discord.js/src/WebSocket.js\"),\n};\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/index.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/BaseManager.js":
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/BaseManager.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nlet Structures;\n\n/**\n * Manages the API methods of a data model and holds its cache.\n * @abstract\n */\nclass BaseManager {\n  constructor(client, iterable, holds, cacheType = Collection, ...cacheOptions) {\n    if (!Structures) Structures = __webpack_require__(/*! ../util/Structures */ \"./node_modules/discord.js/src/util/Structures.js\");\n    /**\n     * The data structure belonging to this manager\n     * @name BaseManager#holds\n     * @type {Function}\n     * @private\n     * @readonly\n     */\n    Object.defineProperty(this, 'holds', { value: Structures.get(holds.name) || holds });\n\n    /**\n     * The client that instantiated this Manager\n     * @name BaseManager#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The type of Collection of the Manager\n     * @type {Collection}\n     */\n    this.cacheType = cacheType;\n\n    /**\n     * Holds the cache for the data model\n     * @type {Collection}\n     */\n    this.cache = new cacheType(...cacheOptions);\n    if (iterable) for (const i of iterable) this.add(i);\n  }\n\n  add(data, cache = true, { id, extras = [] } = {}) {\n    const existing = this.cache.get(id || data.id);\n    if (existing && existing._patch && cache) existing._patch(data);\n    if (existing) return existing;\n\n    const entry = this.holds ? new this.holds(this.client, data, ...extras) : data;\n    if (cache) this.cache.set(id || entry.id, entry);\n    return entry;\n  }\n\n  /**\n   * Resolves a data entry to a data Object.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Object} An instance from this Manager\n   */\n  resolve(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance;\n    if (typeof idOrInstance === 'string') return this.cache.get(idOrInstance) || null;\n    return null;\n  }\n\n  /**\n   * Resolves a data entry to a instance ID.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Snowflake}\n   */\n  resolveID(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance.id;\n    if (typeof idOrInstance === 'string') return idOrInstance;\n    return null;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n}\n\nmodule.exports = BaseManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/BaseManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/ChannelManager.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/ChannelManager.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst Channel = __webpack_require__(/*! ../structures/Channel */ \"./node_modules/discord.js/src/structures/Channel.js\");\nconst { Events } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * A manager of channels belonging to a client\n * @extends {BaseManager}\n */\nclass ChannelManager extends BaseManager {\n  constructor(client, iterable) {\n    super(client, iterable, Channel);\n  }\n\n  /**\n   * The cache of Channels\n   * @type {Collection<Snowflake, Channel>}\n   * @name ChannelManager#cache\n   */\n\n  add(data, guild, cache = true) {\n    const existing = this.cache.get(data.id);\n    if (existing) {\n      if (existing._patch && cache) existing._patch(data);\n      if (guild) guild.channels.add(existing);\n      return existing;\n    }\n\n    const channel = Channel.create(this.client, data, guild);\n\n    if (!channel) {\n      this.client.emit(Events.DEBUG, `Failed to find guild, or unknown type for channel ${data.id} ${data.type}`);\n      return null;\n    }\n\n    if (cache) this.cache.set(channel.id, channel);\n\n    return channel;\n  }\n\n  remove(id) {\n    const channel = this.cache.get(id);\n    if (channel.guild) channel.guild.channels.cache.delete(id);\n    this.cache.delete(id);\n  }\n\n  /**\n   * Data that can be resolved to give a Channel object. This can be:\n   * * A Channel object\n   * * A Snowflake\n   * @typedef {Channel|Snowflake} ChannelResolvable\n   */\n\n  /**\n   * Resolves a ChannelResolvable to a Channel object.\n   * @method resolve\n   * @memberof ChannelManager\n   * @instance\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?Channel}\n   */\n\n  /**\n   * Resolves a ChannelResolvable to a channel ID string.\n   * @method resolveID\n   * @memberof ChannelManager\n   * @instance\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Obtains a channel from Discord, or the channel cache if it's already available.\n   * @param {Snowflake} id ID of the channel\n   * @param {boolean} [cache=true] Whether to cache the new channel object if it isn't already\n   * @returns {Promise<Channel>}\n   * @example\n   * // Fetch a channel by its id\n   * client.channels.fetch('222109930545610754')\n   *   .then(channel => console.log(channel.name))\n   *   .catch(console.error);\n   */\n  async fetch(id, cache = true) {\n    const existing = this.cache.get(id);\n    if (existing && !existing.partial) return existing;\n\n    const data = await this.client.api.channels(id).get();\n    return this.add(data, null, cache);\n  }\n}\n\nmodule.exports = ChannelManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/ChannelManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/GuildChannelManager.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/GuildChannelManager.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst GuildChannel = __webpack_require__(/*! ../structures/GuildChannel */ \"./node_modules/discord.js/src/structures/GuildChannel.js\");\nconst PermissionOverwrites = __webpack_require__(/*! ../structures/PermissionOverwrites */ \"./node_modules/discord.js/src/structures/PermissionOverwrites.js\");\nconst { ChannelTypes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * Manages API methods for GuildChannels and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildChannelManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildChannel);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @name GuildChannelManager#cache\n   */\n\n  add(channel) {\n    const existing = this.cache.get(channel.id);\n    if (existing) return existing;\n    this.cache.set(channel.id, channel);\n    return channel;\n  }\n\n  /**\n   * Data that can be resolved to give a Guild Channel object. This can be:\n   * * A GuildChannel object\n   * * A Snowflake\n   * @typedef {GuildChannel|Snowflake} GuildChannelResolvable\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a Channel object.\n   * @method resolve\n   * @memberof GuildChannelManager\n   * @instance\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?Channel}\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a channel ID string.\n   * @method resolveID\n   * @memberof GuildChannelManager\n   * @instance\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Creates a new channel in the guild.\n   * @param {string} name The name of the new channel\n   * @param {Object} [options] Options\n   * @param {string} [options.type='text'] The type of the new channel, either `text`, `voice`, or `category`\n   * @param {string} [options.topic] The topic for the new channel\n   * @param {boolean} [options.nsfw] Whether the new channel is nsfw\n   * @param {number} [options.bitrate] Bitrate of the new channel in bits (only voice)\n   * @param {number} [options.userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @param {ChannelResolvable} [options.parent] Parent of the new channel\n   * @param {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [options.permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @param {number} [options.position] Position of the new channel\n   * @param {number} [options.rateLimitPerUser] The ratelimit per user for the channel\n   * @param {string} [options.reason] Reason for creating the channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Create a new text channel\n   * guild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new channel with permission overwrites\n   * guild.channels.create('new-voice', {\n   *   type: 'voice',\n   *   permissionOverwrites: [\n   *      {\n   *        id: message.author.id,\n   *        deny: ['VIEW_CHANNEL'],\n   *     },\n   *   ],\n   * })\n   */\n  async create(name, options = {}) {\n    let {\n      type,\n      topic,\n      nsfw,\n      bitrate,\n      userLimit,\n      parent,\n      permissionOverwrites,\n      position,\n      rateLimitPerUser,\n      reason,\n    } = options;\n    if (parent) parent = this.client.channels.resolveID(parent);\n    if (permissionOverwrites) {\n      permissionOverwrites = permissionOverwrites.map(o => PermissionOverwrites.resolve(o, this.guild));\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).channels.post({\n      data: {\n        name,\n        topic,\n        type: type ? ChannelTypes[type.toUpperCase()] : ChannelTypes.TEXT,\n        nsfw,\n        bitrate,\n        user_limit: userLimit,\n        parent_id: parent,\n        position,\n        permission_overwrites: permissionOverwrites,\n        rate_limit_per_user: rateLimitPerUser,\n      },\n      reason,\n    });\n    return this.client.actions.ChannelCreate.handle(data).channel;\n  }\n}\n\nmodule.exports = GuildChannelManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/GuildChannelManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/GuildEmojiManager.js":
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/GuildEmojiManager.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst { TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst GuildEmoji = __webpack_require__(/*! ../structures/GuildEmoji */ \"./node_modules/discord.js/src/structures/GuildEmoji.js\");\nconst ReactionEmoji = __webpack_require__(/*! ../structures/ReactionEmoji */ \"./node_modules/discord.js/src/structures/ReactionEmoji.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst DataResolver = __webpack_require__(/*! ../util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\");\n\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildEmojiManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildEmoji);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name GuildEmojiManager#cache\n   */\n\n  add(data, cache) {\n    return super.add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @param {string} name The name for the emoji\n   * @param {Object} [options] Options\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to limit the emoji to\n   * @param {string} [options.reason] Reason for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a url\n   * guild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.emojis.create('./memes/banana.png', 'banana')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n  async create(attachment, name, { roles, reason } = {}) {\n    attachment = await DataResolver.resolveImage(attachment);\n    if (!attachment) throw new TypeError('REQ_RESOURCE_TYPE');\n\n    const data = { image: attachment, name };\n    if (roles) {\n      data.roles = [];\n      for (let role of roles instanceof Collection ? roles.values() : roles) {\n        role = this.guild.roles.resolve(role);\n        if (!role) {\n          return Promise.reject(\n            new TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true),\n          );\n        }\n        data.roles.push(role.id);\n      }\n    }\n\n    return this.client.api\n      .guilds(this.guild.id)\n      .emojis.post({ data, reason })\n      .then(emoji => this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji);\n  }\n\n  /**\n   * Data that can be resolved into an GuildEmoji object. This can be:\n   * * A custom emoji ID\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji ID string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveID(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveID(emoji);\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      else return emoji;\n    }\n    return null;\n  }\n}\n\nmodule.exports = GuildEmojiManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/GuildEmojiManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/GuildEmojiRoleManager.js":
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/GuildEmojiRoleManager.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\n\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n */\nclass GuildEmojiRoleManager {\n  constructor(emoji) {\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = emoji.guild;\n    /**\n     * The client belonging to this manager\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: emoji.client });\n  }\n\n  /**\n   * The filtered collection of roles of the guild emoji\n   * @type {Collection<Snowflake, Role>}\n   * @private\n   * @readonly\n   */\n  get _roles() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this._roles;\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n  add(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.add(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.add([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolve(r));\n\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n\n    const newRoles = [...new Set(roleOrRoles.concat(...this._roles.values()))];\n    return this.set(newRoles);\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n  remove(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.remove(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.remove([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolveID(r));\n\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n\n    const newRoles = this._roles.keyArray().filter(role => !roleOrRoles.includes(role));\n    return this.set(newRoles);\n  }\n\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  set(roles) {\n    return this.emoji.edit({ roles });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.emoji);\n    clone._patch(this._roles.keyArray().slice());\n    return clone;\n  }\n\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n}\n\nmodule.exports = GuildEmojiRoleManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/GuildEmojiRoleManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/GuildManager.js":
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/GuildManager.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst Guild = __webpack_require__(/*! ../structures/Guild */ \"./node_modules/discord.js/src/structures/Guild.js\");\nconst GuildChannel = __webpack_require__(/*! ../structures/GuildChannel */ \"./node_modules/discord.js/src/structures/GuildChannel.js\");\nconst GuildEmoji = __webpack_require__(/*! ../structures/GuildEmoji */ \"./node_modules/discord.js/src/structures/GuildEmoji.js\");\nconst GuildMember = __webpack_require__(/*! ../structures/GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\");\nconst Invite = __webpack_require__(/*! ../structures/Invite */ \"./node_modules/discord.js/src/structures/Invite.js\");\nconst Role = __webpack_require__(/*! ../structures/Role */ \"./node_modules/discord.js/src/structures/Role.js\");\nconst {\n  Events,\n  VerificationLevels,\n  DefaultMessageNotifications,\n  ExplicitContentFilterLevels,\n} = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst DataResolver = __webpack_require__(/*! ../util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\nconst { resolveColor } = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Manages API methods for Guilds and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildManager extends BaseManager {\n  constructor(client, iterable) {\n    super(client, iterable, Guild);\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, Guild>}\n   * @name GuildManager#cache\n   */\n\n  /**\n   * Data that resolves to give a Guild object. This can be:\n   * * A Guild object\n   * * A GuildChannel object\n   * * A GuildEmoji object\n   * * A Role object\n   * * A Snowflake\n   * * An Invite object\n   * @typedef {Guild|GuildChannel|GuildMember|GuildEmoji|Role|Snowflake|Invite} GuildResolvable\n   */\n\n  /**\n   * Partial data for a Role.\n   * @typedef {Object} PartialRoleData\n   * @property {number} [id] The ID for this role, used to set channel overrides,\n   * this is a placeholder and will be replaced by the API after consumption\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable|number} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   */\n\n  /**\n   * Partial overwrite data.\n   * @typedef {Object} PartialOverwriteData\n   * @property {number|Snowflake} id The Role or User ID for this overwrite\n   * @property {string} [type] The type of this overwrite\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   */\n\n  /**\n   * Partial data for a Channel.\n   * @typedef {Object} PartialChannelData\n   * @property {number} [id] The ID for this channel, used to set its parent,\n   * this is a placeholder and will be replaced by the API after consumption\n   * @property {number} [parentID] The parent ID for this channel\n   * @property {string} [type] The type of the channel\n   * @property {string} name The name of the channel\n   * @property {string} [topic] The topic of the text channel\n   * @property {boolean} [nsfw] Whether the channel is NSFW\n   * @property {number} [bitrate] The bitrate of the voice channel\n   * @property {number} [userLimit] The user limit of the channel\n   * @property {PartialOverwriteData} [permissionOverwrites]\n   * Overwrites of the channel\n   * @property {number} [rateLimitPerUser] The rate limit per user of the channel in seconds\n   */\n\n  /**\n   * Resolves a GuildResolvable to a Guild object.\n   * @method resolve\n   * @memberof GuildManager\n   * @instance\n   * @param {GuildResolvable} guild The guild resolvable to identify\n   * @returns {?Guild}\n   */\n  resolve(guild) {\n    if (\n      guild instanceof GuildChannel ||\n      guild instanceof GuildMember ||\n      guild instanceof GuildEmoji ||\n      guild instanceof Role ||\n      (guild instanceof Invite && guild.guild)\n    ) {\n      return super.resolve(guild.guild);\n    }\n    return super.resolve(guild);\n  }\n\n  /**\n   * Resolves a GuildResolvable to a Guild ID string.\n   * @method resolveID\n   * @memberof GuildManager\n   * @instance\n   * @param {GuildResolvable} guild The guild resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveID(guild) {\n    if (\n      guild instanceof GuildChannel ||\n      guild instanceof GuildMember ||\n      guild instanceof GuildEmoji ||\n      guild instanceof Role ||\n      (guild instanceof Invite && guild.guild)\n    ) {\n      return super.resolveID(guild.guild.id);\n    }\n    return super.resolveID(guild);\n  }\n\n  /**\n   * Creates a guild.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {Object} [options] Options for the creating\n   * @param {PartialChannelData[]} [options.channels] The channels for this guild\n   * @param {DefaultMessageNotifications} [options.defaultMessageNotifications] The default message notifications\n   * for the guild\n   * @param {ExplicitContentFilterLevel} [options.explicitContentFilter] The explicit content filter level for the guild\n   * @param {BufferResolvable|Base64Resolvable} [options.icon=null] The icon for the guild\n   * @param {string} [options.region] The region for the server, defaults to the closest one available\n   * @param {PartialRoleData[]} [options.roles] The roles for this guild,\n   * the first element of this array is used to change properties of the guild's everyone role.\n   * @param {VerificationLevel} [options.verificationLevel] The verification level for the guild\n   * @returns {Promise<Guild>} The guild that was created\n   */\n  async create(\n    name,\n    {\n      channels = [],\n      defaultMessageNotifications,\n      explicitContentFilter,\n      icon = null,\n      region,\n      roles = [],\n      verificationLevel,\n    } = {},\n  ) {\n    icon = await DataResolver.resolveImage(icon);\n    if (typeof verificationLevel !== 'undefined' && typeof verificationLevel !== 'number') {\n      verificationLevel = VerificationLevels.indexOf(verificationLevel);\n    }\n    if (typeof defaultMessageNotifications !== 'undefined' && typeof defaultMessageNotifications !== 'number') {\n      defaultMessageNotifications = DefaultMessageNotifications.indexOf(defaultMessageNotifications);\n    }\n    if (typeof explicitContentFilter !== 'undefined' && typeof explicitContentFilter !== 'number') {\n      explicitContentFilter = ExplicitContentFilterLevels.indexOf(explicitContentFilter);\n    }\n    for (const channel of channels) {\n      channel.parent_id = channel.parentID;\n      delete channel.parentID;\n      if (!channel.permissionOverwrites) continue;\n      for (const overwrite of channel.permissionOverwrites) {\n        if (overwrite.allow) overwrite.allow = Permissions.resolve(overwrite.allow);\n        if (overwrite.deny) overwrite.deny = Permissions.resolve(overwrite.deny);\n      }\n      channel.permission_overwrites = channel.permissionOverwrites;\n      delete channel.permissionOverwrites;\n    }\n    for (const role of roles) {\n      if (role.color) role.color = resolveColor(role.color);\n      if (role.permissions) role.permissions = Permissions.resolve(role.permissions);\n    }\n    return new Promise((resolve, reject) =>\n      this.client.api.guilds\n        .post({\n          data: {\n            name,\n            region,\n            icon,\n            verification_level: verificationLevel,\n            default_message_notifications: defaultMessageNotifications,\n            explicit_content_filter: explicitContentFilter,\n            channels,\n            roles,\n          },\n        })\n        .then(data => {\n          if (this.client.guilds.cache.has(data.id)) return resolve(this.client.guilds.cache.get(data.id));\n\n          const handleGuild = guild => {\n            if (guild.id === data.id) {\n              this.client.removeListener(Events.GUILD_CREATE, handleGuild);\n              this.client.clearTimeout(timeout);\n              resolve(guild);\n            }\n          };\n          this.client.on(Events.GUILD_CREATE, handleGuild);\n\n          const timeout = this.client.setTimeout(() => {\n            this.client.removeListener(Events.GUILD_CREATE, handleGuild);\n            resolve(this.client.guilds.add(data));\n          }, 10000);\n          return undefined;\n        }, reject),\n    );\n  }\n}\n\nmodule.exports = GuildManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/GuildManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/GuildMemberManager.js":
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/GuildMemberManager.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst { Error, TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst GuildMember = __webpack_require__(/*! ../structures/GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { Events, OPCodes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * Manages API methods for GuildMembers and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildMemberManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildMember);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildMember>}\n   * @name GuildMemberManager#cache\n   */\n\n  add(data, cache = true) {\n    return super.add(data, cache, { id: data.user.id, extras: [this.guild] });\n  }\n\n  /**\n   * Data that resolves to give a GuildMember object. This can be:\n   * * A GuildMember object\n   * * A User resolvable\n   * @typedef {GuildMember|UserResolvable} GuildMemberResolvable\n   */\n\n  /**\n   * Resolves a GuildMemberResolvable to a GuildMember object.\n   * @param {GuildMemberResolvable} member The user that is part of the guild\n   * @returns {?GuildMember}\n   */\n  resolve(member) {\n    const memberResolvable = super.resolve(member);\n    if (memberResolvable) return memberResolvable;\n    const userResolvable = this.client.users.resolveID(member);\n    if (userResolvable) return super.resolve(userResolvable);\n    return null;\n  }\n\n  /**\n   * Resolves a GuildMemberResolvable to a member ID string.\n   * @param {GuildMemberResolvable} member The user that is part of the guild\n   * @returns {?Snowflake}\n   */\n  resolveID(member) {\n    const memberResolvable = super.resolveID(member);\n    if (memberResolvable) return memberResolvable;\n    const userResolvable = this.client.users.resolveID(member);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n\n  /**\n   * Options used to fetch a single member from a guild.\n   * @typedef {Object} FetchMemberOptions\n   * @property {UserResolvable} user The user to fetch\n   * @property {boolean} [cache=true] Whether or not to cache the fetched member\n   */\n\n  /**\n   * Options used to fetch multiple members from a guild.\n   * @typedef {Object} FetchMembersOptions\n   * @property {UserResolvable|UserResolvable[]} user The user(s) to fetch\n   * @property {?string} query Limit fetch to members with similar usernames\n   * @property {number} [limit=0] Maximum number of members to request\n   * @property {boolean} [withPresences=false] Whether or not to include the presences\n   * @property {number} [time=120e3] Timeout for receipt of members\n   */\n\n  /**\n   * Fetches member(s) from Discord, even if they're offline.\n   * @param {UserResolvable|FetchMemberOptions|FetchMembersOptions} [options] If a UserResolvable, the user to fetch.\n   * If undefined, fetches all members.\n   * If a query, it limits the results to users with similar usernames.\n   * @returns {Promise<GuildMember>|Promise<Collection<Snowflake, GuildMember>>}\n   * @example\n   * // Fetch all members from a guild\n   * guild.members.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single member\n   * guild.members.fetch('66564597481480192')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single member without caching\n   * guild.members.fetch({ user, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch by an array of users including their presences\n   * guild.members.fetch({ user: ['66564597481480192', '191615925336670208'], withPresences: true })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch by query\n   * guild.members.fetch({ query: 'hydra', limit: 1 })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const user = this.client.users.resolveID(options);\n    if (user) return this._fetchSingle({ user, cache: true });\n    if (options.user) {\n      if (Array.isArray(options.user)) {\n        options.user = options.user.map(u => this.client.users.resolveID(u));\n        return this._fetchMany(options);\n      } else {\n        options.user = this.client.users.resolveID(options.user);\n      }\n      if (!options.limit && !options.withPresences) return this._fetchSingle(options);\n    }\n    return this._fetchMany(options);\n  }\n\n  /**\n   * Prunes members from the guild based on how long they have been inactive.\n   * <info>It's recommended to set options.count to `false` for large guilds.</info>\n   * @param {Object} [options] Prune options\n   * @param {number} [options.days=7] Number of days of inactivity required to kick\n   * @param {boolean} [options.dry=false] Get number of users that will be kicked, without actually kicking them\n   * @param {boolean} [options.count=true] Whether or not to return the number of users that have been kicked.\n   * @param {string} [options.reason] Reason for this prune\n   * @returns {Promise<number|null>} The number of members that were/will be kicked\n   * @example\n   * // See how many members will be pruned\n   * guild.members.prune({ dry: true })\n   *   .then(pruned => console.log(`This will prune ${pruned} people!`))\n   *   .catch(console.error);\n   * @example\n   * // Actually prune the members\n   * guild.members.prune({ days: 1, reason: 'too many people!' })\n   *   .then(pruned => console.log(`I just pruned ${pruned} people!`))\n   *   .catch(console.error);\n   */\n  prune({ days = 7, dry = false, count = true, reason } = {}) {\n    if (typeof days !== 'number') throw new TypeError('PRUNE_DAYS_TYPE');\n    return this.client.api\n      .guilds(this.guild.id)\n      .prune[dry ? 'get' : 'post']({\n        query: {\n          days,\n          compute_prune_count: count,\n        },\n        reason,\n      })\n      .then(data => data.pruned);\n  }\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {Object} [options] Options for the ban\n   * @param {number} [options.days=0] Number of days of messages to delete\n   * @param {string} [options.reason] Reason for banning\n   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user ID will be the result.\n   * @example\n   * // Ban a user by ID (or with a user/guild member object)\n   * guild.members.ban('84484653687267328')\n   *   .then(user => console.log(`Banned ${user.username || user.id || user} from ${guild.name}`))\n   *   .catch(console.error);\n   */\n  ban(user, options = { days: 0 }) {\n    if (options.days) options['delete-message-days'] = options.days;\n    const id = this.client.users.resolveID(user);\n    if (!id) return Promise.reject(new Error('BAN_RESOLVE_ID', true));\n    return this.client.api\n      .guilds(this.guild.id)\n      .bans[id].put({ query: options })\n      .then(() => {\n        if (user instanceof GuildMember) return user;\n        const _user = this.client.users.resolve(id);\n        if (_user) {\n          const member = this.resolve(_user);\n          return member || _user;\n        }\n        return id;\n      });\n  }\n\n  /**\n   * Unbans a user from the guild.\n   * @param {UserResolvable} user The user to unban\n   * @param {string} [reason] Reason for unbanning user\n   * @returns {Promise<User>}\n   * @example\n   * // Unban a user by ID (or with a user/guild member object)\n   * guild.members.unban('84484653687267328')\n   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n   *   .catch(console.error);\n   */\n  unban(user, reason) {\n    const id = this.client.users.resolveID(user);\n    if (!id) return Promise.reject(new Error('BAN_RESOLVE_ID'));\n    return this.client.api\n      .guilds(this.guild.id)\n      .bans[id].delete({ reason })\n      .then(() => this.client.users.resolve(user));\n  }\n\n  _fetchSingle({ user, cache }) {\n    const existing = this.cache.get(user);\n    if (existing && !existing.partial) return Promise.resolve(existing);\n    return this.client.api\n      .guilds(this.guild.id)\n      .members(user)\n      .get()\n      .then(data => this.add(data, cache));\n  }\n\n  _fetchMany({ limit = 0, withPresences: presences = false, user: user_ids, query, time = 120e3 } = {}) {\n    return new Promise((resolve, reject) => {\n      if (this.guild.memberCount === this.cache.size && !query && !limit && !presences && !user_ids) {\n        resolve(this.cache);\n        return;\n      }\n      if (!query && !user_ids) query = '';\n      this.guild.shard.send({\n        op: OPCodes.REQUEST_GUILD_MEMBERS,\n        d: {\n          guild_id: this.guild.id,\n          presences,\n          user_ids,\n          query,\n          limit,\n        },\n      });\n      const fetchedMembers = new Collection();\n      const option = query || limit || presences || user_ids;\n      const handler = (members, guild) => {\n        if (guild.id !== this.guild.id) return;\n        timeout.refresh();\n        for (const member of members.values()) {\n          if (option) fetchedMembers.set(member.id, member);\n        }\n        if (\n          this.guild.memberCount <= this.cache.size ||\n          (option && members.size < 1000) ||\n          (limit && fetchedMembers.size >= limit)\n        ) {\n          this.guild.client.removeListener(Events.GUILD_MEMBERS_CHUNK, handler);\n          let fetched = option ? fetchedMembers : this.cache;\n          if (user_ids && !Array.isArray(user_ids) && fetched.size) fetched = fetched.first();\n          resolve(fetched);\n        }\n      };\n      const timeout = this.guild.client.setTimeout(() => {\n        this.guild.client.removeListener(Events.GUILD_MEMBERS_CHUNK, handler);\n        reject(new Error('GUILD_MEMBERS_TIMEOUT'));\n      }, time);\n      this.guild.client.on(Events.GUILD_MEMBERS_CHUNK, handler);\n    });\n  }\n}\n\nmodule.exports = GuildMemberManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/GuildMemberManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/GuildMemberRoleManager.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/GuildMemberRoleManager.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\n\n/**\n * Manages API methods for roles of a GuildMember and stores their cache.\n */\nclass GuildMemberRoleManager {\n  constructor(member) {\n    /**\n     * The GuildMember this manager belongs to\n     * @type {GuildMember}\n     */\n    this.member = member;\n    /**\n     * The Guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = member.guild;\n    Object.defineProperty(this, 'client', { value: member.client });\n  }\n\n  /**\n   * The filtered collection of roles of the member\n   * @type {Collection<Snowflake, Role>}\n   * @private\n   * @readonly\n   */\n  get _roles() {\n    const everyone = this.guild.roles.everyone;\n    return this.guild.roles.cache.filter(role => this.member._roles.includes(role.id)).set(everyone.id, everyone);\n  }\n\n  /**\n   * The roles of this member\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this._roles;\n  }\n\n  /**\n   * The role of the member used to hoist them in a separate category in the users list\n   * @type {?Role}\n   * @readonly\n   */\n  get hoist() {\n    const hoistedRoles = this._roles.filter(role => role.hoist);\n    if (!hoistedRoles.size) return null;\n    return hoistedRoles.reduce((prev, role) => (!prev || role.comparePositionTo(prev) > 0 ? role : prev));\n  }\n\n  /**\n   * The role of the member used to set their color\n   * @type {?Role}\n   * @readonly\n   */\n  get color() {\n    const coloredRoles = this._roles.filter(role => role.color);\n    if (!coloredRoles.size) return null;\n    return coloredRoles.reduce((prev, role) => (!prev || role.comparePositionTo(prev) > 0 ? role : prev));\n  }\n\n  /**\n   * The role of the member with the highest position\n   * @type {Role}\n   * @readonly\n   */\n  get highest() {\n    return this._roles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev), this._roles.first());\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the member.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @param {string} [reason] Reason for adding the role(s)\n   * @returns {Promise<GuildMember>}\n   */\n  async add(roleOrRoles, reason) {\n    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {\n      roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolve(r));\n      if (roleOrRoles.includes(null)) {\n        throw new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true);\n      }\n\n      const newRoles = [...new Set(roleOrRoles.concat(...this._roles.values()))];\n      return this.set(newRoles, reason);\n    } else {\n      roleOrRoles = this.guild.roles.resolve(roleOrRoles);\n      if (roleOrRoles === null) {\n        throw new TypeError(\n          'INVALID_TYPE',\n          'roles',\n          'Role, Snowflake or Array or Collection of Roles or Snowflakes',\n          true,\n        );\n      }\n\n      await this.client.api.guilds[this.guild.id].members[this.member.id].roles[roleOrRoles.id].put({ reason });\n\n      const clone = this.member._clone();\n      clone._roles = [...this._roles.keys(), roleOrRoles.id];\n      return clone;\n    }\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the member.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @param {string} [reason] Reason for removing the role(s)\n   * @returns {Promise<GuildMember>}\n   */\n  async remove(roleOrRoles, reason) {\n    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {\n      roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolve(r));\n      if (roleOrRoles.includes(null)) {\n        throw new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true);\n      }\n\n      const newRoles = this._roles.filter(role => !roleOrRoles.includes(role));\n      return this.set(newRoles, reason);\n    } else {\n      roleOrRoles = this.guild.roles.resolve(roleOrRoles);\n      if (roleOrRoles === null) {\n        throw new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true);\n      }\n\n      await this.client.api.guilds[this.guild.id].members[this.member.id].roles[roleOrRoles.id].delete({ reason });\n\n      const clone = this.member._clone();\n      const newRoles = this._roles.filter(role => role.id !== roleOrRoles.id);\n      clone._roles = [...newRoles.keys()];\n      return clone;\n    }\n  }\n\n  /**\n   * Sets the roles applied to the member.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n   * @param {string} [reason] Reason for applying the roles\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set the member's roles to a single role\n   * guildMember.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all the roles from a member\n   * guildMember.roles.set([])\n   *   .then(member => console.log(`Member roles is now of ${member.roles.cache.size} size`))\n   *   .catch(console.error);\n   */\n  set(roles, reason) {\n    return this.member.edit({ roles }, reason);\n  }\n\n  clone() {\n    const clone = new this.constructor(this.member);\n    clone.member._roles = [...this._roles.keyArray()];\n    return clone;\n  }\n}\n\nmodule.exports = GuildMemberRoleManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/GuildMemberRoleManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/MessageManager.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/MessageManager.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst Message = __webpack_require__(/*! ../structures/Message */ \"./node_modules/discord.js/src/structures/Message.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst LimitedCollection = __webpack_require__(/*! ../util/LimitedCollection */ \"./node_modules/discord.js/src/util/LimitedCollection.js\");\n\n/**\n * Manages API methods for Messages and holds their cache.\n * @extends {BaseManager}\n */\nclass MessageManager extends BaseManager {\n  constructor(channel, iterable) {\n    super(channel.client, iterable, Message, LimitedCollection, channel.client.options.messageCacheMaxSize);\n    /**\n     * The channel that the messages belong to\n     * @type {TextBasedChannel}\n     */\n    this.channel = channel;\n  }\n\n  /**\n   * The cache of Messages\n   * @type {Collection<Snowflake, Message>}\n   * @name MessageManager#cache\n   */\n\n  add(data, cache) {\n    return super.add(data, cache, { extras: [this.channel] });\n  }\n\n  /**\n   * The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n   * `after` are mutually exclusive. All the parameters are optional.\n   * @typedef {Object} ChannelLogsQueryOptions\n   * @property {number} [limit=50] Number of messages to acquire\n   * @property {Snowflake} [before] ID of a message to get the messages that were posted before it\n   * @property {Snowflake} [after] ID of a message to get the messages that were posted after it\n   * @property {Snowflake} [around] ID of a message to get the messages that were posted around it\n   */\n\n  /**\n   * Gets a message, or messages, from this channel.\n   * <info>The returned Collection does not contain reaction users of the messages if they were not cached.\n   * Those need to be fetched separately in such a case.</info>\n   * @param {Snowflake|ChannelLogsQueryOptions} [message] The ID of the message to fetch, or query parameters.\n   * @param {boolean} [cache=true] Whether to cache the message(s)\n   * @returns {Promise<Message>|Promise<Collection<Snowflake, Message>>}\n   * @example\n   * // Get message\n   * channel.messages.fetch('99539446449315840')\n   *   .then(message => console.log(message.content))\n   *   .catch(console.error);\n   * @example\n   * // Get messages\n   * channel.messages.fetch({ limit: 10 })\n   *   .then(messages => console.log(`Received ${messages.size} messages`))\n   *   .catch(console.error);\n   * @example\n   * // Get messages and filter by user ID\n   * channel.messages.fetch()\n   *   .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n   *   .catch(console.error);\n   */\n  fetch(message, cache = true) {\n    return typeof message === 'string' ? this._fetchId(message, cache) : this._fetchMany(message, cache);\n  }\n\n  /**\n   * Fetches the pinned messages of this channel and returns a collection of them.\n   * <info>The returned Collection does not contain any reaction data of the messages.\n   * Those need to be fetched separately.</info>\n   * @param {boolean} [cache=true] Whether to cache the message(s)\n   * @returns {Promise<Collection<Snowflake, Message>>}\n   * @example\n   * // Get pinned messages\n   * channel.fetchPinned()\n   *   .then(messages => console.log(`Received ${messages.size} messages`))\n   *   .catch(console.error);\n   */\n  fetchPinned(cache = true) {\n    return this.client.api.channels[this.channel.id].pins.get().then(data => {\n      const messages = new Collection();\n      for (const message of data) messages.set(message.id, this.add(message, cache));\n      return messages;\n    });\n  }\n\n  /**\n   * Data that can be resolved to a Message object. This can be:\n   * * A Message\n   * * A Snowflake\n   * @typedef {Message|Snowflake} MessageResolvable\n   */\n\n  /**\n   * Resolves a MessageResolvable to a Message object.\n   * @method resolve\n   * @memberof MessageManager\n   * @instance\n   * @param {MessageResolvable} message The message resolvable to resolve\n   * @returns {?Message}\n   */\n\n  /**\n   * Resolves a MessageResolvable to a Message ID string.\n   * @method resolveID\n   * @memberof MessageManager\n   * @instance\n   * @param {MessageResolvable} message The message resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Deletes a message, even if it's not cached.\n   * @param {MessageResolvable} message The message to delete\n   * @param {string} [reason] Reason for deleting this message, if it does not belong to the client user\n   * @returns {Promise<void>}\n   */\n  async delete(message, reason) {\n    message = this.resolveID(message);\n    if (message) {\n      await this.client.api\n        .channels(this.channel.id)\n        .messages(message)\n        .delete({ reason });\n    }\n  }\n\n  async _fetchId(messageID, cache) {\n    const existing = this.cache.get(messageID);\n    if (existing && !existing.partial) return existing;\n    const data = await this.client.api.channels[this.channel.id].messages[messageID].get();\n    return this.add(data, cache);\n  }\n\n  async _fetchMany(options = {}, cache) {\n    const data = await this.client.api.channels[this.channel.id].messages.get({ query: options });\n    const messages = new Collection();\n    for (const message of data) messages.set(message.id, this.add(message, cache));\n    return messages;\n  }\n}\n\nmodule.exports = MessageManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/MessageManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/PresenceManager.js":
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/PresenceManager.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst { Presence } = __webpack_require__(/*! ../structures/Presence */ \"./node_modules/discord.js/src/structures/Presence.js\");\n\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {BaseManager}\n */\nclass PresenceManager extends BaseManager {\n  constructor(client, iterable) {\n    super(client, iterable, Presence);\n  }\n\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n  add(data, cache) {\n    const existing = this.cache.get(data.user.id);\n    return existing ? existing.patch(data) : super.add(data, cache, { id: data.user.id });\n  }\n\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a PresenceResolvable to a Presence object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveID(presence);\n    return super.resolve(UserResolvable) || null;\n  }\n\n  /**\n   * Resolves a PresenceResolvable to a Presence ID string.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveID(presence) {\n    const presenceResolvable = super.resolveID(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveID(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n}\n\nmodule.exports = PresenceManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/PresenceManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/ReactionManager.js":
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/ReactionManager.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst MessageReaction = __webpack_require__(/*! ../structures/MessageReaction */ \"./node_modules/discord.js/src/structures/MessageReaction.js\");\n\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {BaseManager}\n */\nclass ReactionManager extends BaseManager {\n  constructor(message, iterable) {\n    super(message.client, iterable, MessageReaction);\n\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n    this.message = message;\n  }\n\n  add(data, cache) {\n    return super.add(data, cache, { id: data.emoji.id || data.emoji.name, extras: [this.message] });\n  }\n\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction ID string.\n   * @method resolveID\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  removeAll() {\n    return this.client.api\n      .channels(this.message.channel.id)\n      .messages(this.message.id)\n      .reactions.delete()\n      .then(() => this.message);\n  }\n}\n\nmodule.exports = ReactionManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/ReactionManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/ReactionUserManager.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/ReactionUserManager.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst { Error } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\n\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {BaseManager}\n */\nclass ReactionUserManager extends BaseManager {\n  constructor(client, iterable, reaction) {\n    super(client, iterable, { name: 'User' });\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {Object} [options] Options for fetching the users\n   * @param {number} [options.limit=100] The maximum amount of users to fetch, defaults to 100\n   * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id\n   * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetch({ limit = 100, after, before } = {}) {\n    const message = this.reaction.message;\n    const data = await this.client.api.channels[message.channel.id].messages[message.id].reactions[\n      this.reaction.emoji.identifier\n    ].get({ query: { limit, before, after } });\n    const users = new Collection();\n    for (const rawUser of data) {\n      const user = this.client.users.add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n    return users;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.reaction.message.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  remove(user = this.reaction.message.client.user) {\n    const message = this.reaction.message;\n    const userID = message.client.users.resolveID(user);\n    if (!userID) return Promise.reject(new Error('REACTION_RESOLVE_USER'));\n    return message.client.api.channels[message.channel.id].messages[message.id].reactions[\n      this.reaction.emoji.identifier\n    ][userID === message.client.user.id ? '@me' : userID]\n      .delete()\n      .then(() => this.reaction);\n  }\n}\n\nmodule.exports = ReactionUserManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/ReactionUserManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/RoleManager.js":
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/RoleManager.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst Role = __webpack_require__(/*! ../structures/Role */ \"./node_modules/discord.js/src/structures/Role.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\nconst { resolveColor } = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Manages API methods for roles and stores their cache.\n * @extends {BaseManager}\n */\nclass RoleManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, Role);\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The role cache of this manager\n   * @type {Collection<Snowflake, Role>}\n   * @name RoleManager#cache\n   */\n\n  add(data, cache) {\n    return super.add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Obtains one or more roles from Discord, or the role cache if they're already available.\n   * @param {Snowflake} [id] ID or IDs of the role(s)\n   * @param {boolean} [cache=true] Whether to cache the new roles objects if it weren't already\n   * @returns {Promise<Role|RoleManager>}\n   * @example\n   * // Fetch all roles from the guild\n   * message.guild.roles.fetch()\n   *   .then(roles => console.log(`There are ${roles.cache.size} roles.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single role\n   * message.guild.roles.fetch('222078108977594368')\n   *   .then(role => console.log(`The role color is: ${role.color}`))\n   *   .catch(console.error);\n   */\n  async fetch(id, cache = true) {\n    if (id) {\n      const existing = this.cache.get(id);\n      if (existing) return existing;\n    }\n\n    // We cannot fetch a single role, as of this commit's date, Discord API throws with 405\n    const roles = await this.client.api.guilds(this.guild.id).roles.get();\n    for (const role of roles) this.add(role, cache);\n    return id ? this.cache.get(id) || null : this;\n  }\n\n  /**\n   * Data that can be resolved to a Role object. This can be:\n   * * A Role\n   * * A Snowflake\n   * @typedef {Role|Snowflake} RoleResolvable\n   */\n\n  /**\n   * Resolves a RoleResolvable to a Role object.\n   * @method resolve\n   * @memberof RoleManager\n   * @instance\n   * @param {RoleResolvable} role The role resolvable to resolve\n   * @returns {?Role}\n   */\n\n  /**\n   * Resolves a RoleResolvable to a role ID string.\n   * @method resolveID\n   * @memberof RoleManager\n   * @instance\n   * @param {RoleResolvable} role The role resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Creates a new role in the guild with given information.\n   * <warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>\n   * @param {Object} [options] Options\n   * @param {RoleData} [options.data] The data to create the role with\n   * @param {string} [options.reason] Reason for creating this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Create a new role\n   * guild.roles.create()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new role with data and a reason\n   * guild.roles.create({\n   *   data: {\n   *     name: 'Super Cool People',\n   *     color: 'BLUE',\n   *   },\n   *   reason: 'we needed a role for Super Cool People',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  create({ data = {}, reason } = {}) {\n    if (data.color) data.color = resolveColor(data.color);\n    if (data.permissions) data.permissions = Permissions.resolve(data.permissions);\n\n    return this.guild.client.api\n      .guilds(this.guild.id)\n      .roles.post({ data, reason })\n      .then(r => {\n        const { role } = this.client.actions.GuildRoleCreate.handle({\n          guild_id: this.guild.id,\n          role: r,\n        });\n        if (data.position) return role.setPosition(data.position, reason);\n        return role;\n      });\n  }\n\n  /**\n   * The `@everyone` role of the guild\n   * @type {Role}\n   * @readonly\n   */\n  get everyone() {\n    return this.cache.get(this.guild.id);\n  }\n\n  /**\n   * The role with the highest position in the cache\n   * @type {Role}\n   * @readonly\n   */\n  get highest() {\n    return this.cache.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev), this.cache.first());\n  }\n}\n\nmodule.exports = RoleManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/RoleManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/UserManager.js":
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/UserManager.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst GuildMember = __webpack_require__(/*! ../structures/GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\");\nconst Message = __webpack_require__(/*! ../structures/Message */ \"./node_modules/discord.js/src/structures/Message.js\");\nconst User = __webpack_require__(/*! ../structures/User */ \"./node_modules/discord.js/src/structures/User.js\");\n\n/**\n * Manages API methods for users and stores their cache.\n * @extends {BaseManager}\n */\nclass UserManager extends BaseManager {\n  constructor(client, iterable) {\n    super(client, iterable, User);\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name UserManager#cache\n   */\n\n  /**\n   * Data that resolves to give a User object. This can be:\n   * * A User object\n   * * A Snowflake\n   * * A Message object (resolves to the message author)\n   * * A GuildMember object\n   * @typedef {User|Snowflake|Message|GuildMember} UserResolvable\n   */\n\n  /**\n   * Resolves a UserResolvable to a User object.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?User}\n   */\n  resolve(user) {\n    if (user instanceof GuildMember) return user.user;\n    if (user instanceof Message) return user.author;\n    return super.resolve(user);\n  }\n\n  /**\n   * Resolves a UserResolvable to a user ID string.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveID(user) {\n    if (user instanceof GuildMember) return user.user.id;\n    if (user instanceof Message) return user.author.id;\n    return super.resolveID(user);\n  }\n\n  /**\n   * Obtains a user from Discord, or the user cache if it's already available.\n   * @param {Snowflake} id ID of the user\n   * @param {boolean} [cache=true] Whether to cache the new user object if it isn't already\n   * @returns {Promise<User>}\n   */\n  async fetch(id, cache = true) {\n    const existing = this.cache.get(id);\n    if (existing && !existing.partial) return existing;\n    const data = await this.client.api.users(id).get();\n    return this.add(data, cache);\n  }\n}\n\nmodule.exports = UserManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/UserManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/managers/VoiceStateManager.js":
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/managers/VoiceStateManager.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseManager = __webpack_require__(/*! ./BaseManager */ \"./node_modules/discord.js/src/managers/BaseManager.js\");\nconst VoiceState = __webpack_require__(/*! ../structures/VoiceState */ \"./node_modules/discord.js/src/structures/VoiceState.js\");\n\n/**\n * Manages API methods for VoiceStates and stores their cache.\n * @extends {BaseManager}\n */\nclass VoiceStateManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, VoiceState);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, VoiceState>}\n   * @name VoiceStateManager#cache\n   */\n\n  add(data, cache = true) {\n    const existing = this.cache.get(data.user_id);\n    if (existing) return existing._patch(data);\n\n    const entry = new VoiceState(this.guild, data);\n    if (cache) this.cache.set(data.user_id, entry);\n    return entry;\n  }\n}\n\nmodule.exports = VoiceStateManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/managers/VoiceStateManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/rest/APIRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/rest/APIRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst https = __webpack_require__(/*! https */ \"https\");\nconst FormData = __webpack_require__(/*! @discordjs/form-data */ \"./node_modules/@discordjs/form-data/lib/form_data.js\");\nconst AbortController = __webpack_require__(/*! abort-controller */ \"./node_modules/abort-controller/dist/abort-controller.mjs\");\nconst fetch = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/lib/index.mjs\");\nconst { browser, UserAgent } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nif (https.Agent) var agent = new https.Agent({ keepAlive: true });\n\nclass APIRequest {\n  constructor(rest, method, path, options) {\n    this.rest = rest;\n    this.client = rest.client;\n    this.method = method;\n    this.route = options.route;\n    this.options = options;\n\n    let queryString = '';\n    if (options.query) {\n      // Filter out undefined query options\n      const query = Object.entries(options.query).filter(([, value]) => value !== null && typeof value !== 'undefined');\n      queryString = new URLSearchParams(query).toString();\n    }\n    this.path = `${path}${queryString && `?${queryString}`}`;\n  }\n\n  make() {\n    const API =\n      this.options.versioned === false\n        ? this.client.options.http.api\n        : `${this.client.options.http.api}/v${this.client.options.http.version}`;\n    const url = API + this.path;\n    let headers = {};\n\n    if (this.options.auth !== false) headers.Authorization = this.rest.getAuth();\n    if (this.options.reason) headers['X-Audit-Log-Reason'] = encodeURIComponent(this.options.reason);\n    if (!browser) headers['User-Agent'] = UserAgent;\n    if (this.options.headers) headers = Object.assign(headers, this.options.headers);\n\n    let body;\n    if (this.options.files && this.options.files.length) {\n      body = new FormData();\n      for (const file of this.options.files) if (file && file.file) body.append(file.name, file.file, file.name);\n      if (typeof this.options.data !== 'undefined') body.append('payload_json', JSON.stringify(this.options.data));\n      if (!browser) headers = Object.assign(headers, body.getHeaders());\n      // eslint-disable-next-line eqeqeq\n    } else if (this.options.data != null) {\n      body = JSON.stringify(this.options.data);\n      headers['Content-Type'] = 'application/json';\n    }\n\n    const controller = new AbortController();\n    const timeout = this.client.setTimeout(() => controller.abort(), this.client.options.restRequestTimeout);\n    return fetch(url, {\n      method: this.method,\n      headers,\n      agent,\n      body,\n      signal: controller.signal,\n    }).finally(() => this.client.clearTimeout(timeout));\n  }\n}\n\nmodule.exports = APIRequest;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/rest/APIRequest.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/rest/APIRouter.js":
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/rest/APIRouter.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst noop = () => {}; // eslint-disable-line no-empty-function\nconst methods = ['get', 'post', 'delete', 'patch', 'put'];\nconst reflectors = [\n  'toString',\n  'valueOf',\n  'inspect',\n  'constructor',\n  Symbol.toPrimitive,\n  Symbol.for('nodejs.util.inspect.custom'),\n];\n\nfunction buildRoute(manager) {\n  const route = [''];\n  const handler = {\n    get(target, name) {\n      if (reflectors.includes(name)) return () => route.join('/');\n      if (methods.includes(name)) {\n        const routeBucket = [];\n        for (let i = 0; i < route.length; i++) {\n          // Reactions routes and sub-routes all share the same bucket\n          if (route[i - 1] === 'reactions') break;\n          // Literal IDs should only be taken account if they are the Major ID (the Channel/Guild ID)\n          if (/\\d{16,19}/g.test(route[i]) && !/channels|guilds/.test(route[i - 1])) routeBucket.push(':id');\n          // All other parts of the route should be considered as part of the bucket identifier\n          else routeBucket.push(route[i]);\n        }\n        return options =>\n          manager.request(\n            name,\n            route.join('/'),\n            Object.assign(\n              {\n                versioned: manager.versioned,\n                route: routeBucket.join('/'),\n              },\n              options,\n            ),\n          );\n      }\n      route.push(name);\n      return new Proxy(noop, handler);\n    },\n    apply(target, _, args) {\n      route.push(...args.filter(x => x != null)); // eslint-disable-line eqeqeq\n      return new Proxy(noop, handler);\n    },\n  };\n  return new Proxy(noop, handler);\n}\n\nmodule.exports = buildRoute;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/rest/APIRouter.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/rest/DiscordAPIError.js":
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/rest/DiscordAPIError.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Represents an error from the Discord API.\n * @extends Error\n */\nclass DiscordAPIError extends Error {\n  constructor(path, error, method, status) {\n    super();\n    const flattened = this.constructor.flattenErrors(error.errors || error).join('\\n');\n    this.name = 'DiscordAPIError';\n    this.message = error.message && flattened ? `${error.message}\\n${flattened}` : error.message || flattened;\n\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n    this.method = method;\n\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n    this.path = path;\n\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n    this.code = error.code;\n\n    /**\n     * The HTTP status code\n     * @type {number}\n     */\n    this.httpStatus = status;\n  }\n\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {Object} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n  static flattenErrors(obj, key = '') {\n    let messages = [];\n\n    for (const [k, v] of Object.entries(obj)) {\n      if (k === 'message') continue;\n      const newKey = key ? (isNaN(k) ? `${key}.${k}` : `${key}[${k}]`) : k;\n\n      if (v._errors) {\n        messages.push(`${newKey}: ${v._errors.map(e => e.message).join(' ')}`);\n      } else if (v.code || v.message) {\n        messages.push(`${v.code ? `${v.code}: ` : ''}${v.message}`.trim());\n      } else if (typeof v === 'string') {\n        messages.push(v);\n      } else {\n        messages = messages.concat(this.flattenErrors(v, newKey));\n      }\n    }\n\n    return messages;\n  }\n}\n\nmodule.exports = DiscordAPIError;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/rest/DiscordAPIError.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/rest/HTTPError.js":
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/rest/HTTPError.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Represents a HTTP error from a request.\n * @extends Error\n */\nclass HTTPError extends Error {\n  constructor(message, name, code, method, path) {\n    super(message);\n\n    /**\n     * The name of the error\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * HTTP error code returned from the request\n     * @type {number}\n     */\n    this.code = code || 500;\n\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n    this.method = method;\n\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n    this.path = path;\n  }\n}\n\nmodule.exports = HTTPError;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/rest/HTTPError.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/rest/RESTManager.js":
/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/rest/RESTManager.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst APIRequest = __webpack_require__(/*! ./APIRequest */ \"./node_modules/discord.js/src/rest/APIRequest.js\");\nconst routeBuilder = __webpack_require__(/*! ./APIRouter */ \"./node_modules/discord.js/src/rest/APIRouter.js\");\nconst RequestHandler = __webpack_require__(/*! ./RequestHandler */ \"./node_modules/discord.js/src/rest/RequestHandler.js\");\nconst { Error } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { Endpoints } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass RESTManager {\n  constructor(client, tokenPrefix = 'Bot') {\n    this.client = client;\n    this.handlers = new Collection();\n    this.tokenPrefix = tokenPrefix;\n    this.versioned = true;\n    this.globalTimeout = null;\n    if (client.options.restSweepInterval > 0) {\n      client.setInterval(() => {\n        this.handlers.sweep(handler => handler._inactive);\n      }, client.options.restSweepInterval * 1000);\n    }\n  }\n\n  get api() {\n    return routeBuilder(this);\n  }\n\n  getAuth() {\n    const token = this.client.token || this.client.accessToken;\n    if (token) return `${this.tokenPrefix} ${token}`;\n    throw new Error('TOKEN_MISSING');\n  }\n\n  get cdn() {\n    return Endpoints.CDN(this.client.options.http.cdn);\n  }\n\n  push(handler, apiRequest) {\n    return new Promise((resolve, reject) => {\n      handler\n        .push({\n          request: apiRequest,\n          resolve,\n          reject,\n          retries: 0,\n        })\n        .catch(reject);\n    });\n  }\n\n  request(method, url, options = {}) {\n    const apiRequest = new APIRequest(this, method, url, options);\n    let handler = this.handlers.get(apiRequest.route);\n\n    if (!handler) {\n      handler = new RequestHandler(this);\n      this.handlers.set(apiRequest.route, handler);\n    }\n\n    return this.push(handler, apiRequest);\n  }\n\n  set endpoint(endpoint) {\n    this.client.options.http.api = endpoint;\n  }\n}\n\nmodule.exports = RESTManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/rest/RESTManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/rest/RequestHandler.js":
/*!************************************************************!*\
  !*** ./node_modules/discord.js/src/rest/RequestHandler.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst DiscordAPIError = __webpack_require__(/*! ./DiscordAPIError */ \"./node_modules/discord.js/src/rest/DiscordAPIError.js\");\nconst HTTPError = __webpack_require__(/*! ./HTTPError */ \"./node_modules/discord.js/src/rest/HTTPError.js\");\nconst {\n  Events: { RATE_LIMIT },\n  browser,\n} = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\nfunction parseResponse(res) {\n  if (res.headers.get('content-type').startsWith('application/json')) return res.json();\n  if (browser) return res.blob();\n  return res.buffer();\n}\n\nfunction getAPIOffset(serverDate) {\n  return new Date(serverDate).getTime() - Date.now();\n}\n\nfunction calculateReset(reset, serverDate) {\n  return new Date(Number(reset) * 1000).getTime() - getAPIOffset(serverDate);\n}\n\nclass RequestHandler {\n  constructor(manager) {\n    this.manager = manager;\n    this.busy = false;\n    this.queue = [];\n    this.reset = -1;\n    this.remaining = -1;\n    this.limit = -1;\n    this.retryAfter = -1;\n  }\n\n  push(request) {\n    if (this.busy) {\n      this.queue.push(request);\n      return this.run();\n    } else {\n      return this.execute(request);\n    }\n  }\n\n  run() {\n    if (this.queue.length === 0) return Promise.resolve();\n    return this.execute(this.queue.shift());\n  }\n\n  get limited() {\n    return Boolean(this.manager.globalTimeout) || (this.remaining <= 0 && Date.now() < this.reset);\n  }\n\n  get _inactive() {\n    return this.queue.length === 0 && !this.limited && this.busy !== true;\n  }\n\n  async execute(item) {\n    // Insert item back to the beginning if currently busy\n    if (this.busy) {\n      this.queue.unshift(item);\n      return null;\n    }\n\n    this.busy = true;\n    const { reject, request, resolve } = item;\n\n    // After calculations and requests have been done, pre-emptively stop further requests\n    if (this.limited) {\n      const timeout = this.reset + this.manager.client.options.restTimeOffset - Date.now();\n\n      if (this.manager.client.listenerCount(RATE_LIMIT)) {\n        /**\n         * Emitted when the client hits a rate limit while making a request\n         * @event Client#rateLimit\n         * @param {Object} rateLimitInfo Object containing the rate limit info\n         * @param {number} rateLimitInfo.timeout Timeout in ms\n         * @param {number} rateLimitInfo.limit Number of requests that can be made to this endpoint\n         * @param {string} rateLimitInfo.method HTTP method used for request that triggered this event\n         * @param {string} rateLimitInfo.path Path used for request that triggered this event\n         * @param {string} rateLimitInfo.route Route used for request that triggered this event\n         */\n        this.manager.client.emit(RATE_LIMIT, {\n          timeout,\n          limit: this.limit,\n          method: request.method,\n          path: request.path,\n          route: request.route,\n        });\n      }\n\n      if (this.manager.globalTimeout) {\n        await this.manager.globalTimeout;\n      } else {\n        // Wait for the timeout to expire in order to avoid an actual 429\n        await Util.delayFor(timeout);\n      }\n    }\n\n    // Perform the request\n    let res;\n    try {\n      res = await request.make();\n    } catch (error) {\n      // NodeFetch error expected for all \"operational\" errors, such as 500 status code\n      this.busy = false;\n      return reject(new HTTPError(error.message, error.constructor.name, error.status, request.method, request.path));\n    }\n\n    if (res && res.headers) {\n      const serverDate = res.headers.get('date');\n      const limit = res.headers.get('x-ratelimit-limit');\n      const remaining = res.headers.get('x-ratelimit-remaining');\n      const reset = res.headers.get('x-ratelimit-reset');\n      const retryAfter = res.headers.get('retry-after');\n\n      this.limit = limit ? Number(limit) : Infinity;\n      this.remaining = remaining ? Number(remaining) : 1;\n      this.reset = reset ? calculateReset(reset, serverDate) : Date.now();\n      this.retryAfter = retryAfter ? Number(retryAfter) : -1;\n\n      // https://github.com/discordapp/discord-api-docs/issues/182\n      if (item.request.route.includes('reactions')) {\n        this.reset = new Date(serverDate).getTime() - getAPIOffset(serverDate) + 250;\n      }\n\n      // Handle global ratelimit\n      if (res.headers.get('x-ratelimit-global')) {\n        // Set the manager's global timeout as the promise for other requests to \"wait\"\n        this.manager.globalTimeout = Util.delayFor(this.retryAfter);\n\n        // Wait for the global timeout to resolve before continuing\n        await this.manager.globalTimeout;\n\n        // Clean up global timeout\n        this.manager.globalTimeout = null;\n      }\n    }\n\n    // Finished handling headers, safe to unlock manager\n    this.busy = false;\n\n    if (res.ok) {\n      const success = await parseResponse(res);\n      // Nothing wrong with the request, proceed with the next one\n      resolve(success);\n      return this.run();\n    } else if (res.status === 429) {\n      // A ratelimit was hit - this should never happen\n      this.queue.unshift(item);\n      this.manager.client.emit('debug', `429 hit on route ${item.request.route}`);\n      await Util.delayFor(this.retryAfter);\n      return this.run();\n    } else if (res.status >= 500 && res.status < 600) {\n      // Retry the specified number of times for possible serverside issues\n      if (item.retries === this.manager.client.options.retryLimit) {\n        return reject(\n          new HTTPError(res.statusText, res.constructor.name, res.status, item.request.method, request.path),\n        );\n      } else {\n        item.retries++;\n        this.queue.unshift(item);\n        return this.run();\n      }\n    } else {\n      // Handle possible malformed requests\n      try {\n        const data = await parseResponse(res);\n        if (res.status >= 400 && res.status < 500) {\n          return reject(new DiscordAPIError(request.path, data, request.method, res.status));\n        }\n        return null;\n      } catch (err) {\n        return reject(new HTTPError(err.message, err.constructor.name, err.status, request.method, request.path));\n      }\n    }\n  }\n}\n\nmodule.exports = RequestHandler;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/rest/RequestHandler.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/sharding/Shard.js":
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/sharding/Shard.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst { Error } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\nlet childProcess = null;\nlet Worker = null;\n\n/**\n * A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\n * an instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\n * spawn a new one to replace it as necessary.\n * @extends EventEmitter\n */\nclass Shard extends EventEmitter {\n  /**\n   * @param {ShardingManager} manager Manager that is creating this shard\n   * @param {number} id ID of this shard\n   */\n  constructor(manager, id) {\n    super();\n\n    if (manager.mode === 'process') childProcess = __webpack_require__(/*! child_process */ \"child_process\");\n    else if (manager.mode === 'worker') Worker = __webpack_require__(/*! worker_threads */ \"worker_threads\").Worker;\n\n    /**\n     * Manager that created the shard\n     * @type {ShardingManager}\n     */\n    this.manager = manager;\n\n    /**\n     * ID of the shard in the manager\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Arguments for the shard's process (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.args = manager.shardArgs || [];\n\n    /**\n     * Arguments for the shard's process executable (only when {@link ShardingManager#mode} is `process`)\n     * @type {?string[]}\n     */\n    this.execArgv = manager.execArgv;\n\n    /**\n     * Environment variables for the shard's process, or workerData for the shard's worker\n     * @type {Object}\n     */\n    this.env = Object.assign({}, process.env, {\n      SHARDING_MANAGER: true,\n      SHARDS: this.id,\n      SHARD_COUNT: this.manager.totalShards,\n      DISCORD_TOKEN: this.manager.token,\n    });\n\n    /**\n     * Whether the shard's {@link Client} is ready\n     * @type {boolean}\n     */\n    this.ready = false;\n\n    /**\n     * Process of the shard (if {@link ShardingManager#mode} is `process`)\n     * @type {?ChildProcess}\n     */\n    this.process = null;\n\n    /**\n     * Worker of the shard (if {@link ShardingManager#mode} is `worker`)\n     * @type {?Worker}\n     */\n    this.worker = null;\n\n    /**\n     * Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with\n     * @type {Map<string, Promise>}\n     * @private\n     */\n    this._evals = new Map();\n\n    /**\n     * Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with\n     * @type {Map<string, Promise>}\n     * @private\n     */\n    this._fetches = new Map();\n\n    /**\n     * Listener function for the {@link ChildProcess}' `exit` event\n     * @type {Function}\n     * @private\n     */\n    this._exitListener = this._handleExit.bind(this, undefined);\n  }\n\n  /**\n   * Forks a child process or creates a worker thread for the shard.\n   * <warn>You should not need to call this manually.</warn>\n   * @param {number} [spawnTimeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready\n   * before resolving. (-1 or Infinity for no wait)\n   * @returns {Promise<ChildProcess>}\n   */\n  async spawn(spawnTimeout = 30000) {\n    if (this.process) throw new Error('SHARDING_PROCESS_EXISTS', this.id);\n    if (this.worker) throw new Error('SHARDING_WORKER_EXISTS', this.id);\n\n    if (this.manager.mode === 'process') {\n      this.process = childProcess\n        .fork(path.resolve(this.manager.file), this.args, {\n          env: this.env,\n          execArgv: this.execArgv,\n        })\n        .on('message', this._handleMessage.bind(this))\n        .on('exit', this._exitListener);\n    } else if (this.manager.mode === 'worker') {\n      this.worker = new Worker(path.resolve(this.manager.file), { workerData: this.env })\n        .on('message', this._handleMessage.bind(this))\n        .on('exit', this._exitListener);\n    }\n\n    /**\n     * Emitted upon the creation of the shard's child process/worker.\n     * @event Shard#spawn\n     * @param {ChildProcess|Worker} process Child process/worker that was created\n     */\n    this.emit('spawn', this.process || this.worker);\n\n    if (spawnTimeout === -1 || spawnTimeout === Infinity) return this.process || this.worker;\n    await new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(spawnTimeoutTimer);\n        this.off('ready', onReady);\n        this.off('disconnect', onDisconnect);\n        this.off('death', onDeath);\n      };\n\n      const onReady = () => {\n        cleanup();\n        resolve();\n      };\n\n      const onDisconnect = () => {\n        cleanup();\n        reject(new Error('SHARDING_READY_DISCONNECTED', this.id));\n      };\n\n      const onDeath = () => {\n        cleanup();\n        reject(new Error('SHARDING_READY_DIED', this.id));\n      };\n\n      const onTimeout = () => {\n        cleanup();\n        reject(new Error('SHARDING_READY_TIMEOUT', this.id));\n      };\n\n      const spawnTimeoutTimer = setTimeout(onTimeout, spawnTimeout);\n      this.once('ready', onReady);\n      this.once('disconnect', onDisconnect);\n      this.once('death', onDeath);\n    });\n    return this.process || this.worker;\n  }\n\n  /**\n   * Immediately kills the shard's process/worker and does not restart it.\n   */\n  kill() {\n    if (this.process) {\n      this.process.removeListener('exit', this._exitListener);\n      this.process.kill();\n    } else {\n      this.worker.removeListener('exit', this._exitListener);\n      this.worker.terminate();\n    }\n\n    this._handleExit(false);\n  }\n\n  /**\n   * Kills and restarts the shard's process/worker.\n   * @param {number} [delay=500] How long to wait between killing the process/worker and restarting it (in milliseconds)\n   * @param {number} [spawnTimeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready\n   * before resolving. (-1 or Infinity for no wait)\n   * @returns {Promise<ChildProcess>}\n   */\n  async respawn(delay = 500, spawnTimeout) {\n    this.kill();\n    if (delay > 0) await Util.delayFor(delay);\n    return this.spawn(spawnTimeout);\n  }\n\n  /**\n   * Sends a message to the shard's process/worker.\n   * @param {*} message Message to send to the shard\n   * @returns {Promise<Shard>}\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      if (this.process) {\n        this.process.send(message, err => {\n          if (err) reject(err);\n          else resolve(this);\n        });\n      } else {\n        this.worker.postMessage(message);\n        resolve(this);\n      }\n    });\n  }\n\n  /**\n   * Fetches a client property value of the shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<*>}\n   * @example\n   * shard.fetchClientValue('guilds.cache.size')\n   *   .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n   *   .catch(console.error);\n   */\n  fetchClientValue(prop) {\n    if (this._fetches.has(prop)) return this._fetches.get(prop);\n\n    const promise = new Promise((resolve, reject) => {\n      const child = this.process || this.worker;\n\n      const listener = message => {\n        if (!message || message._fetchProp !== prop) return;\n        child.removeListener('message', listener);\n        this._fetches.delete(prop);\n        resolve(message._result);\n      };\n      child.on('message', listener);\n\n      this.send({ _fetchProp: prop }).catch(err => {\n        child.removeListener('message', listener);\n        this._fetches.delete(prop);\n        reject(err);\n      });\n    });\n\n    this._fetches.set(prop, promise);\n    return promise;\n  }\n\n  /**\n   * Evaluates a script or function on the shard, in the context of the {@link Client}.\n   * @param {string|Function} script JavaScript to run on the shard\n   * @returns {Promise<*>} Result of the script execution\n   */\n  eval(script) {\n    if (this._evals.has(script)) return this._evals.get(script);\n\n    const promise = new Promise((resolve, reject) => {\n      const child = this.process || this.worker;\n\n      const listener = message => {\n        if (!message || message._eval !== script) return;\n        child.removeListener('message', listener);\n        this._evals.delete(script);\n        if (!message._error) resolve(message._result);\n        else reject(Util.makeError(message._error));\n      };\n      child.on('message', listener);\n\n      const _eval = typeof script === 'function' ? `(${script})(this)` : script;\n      this.send({ _eval }).catch(err => {\n        child.removeListener('message', listener);\n        this._evals.delete(script);\n        reject(err);\n      });\n    });\n\n    this._evals.set(script, promise);\n    return promise;\n  }\n\n  /**\n   * Handles a message received from the child process/worker.\n   * @param {*} message Message received\n   * @private\n   */\n  _handleMessage(message) {\n    if (message) {\n      // Shard is ready\n      if (message._ready) {\n        this.ready = true;\n        /**\n         * Emitted upon the shard's {@link Client#ready} event.\n         * @event Shard#ready\n         */\n        this.emit('ready');\n        return;\n      }\n\n      // Shard has disconnected\n      if (message._disconnect) {\n        this.ready = false;\n        /**\n         * Emitted upon the shard's {@link Client#disconnect} event.\n         * @event Shard#disconnect\n         */\n        this.emit('disconnect');\n        return;\n      }\n\n      // Shard is attempting to reconnect\n      if (message._reconnecting) {\n        this.ready = false;\n        /**\n         * Emitted upon the shard's {@link Client#reconnecting} event.\n         * @event Shard#reconnecting\n         */\n        this.emit('reconnecting');\n        return;\n      }\n\n      // Shard is requesting a property fetch\n      if (message._sFetchProp) {\n        this.manager.fetchClientValues(message._sFetchProp).then(\n          results => this.send({ _sFetchProp: message._sFetchProp, _result: results }),\n          err => this.send({ _sFetchProp: message._sFetchProp, _error: Util.makePlainError(err) }),\n        );\n        return;\n      }\n\n      // Shard is requesting an eval broadcast\n      if (message._sEval) {\n        this.manager.broadcastEval(message._sEval).then(\n          results => this.send({ _sEval: message._sEval, _result: results }),\n          err => this.send({ _sEval: message._sEval, _error: Util.makePlainError(err) }),\n        );\n        return;\n      }\n\n      // Shard is requesting a respawn of all shards\n      if (message._sRespawnAll) {\n        const { shardDelay, respawnDelay, spawnTimeout } = message._sRespawnAll;\n        this.manager.respawnAll(shardDelay, respawnDelay, spawnTimeout).catch(() => {\n          // Do nothing\n        });\n        return;\n      }\n    }\n\n    /**\n     * Emitted upon receiving a message from the child process/worker.\n     * @event Shard#message\n     * @param {*} message Message that was received\n     */\n    this.emit('message', message);\n  }\n\n  /**\n   * Handles the shard's process/worker exiting.\n   * @param {boolean} [respawn=this.manager.respawn] Whether to spawn the shard again\n   * @private\n   */\n  _handleExit(respawn = this.manager.respawn) {\n    /**\n     * Emitted upon the shard's child process/worker exiting.\n     * @event Shard#death\n     * @param {ChildProcess|Worker} process Child process/worker that exited\n     */\n    this.emit('death', this.process || this.worker);\n\n    this.ready = false;\n    this.process = null;\n    this.worker = null;\n    this._evals.clear();\n    this._fetches.clear();\n\n    if (respawn) this.spawn().catch(err => this.emit('error', err));\n  }\n}\n\nmodule.exports = Shard;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/sharding/Shard.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/sharding/ShardClientUtil.js":
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/sharding/ShardClientUtil.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Events } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Helper class for sharded clients spawned as a child process/worker, such as from a {@link ShardingManager}.\n * Utilises IPC to send and receive data to/from the master process and other shards.\n */\nclass ShardClientUtil {\n  /**\n   * @param {Client} client Client of the current shard\n   * @param {ShardingManagerMode} mode Mode the shard was spawned with\n   */\n  constructor(client, mode) {\n    /**\n     * Client for the shard\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * Mode the shard was spawned with\n     * @type {ShardingManagerMode}\n     */\n    this.mode = mode;\n\n    /**\n     * Message port for the master process (only when {@link ShardClientUtil#mode} is `worker`)\n     * @type {?MessagePort}\n     */\n    this.parentPort = null;\n\n    if (mode === 'process') {\n      process.on('message', this._handleMessage.bind(this));\n      client.on('ready', () => {\n        process.send({ _ready: true });\n      });\n      client.on('disconnect', () => {\n        process.send({ _disconnect: true });\n      });\n      client.on('reconnecting', () => {\n        process.send({ _reconnecting: true });\n      });\n    } else if (mode === 'worker') {\n      this.parentPort = __webpack_require__(/*! worker_threads */ \"worker_threads\").parentPort;\n      this.parentPort.on('message', this._handleMessage.bind(this));\n      client.on('ready', () => {\n        this.parentPort.postMessage({ _ready: true });\n      });\n      client.on('disconnect', () => {\n        this.parentPort.postMessage({ _disconnect: true });\n      });\n      client.on('reconnecting', () => {\n        this.parentPort.postMessage({ _reconnecting: true });\n      });\n    }\n  }\n\n  /**\n   * Array of shard IDs of this client\n   * @type {number[]}\n   * @readonly\n   */\n  get ids() {\n    return this.client.options.shards;\n  }\n\n  /**\n   * Total number of shards\n   * @type {number}\n   * @readonly\n   */\n  get count() {\n    return this.client.options.shardCount;\n  }\n\n  /**\n   * Sends a message to the master process.\n   * @param {*} message Message to send\n   * @returns {Promise<void>}\n   * @emits Shard#message\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      if (this.mode === 'process') {\n        process.send(message, err => {\n          if (err) reject(err);\n          else resolve();\n        });\n      } else if (this.mode === 'worker') {\n        this.parentPort.postMessage(message);\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Fetches a client property value of each shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<Array<*>>}\n   * @example\n   * client.shard.fetchClientValues('guilds.cache.size')\n   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n   *   .catch(console.error);\n   * @see {@link ShardingManager#fetchClientValues}\n   */\n  fetchClientValues(prop) {\n    return new Promise((resolve, reject) => {\n      const parent = this.parentPort || process;\n\n      const listener = message => {\n        if (!message || message._sFetchProp !== prop) return;\n        parent.removeListener('message', listener);\n        if (!message._error) resolve(message._result);\n        else reject(Util.makeError(message._error));\n      };\n      parent.on('message', listener);\n\n      this.send({ _sFetchProp: prop }).catch(err => {\n        parent.removeListener('message', listener);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Evaluates a script or function on all shards, in the context of the {@link Clients}.\n   * @param {string|Function} script JavaScript to run on each shard\n   * @returns {Promise<Array<*>>} Results of the script execution\n   * @example\n   * client.shard.broadcastEval('this.guilds.cache.size')\n   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n   *   .catch(console.error);\n   * @see {@link ShardingManager#broadcastEval}\n   */\n  broadcastEval(script) {\n    return new Promise((resolve, reject) => {\n      const parent = this.parentPort || process;\n      script = typeof script === 'function' ? `(${script})(this)` : script;\n\n      const listener = message => {\n        if (!message || message._sEval !== script) return;\n        parent.removeListener('message', listener);\n        if (!message._error) resolve(message._result);\n        else reject(Util.makeError(message._error));\n      };\n      parent.on('message', listener);\n\n      this.send({ _sEval: script }).catch(err => {\n        parent.removeListener('message', listener);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Requests a respawn of all shards.\n   * @param {number} [shardDelay=5000] How long to wait between shards (in milliseconds)\n   * @param {number} [respawnDelay=500] How long to wait between killing a shard's process/worker and restarting it\n   * (in milliseconds)\n   * @param {number} [spawnTimeout=30000] The amount in milliseconds to wait for a shard to become ready before\n   * continuing to another. (-1 or Infinity for no wait)\n   * @returns {Promise<void>} Resolves upon the message being sent\n   * @see {@link ShardingManager#respawnAll}\n   */\n  respawnAll(shardDelay = 5000, respawnDelay = 500, spawnTimeout = 30000) {\n    return this.send({ _sRespawnAll: { shardDelay, respawnDelay, spawnTimeout } });\n  }\n\n  /**\n   * Handles an IPC message.\n   * @param {*} message Message received\n   * @private\n   */\n  async _handleMessage(message) {\n    if (!message) return;\n    if (message._fetchProp) {\n      const props = message._fetchProp.split('.');\n      let value = this.client;\n      for (const prop of props) value = value[prop];\n      this._respond('fetchProp', { _fetchProp: message._fetchProp, _result: value });\n    } else if (message._eval) {\n      try {\n        this._respond('eval', { _eval: message._eval, _result: await this.client._eval(message._eval) });\n      } catch (err) {\n        this._respond('eval', { _eval: message._eval, _error: Util.makePlainError(err) });\n      }\n    }\n  }\n\n  /**\n   * Sends a message to the master process, emitting an error from the client upon failure.\n   * @param {string} type Type of response to send\n   * @param {*} message Message to send\n   * @private\n   */\n  _respond(type, message) {\n    this.send(message).catch(err => {\n      err.message = `Error when sending ${type} response to master process: ${err.message}`;\n      /**\n       * Emitted when the client encounters an error.\n       * @event Client#error\n       * @param {Error} error The error encountered\n       */\n      this.client.emit(Events.ERROR, err);\n    });\n  }\n\n  /**\n   * Creates/gets the singleton of this class.\n   * @param {Client} client The client to use\n   * @param {ShardingManagerMode} mode Mode the shard was spawned with\n   * @returns {ShardClientUtil}\n   */\n  static singleton(client, mode) {\n    if (!this._singleton) {\n      this._singleton = new this(client, mode);\n    } else {\n      client.emit(\n        Events.WARN,\n        'Multiple clients created in child process/worker; only the first will handle sharding helpers.',\n      );\n    }\n    return this._singleton;\n  }\n}\n\nmodule.exports = ShardClientUtil;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/sharding/ShardClientUtil.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/sharding/ShardingManager.js":
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/sharding/ShardingManager.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst Shard = __webpack_require__(/*! ./Shard */ \"./node_modules/discord.js/src/sharding/Shard.js\");\nconst { Error, TypeError, RangeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * This is a utility class that makes multi-process sharding of a bot an easy and painless experience.\n * It works by spawning a self-contained {@link ChildProcess} or {@link Worker} for each individual shard, each\n * containing its own instance of your bot's {@link Client}. They all have a line of communication with the master\n * process, and there are several useful methods that utilise it in order to simplify tasks that are normally difficult\n * with sharding. It can spawn a specific number of shards or the amount that Discord suggests for the bot, and takes a\n * path to your main bot script to launch for each one.\n * @extends {EventEmitter}\n */\nclass ShardingManager extends EventEmitter {\n  /**\n   * The mode to spawn shards with for a {@link ShardingManager}: either \"process\" to use child processes, or\n   * \"worker\" to use workers. The \"worker\" mode relies on the experimental\n   * [Worker threads](https://nodejs.org/api/worker_threads.html) functionality that is present in Node v10.5.0 or\n   * newer. Node must be started with the `--experimental-worker` flag to expose it.\n   * @typedef {Object} ShardingManagerMode\n   */\n\n  /**\n   * @param {string} file Path to your shard script file\n   * @param {Object} [options] Options for the sharding manager\n   * @param {string|number} [options.totalShards='auto'] Number of total shards of all shard managers or \"auto\"\n   * @param {string|number[]} [options.shardList='auto'] List of shards to spawn or \"auto\"\n   * @param {ShardingManagerMode} [options.mode='process'] Which mode to use for shards\n   * @param {boolean} [options.respawn=true] Whether shards should automatically respawn upon exiting\n   * @param {string[]} [options.shardArgs=[]] Arguments to pass to the shard script when spawning\n   * (only available when using the `process` mode)\n   * @param {string[]} [options.execArgv=[]] Arguments to pass to the shard script executable when spawning\n   * (only available when using the `process` mode)\n   * @param {string} [options.token] Token to use for automatic shard count and passing to shards\n   */\n  constructor(file, options = {}) {\n    super();\n    options = Util.mergeDefault(\n      {\n        totalShards: 'auto',\n        mode: 'process',\n        respawn: true,\n        shardArgs: [],\n        execArgv: [],\n        token: process.env.DISCORD_TOKEN,\n      },\n      options,\n    );\n\n    /**\n     * Path to the shard script file\n     * @type {string}\n     */\n    this.file = file;\n    if (!file) throw new Error('CLIENT_INVALID_OPTION', 'File', 'specified.');\n    if (!path.isAbsolute(file)) this.file = path.resolve(process.cwd(), file);\n    const stats = fs.statSync(this.file);\n    if (!stats.isFile()) throw new Error('CLIENT_INVALID_OPTION', 'File', 'a file');\n\n    /**\n     * List of shards this sharding manager spawns\n     * @type {string|number[]}\n     */\n    this.shardList = options.shardList || 'auto';\n    if (this.shardList !== 'auto') {\n      if (!Array.isArray(this.shardList)) {\n        throw new TypeError('CLIENT_INVALID_OPTION', 'shardList', 'an array.');\n      }\n      this.shardList = [...new Set(this.shardList)];\n      if (this.shardList.length < 1) throw new RangeError('CLIENT_INVALID_OPTION', 'shardList', 'at least 1 ID.');\n      if (\n        this.shardList.some(\n          shardID => typeof shardID !== 'number' || isNaN(shardID) || !Number.isInteger(shardID) || shardID < 0,\n        )\n      ) {\n        throw new TypeError('CLIENT_INVALID_OPTION', 'shardList', 'an array of positive integers.');\n      }\n    }\n\n    /**\n     * Amount of shards that all sharding managers spawn in total\n     * @type {number}\n     */\n    this.totalShards = options.totalShards || 'auto';\n    if (this.totalShards !== 'auto') {\n      if (typeof this.totalShards !== 'number' || isNaN(this.totalShards)) {\n        throw new TypeError('CLIENT_INVALID_OPTION', 'Amount of shards', 'a number.');\n      }\n      if (this.totalShards < 1) throw new RangeError('CLIENT_INVALID_OPTION', 'Amount of shards', 'at least 1.');\n      if (!Number.isInteger(this.totalShards)) {\n        throw new RangeError('CLIENT_INVALID_OPTION', 'Amount of shards', 'an integer.');\n      }\n    }\n\n    /**\n     * Mode for shards to spawn with\n     * @type {ShardingManagerMode}\n     */\n    this.mode = options.mode;\n    if (this.mode !== 'process' && this.mode !== 'worker') {\n      throw new RangeError('CLIENT_INVALID_OPTION', 'Sharding mode', '\"process\" or \"worker\"');\n    }\n\n    /**\n     * Whether shards should automatically respawn upon exiting\n     * @type {boolean}\n     */\n    this.respawn = options.respawn;\n\n    /**\n     * An array of arguments to pass to shards (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.shardArgs = options.shardArgs;\n\n    /**\n     * An array of arguments to pass to the executable (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.execArgv = options.execArgv;\n\n    /**\n     * Token to use for obtaining the automatic shard count, and passing to shards\n     * @type {?string}\n     */\n    this.token = options.token ? options.token.replace(/^Bot\\s*/i, '') : null;\n\n    /**\n     * A collection of shards that this manager has spawned\n     * @type {Collection<number, Shard>}\n     */\n    this.shards = new Collection();\n\n    process.env.SHARDING_MANAGER = true;\n    process.env.SHARDING_MANAGER_MODE = this.mode;\n    process.env.DISCORD_TOKEN = this.token;\n  }\n\n  /**\n   * Creates a single shard.\n   * <warn>Using this method is usually not necessary if you use the spawn method.</warn>\n   * @param {number} [id=this.shards.size] ID of the shard to create\n   * <info>This is usually not necessary to manually specify.</info>\n   * @returns {Shard} Note that the created shard needs to be explicitly spawned using its spawn method.\n   */\n  createShard(id = this.shards.size) {\n    const shard = new Shard(this, id);\n    this.shards.set(id, shard);\n    /**\n     * Emitted upon creating a shard.\n     * @event ShardingManager#shardCreate\n     * @param {Shard} shard Shard that was created\n     */\n    this.emit('shardCreate', shard);\n    return shard;\n  }\n\n  /**\n   * Spawns multiple shards.\n   * @param {number|string} [amount=this.totalShards] Number of shards to spawn\n   * @param {number} [delay=5500] How long to wait in between spawning each shard (in milliseconds)\n   * @param {number} [spawnTimeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready\n   * before resolving. (-1 or Infinity for no wait)\n   * @returns {Promise<Collection<number, Shard>>}\n   */\n  async spawn(amount = this.totalShards, delay = 5500, spawnTimeout) {\n    // Obtain/verify the number of shards to spawn\n    if (amount === 'auto') {\n      amount = await Util.fetchRecommendedShards(this.token);\n    } else {\n      if (typeof amount !== 'number' || isNaN(amount)) {\n        throw new TypeError('CLIENT_INVALID_OPTION', 'Amount of shards', 'a number.');\n      }\n      if (amount < 1) throw new RangeError('CLIENT_INVALID_OPTION', 'Amount of shards', 'at least 1.');\n      if (!Number.isInteger(amount)) {\n        throw new TypeError('CLIENT_INVALID_OPTION', 'Amount of shards', 'an integer.');\n      }\n    }\n\n    // Make sure this many shards haven't already been spawned\n    if (this.shards.size >= amount) throw new Error('SHARDING_ALREADY_SPAWNED', this.shards.size);\n    if (this.shardList === 'auto' || this.totalShards === 'auto' || this.totalShards !== amount) {\n      this.shardList = [...Array(amount).keys()];\n    }\n    if (this.totalShards === 'auto' || this.totalShards !== amount) {\n      this.totalShards = amount;\n    }\n\n    if (this.shardList.some(shardID => shardID >= amount)) {\n      throw new RangeError(\n        'CLIENT_INVALID_OPTION',\n        'Amount of shards',\n        'bigger than the highest shardID in the shardList option.',\n      );\n    }\n\n    // Spawn the shards\n    for (const shardID of this.shardList) {\n      const promises = [];\n      const shard = this.createShard(shardID);\n      promises.push(shard.spawn(spawnTimeout));\n      if (delay > 0 && this.shards.size !== this.shardList.length) promises.push(Util.delayFor(delay));\n      await Promise.all(promises); // eslint-disable-line no-await-in-loop\n    }\n\n    return this.shards;\n  }\n\n  /**\n   * Sends a message to all shards.\n   * @param {*} message Message to be sent to the shards\n   * @returns {Promise<Shard[]>}\n   */\n  broadcast(message) {\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.send(message));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Evaluates a script on all shards, in the context of the {@link Client}s.\n   * @param {string} script JavaScript to run on each shard\n   * @returns {Promise<Array<*>>} Results of the script execution\n   */\n  broadcastEval(script) {\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.eval(script));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Fetches a client property value of each shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<Array<*>>}\n   * @example\n   * manager.fetchClientValues('guilds.cache.size')\n   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n   *   .catch(console.error);\n   */\n  fetchClientValues(prop) {\n    if (this.shards.size === 0) return Promise.reject(new Error('SHARDING_NO_SHARDS'));\n    if (this.shards.size !== this.shardList.length) return Promise.reject(new Error('SHARDING_IN_PROCESS'));\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.fetchClientValue(prop));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Kills all running shards and respawns them.\n   * @param {number} [shardDelay=5000] How long to wait between shards (in milliseconds)\n   * @param {number} [respawnDelay=500] How long to wait between killing a shard's process and restarting it\n   * (in milliseconds)\n   * @param {number} [spawnTimeout=30000] The amount in milliseconds to wait for a shard to become ready before\n   * continuing to another. (-1 or Infinity for no wait)\n   * @returns {Promise<Collection<string, Shard>>}\n   */\n  async respawnAll(shardDelay = 5000, respawnDelay = 500, spawnTimeout) {\n    let s = 0;\n    for (const shard of this.shards.values()) {\n      const promises = [shard.respawn(respawnDelay, spawnTimeout)];\n      if (++s < this.shards.size && shardDelay > 0) promises.push(Util.delayFor(shardDelay));\n      await Promise.all(promises); // eslint-disable-line no-await-in-loop\n    }\n    return this.shards;\n  }\n}\n\nmodule.exports = ShardingManager;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/sharding/ShardingManager.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/APIMessage.js":
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/APIMessage.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst MessageAttachment = __webpack_require__(/*! ./MessageAttachment */ \"./node_modules/discord.js/src/structures/MessageAttachment.js\");\nconst MessageEmbed = __webpack_require__(/*! ./MessageEmbed */ \"./node_modules/discord.js/src/structures/MessageEmbed.js\");\nconst { RangeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst { browser } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst DataResolver = __webpack_require__(/*! ../util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\");\nconst MessageFlags = __webpack_require__(/*! ../util/MessageFlags */ \"./node_modules/discord.js/src/util/MessageFlags.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a message to be sent to the API.\n */\nclass APIMessage {\n  /**\n   * @param {MessageTarget} target - The target for this message to be sent to\n   * @param {MessageOptions|WebhookMessageOptions} options - Options passed in from send\n   */\n  constructor(target, options) {\n    /**\n     * The target for this message to be sent to\n     * @type {MessageTarget}\n     */\n    this.target = target;\n\n    /**\n     * Options passed in from send\n     * @type {MessageOptions|WebhookMessageOptions}\n     */\n    this.options = options;\n\n    /**\n     * Data sendable to the API\n     * @type {?Object}\n     */\n    this.data = null;\n\n    /**\n     * Files sendable to the API\n     * @type {?Object[]}\n     */\n    this.files = null;\n  }\n\n  /**\n   * Whether or not the target is a webhook\n   * @type {boolean}\n   * @readonly\n   */\n  get isWebhook() {\n    const Webhook = __webpack_require__(/*! ./Webhook */ \"./node_modules/discord.js/src/structures/Webhook.js\");\n    const WebhookClient = __webpack_require__(/*! ../client/WebhookClient */ \"./node_modules/discord.js/src/client/WebhookClient.js\");\n    return this.target instanceof Webhook || this.target instanceof WebhookClient;\n  }\n\n  /**\n   * Whether or not the target is a user\n   * @type {boolean}\n   * @readonly\n   */\n  get isUser() {\n    const User = __webpack_require__(/*! ./User */ \"./node_modules/discord.js/src/structures/User.js\");\n    const GuildMember = __webpack_require__(/*! ./GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\");\n    return this.target instanceof User || this.target instanceof GuildMember;\n  }\n\n  /**\n   * Whether or not the target is a message\n   * @type {boolean}\n   * @readonly\n   */\n  get isMessage() {\n    const Message = __webpack_require__(/*! ./Message */ \"./node_modules/discord.js/src/structures/Message.js\");\n    return this.target instanceof Message;\n  }\n\n  /**\n   * Makes the content of this message.\n   * @returns {?(string|string[])}\n   */\n  makeContent() {\n    const GuildMember = __webpack_require__(/*! ./GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\");\n\n    let content;\n    if (this.options.content === null) {\n      content = '';\n    } else if (typeof this.options.content !== 'undefined') {\n      content = Util.resolveString(this.options.content);\n    }\n\n    const disableMentions =\n      typeof this.options.disableMentions === 'undefined'\n        ? this.target.client.options.disableMentions\n        : this.options.disableMentions;\n    if (disableMentions === 'all') {\n      content = Util.removeMentions(content || '');\n    } else if (disableMentions === 'everyone') {\n      content = (content || '').replace(/@([^<>@ ]*)/gmsu, (match, target) => {\n        if (target.match(/^[&!]?\\d+$/)) {\n          return `@${target}`;\n        } else {\n          return `@\\u200b${target}`;\n        }\n      });\n    }\n\n    const isSplit = typeof this.options.split !== 'undefined' && this.options.split !== false;\n    const isCode = typeof this.options.code !== 'undefined' && this.options.code !== false;\n    const splitOptions = isSplit ? { ...this.options.split } : undefined;\n\n    let mentionPart = '';\n    if (this.options.reply && !this.isUser && this.target.type !== 'dm') {\n      const id = this.target.client.users.resolveID(this.options.reply);\n      mentionPart = `<@${this.options.reply instanceof GuildMember && this.options.reply.nickname ? '!' : ''}${id}>, `;\n      if (isSplit) {\n        splitOptions.prepend = `${mentionPart}${splitOptions.prepend || ''}`;\n      }\n    }\n\n    if (content || mentionPart) {\n      if (isCode) {\n        const codeName = typeof this.options.code === 'string' ? this.options.code : '';\n        content = `${mentionPart}\\`\\`\\`${codeName}\\n${Util.cleanCodeBlockContent(content || '')}\\n\\`\\`\\``;\n        if (isSplit) {\n          splitOptions.prepend = `${splitOptions.prepend || ''}\\`\\`\\`${codeName}\\n`;\n          splitOptions.append = `\\n\\`\\`\\`${splitOptions.append || ''}`;\n        }\n      } else if (mentionPart) {\n        content = `${mentionPart}${content || ''}`;\n      }\n\n      if (isSplit) {\n        content = Util.splitMessage(content || '', splitOptions);\n      }\n    }\n\n    return content;\n  }\n\n  /**\n   * Resolves data.\n   * @returns {APIMessage}\n   */\n  resolveData() {\n    if (this.data) return this;\n\n    const content = this.makeContent();\n    const tts = Boolean(this.options.tts);\n\n    let nonce;\n    if (typeof this.options.nonce !== 'undefined') {\n      nonce = parseInt(this.options.nonce);\n      if (isNaN(nonce) || nonce < 0) throw new RangeError('MESSAGE_NONCE_TYPE');\n    }\n\n    const embedLikes = [];\n    if (this.isWebhook) {\n      if (this.options.embeds) {\n        embedLikes.push(...this.options.embeds);\n      }\n    } else if (this.options.embed) {\n      embedLikes.push(this.options.embed);\n    }\n    const embeds = embedLikes.map(e => new MessageEmbed(e).toJSON());\n\n    let username;\n    let avatarURL;\n    if (this.isWebhook) {\n      username = this.options.username || this.target.name;\n      if (this.options.avatarURL) avatarURL = this.options.avatarURL;\n    }\n\n    let flags;\n    if (this.isMessage) {\n      // eslint-disable-next-line eqeqeq\n      flags = this.options.flags != null ? new MessageFlags(this.options.flags).bitfield : this.target.flags.bitfield;\n    }\n\n    const allowedMentions =\n      typeof this.options.allowedMentions === 'undefined'\n        ? this.target.client.options.allowedMentions\n        : this.options.allowedMentions;\n\n    this.data = {\n      content,\n      tts,\n      nonce,\n      embed: this.options.embed === null ? null : embeds[0],\n      embeds,\n      username,\n      avatar_url: avatarURL,\n      allowed_mentions: allowedMentions,\n      flags,\n    };\n    return this;\n  }\n\n  /**\n   * Resolves files.\n   * @returns {Promise<APIMessage>}\n   */\n  async resolveFiles() {\n    if (this.files) return this;\n\n    const embedLikes = [];\n    if (this.isWebhook) {\n      if (this.options.embeds) {\n        embedLikes.push(...this.options.embeds);\n      }\n    } else if (this.options.embed) {\n      embedLikes.push(this.options.embed);\n    }\n\n    const fileLikes = [];\n    if (this.options.files) {\n      fileLikes.push(...this.options.files);\n    }\n    for (const embed of embedLikes) {\n      if (embed.files) {\n        fileLikes.push(...embed.files);\n      }\n    }\n\n    this.files = await Promise.all(fileLikes.map(f => this.constructor.resolveFile(f)));\n    return this;\n  }\n\n  /**\n   * Converts this APIMessage into an array of APIMessages for each split content\n   * @returns {APIMessage[]}\n   */\n  split() {\n    if (!this.data) this.resolveData();\n\n    if (!Array.isArray(this.data.content)) return [this];\n\n    const apiMessages = [];\n\n    for (let i = 0; i < this.data.content.length; i++) {\n      let data;\n      let opt;\n\n      if (i === this.data.content.length - 1) {\n        data = { ...this.data, content: this.data.content[i] };\n        opt = { ...this.options, content: this.data.content[i] };\n      } else {\n        data = { content: this.data.content[i], tts: this.data.tts };\n        opt = { content: this.data.content[i], tts: this.data.tts };\n      }\n\n      const apiMessage = new APIMessage(this.target, opt);\n      apiMessage.data = data;\n      apiMessages.push(apiMessage);\n    }\n\n    return apiMessages;\n  }\n\n  /**\n   * Resolves a single file into an object sendable to the API.\n   * @param {BufferResolvable|Stream|FileOptions|MessageAttachment} fileLike Something that could be resolved to a file\n   * @returns {Object}\n   */\n  static async resolveFile(fileLike) {\n    let attachment;\n    let name;\n\n    const findName = thing => {\n      if (typeof thing === 'string') {\n        return Util.basename(thing);\n      }\n\n      if (thing.path) {\n        return Util.basename(thing.path);\n      }\n\n      return 'file.jpg';\n    };\n\n    const ownAttachment =\n      typeof fileLike === 'string' ||\n      fileLike instanceof (browser ? ArrayBuffer : Buffer) ||\n      typeof fileLike.pipe === 'function';\n    if (ownAttachment) {\n      attachment = fileLike;\n      name = findName(attachment);\n    } else {\n      attachment = fileLike.attachment;\n      name = fileLike.name || findName(attachment);\n    }\n\n    const resource = await DataResolver.resolveFile(attachment);\n    return { attachment, name, file: resource };\n  }\n\n  /**\n   * Partitions embeds and attachments.\n   * @param {Array<MessageEmbed|MessageAttachment>} items Items to partition\n   * @returns {Array<MessageEmbed[], MessageAttachment[]>}\n   */\n  static partitionMessageAdditions(items) {\n    const embeds = [];\n    const files = [];\n    for (const item of items) {\n      if (item instanceof MessageEmbed) {\n        embeds.push(item);\n      } else if (item instanceof MessageAttachment) {\n        files.push(item);\n      }\n    }\n\n    return [embeds, files];\n  }\n\n  /**\n   * Transforms the user-level arguments into a final options object. Passing a transformed options object alone into\n   * this method will keep it the same, allowing for the reuse of the final options object.\n   * @param {StringResolvable} [content] Content to send\n   * @param {MessageOptions|WebhookMessageOptions|MessageAdditions} [options={}] Options to use\n   * @param {MessageOptions|WebhookMessageOptions} [extra={}] Extra options to add onto transformed options\n   * @param {boolean} [isWebhook=false] Whether or not to use WebhookMessageOptions as the result\n   * @returns {MessageOptions|WebhookMessageOptions}\n   */\n  static transformOptions(content, options, extra = {}, isWebhook = false) {\n    if (!options && typeof content === 'object' && !Array.isArray(content)) {\n      options = content;\n      content = undefined;\n    }\n\n    if (!options) {\n      options = {};\n    } else if (options instanceof MessageEmbed) {\n      return isWebhook ? { content, embeds: [options], ...extra } : { content, embed: options, ...extra };\n    } else if (options instanceof MessageAttachment) {\n      return { content, files: [options], ...extra };\n    }\n\n    if (Array.isArray(options)) {\n      const [embeds, files] = this.partitionMessageAdditions(options);\n      return isWebhook ? { content, embeds, files, ...extra } : { content, embed: embeds[0], files, ...extra };\n    } else if (Array.isArray(content)) {\n      const [embeds, files] = this.partitionMessageAdditions(content);\n      if (embeds.length || files.length) {\n        return isWebhook ? { embeds, files, ...extra } : { embed: embeds[0], files, ...extra };\n      }\n    }\n\n    return { content, ...options, ...extra };\n  }\n\n  /**\n   * Creates an `APIMessage` from user-level arguments.\n   * @param {MessageTarget} target Target to send to\n   * @param {StringResolvable} [content] Content to send\n   * @param {MessageOptions|WebhookMessageOptions|MessageAdditions} [options={}] Options to use\n   * @param {MessageOptions|WebhookMessageOptions} [extra={}] - Extra options to add onto transformed options\n   * @returns {MessageOptions|WebhookMessageOptions}\n   */\n  static create(target, content, options, extra = {}) {\n    const Webhook = __webpack_require__(/*! ./Webhook */ \"./node_modules/discord.js/src/structures/Webhook.js\");\n    const WebhookClient = __webpack_require__(/*! ../client/WebhookClient */ \"./node_modules/discord.js/src/client/WebhookClient.js\");\n\n    const isWebhook = target instanceof Webhook || target instanceof WebhookClient;\n    const transformed = this.transformOptions(content, options, extra, isWebhook);\n    return new this(target, transformed);\n  }\n}\n\nmodule.exports = APIMessage;\n\n/**\n * A target for a message.\n * @typedef {TextChannel|DMChannel|User|GuildMember|Webhook|WebhookClient} MessageTarget\n */\n\n/**\n * Additional items that can be sent with a message.\n * @typedef {MessageEmbed|MessageAttachment|Array<MessageEmbed|MessageAttachment>} MessageAdditions\n */\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/APIMessage.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Base.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Base.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a data model that is identifiable by a Snowflake (i.e. Discord API data models).\n */\nclass Base {\n  constructor(client) {\n    /**\n     * The client that instantiated this\n     * @name Base#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n\n  _patch(data) {\n    return data;\n  }\n\n  _update(data) {\n    const clone = this._clone();\n    this._patch(data);\n    return clone;\n  }\n\n  toJSON(...props) {\n    return Util.flatten(this, ...props);\n  }\n\n  valueOf() {\n    return this.id;\n  }\n}\n\nmodule.exports = Base;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Base.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/BaseGuildEmoji.js":
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/BaseGuildEmoji.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Emoji = __webpack_require__(/*! ./Emoji */ \"./node_modules/discord.js/src/structures/Emoji.js\");\n\n/**\n * Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.\n * @extends {Emoji}\n */\nclass BaseGuildEmoji extends Emoji {\n  constructor(client, data, guild) {\n    super(client, data);\n\n    /**\n     * The guild this emoji is a part of\n     * @type {Guild|GuildPreview}\n     */\n    this.guild = guild;\n\n    /**\n     * Array of role ids this emoji is active for\n     * @name BaseGuildEmoji#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n    Object.defineProperty(this, '_roles', { value: [], writable: true });\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if (data.name) this.name = data.name;\n\n    /**\n     * Whether or not this emoji requires colons surrounding it\n     * @type {boolean}\n     * @name GuildEmoji#requiresColons\n     */\n    if (typeof data.require_colons !== 'undefined') this.requiresColons = data.require_colons;\n\n    /**\n     * Whether this emoji is managed by an external service\n     * @type {boolean}\n     * @name GuildEmoji#managed\n     */\n    if (typeof data.managed !== 'undefined') this.managed = data.managed;\n\n    /**\n     * Whether this emoji is available\n     * @type {boolean}\n     * @name GuildEmoji#available\n     */\n    if (typeof data.available !== 'undefined') this.available = data.available;\n\n    if (data.roles) this._roles = data.roles;\n  }\n}\n\nmodule.exports = BaseGuildEmoji;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/BaseGuildEmoji.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/CategoryChannel.js":
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/CategoryChannel.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst GuildChannel = __webpack_require__(/*! ./GuildChannel */ \"./node_modules/discord.js/src/structures/GuildChannel.js\");\n\n/**\n * Represents a guild category channel on Discord.\n * @extends {GuildChannel}\n */\nclass CategoryChannel extends GuildChannel {\n  /**\n   * Channels that are a part of this category\n   * @type {?Collection<Snowflake, GuildChannel>}\n   * @readonly\n   */\n  get children() {\n    return this.guild.channels.cache.filter(c => c.parentID === this.id);\n  }\n\n  /**\n   * Sets the category parent of this channel.\n   * <warn>It is not currently possible to set the parent of a CategoryChannel.</warn>\n   * @method setParent\n   * @memberof CategoryChannel\n   * @instance\n   * @param {?GuildChannel|Snowflake} channel Parent channel\n   * @param {Object} [options={}] Options to pass\n   * @param {boolean} [options.lockPermissions=true] Lock the permissions to what the parent's permissions are\n   * @param {string} [options.reason] Reason for modifying the parent of this channel\n   * @returns {Promise<GuildChannel>}\n   */\n}\n\nmodule.exports = CategoryChannel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/CategoryChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Channel.js":
/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Channel.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst { ChannelTypes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\n\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n */\nclass Channel extends Base {\n  constructor(client, data) {\n    super(client);\n\n    const type = Object.keys(ChannelTypes)[data.type];\n    /**\n     * The type of the channel, either:\n     * * `dm` - a DM channel\n     * * `text` - a guild text channel\n     * * `voice` - a guild voice channel\n     * * `category` - a guild category channel\n     * * `news` - a guild news channel\n     * * `store` - a guild store channel\n     * * `unknown` - a generic channel of unknown type, could be Channel or GuildChannel\n     * @type {string}\n     */\n    this.type = type ? type.toLowerCase() : 'unknown';\n\n    /**\n     * Whether the channel has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The unique ID of the channel\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return `<#${this.id}>`;\n  }\n\n  /**\n   * Deletes this channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.client.api\n      .channels(this.id)\n      .delete()\n      .then(() => this);\n  }\n\n  /**\n   * Fetches this channel.\n   * @returns {Promise<Channel>}\n   */\n  fetch() {\n    return this.client.channels.fetch(this.id, true);\n  }\n\n  static create(client, data, guild) {\n    const Structures = __webpack_require__(/*! ../util/Structures */ \"./node_modules/discord.js/src/util/Structures.js\");\n    let channel;\n    if (!data.guild_id && !guild) {\n      if ((data.recipients && data.type !== ChannelTypes.GROUP) || data.type === ChannelTypes.DM) {\n        const DMChannel = Structures.get('DMChannel');\n        channel = new DMChannel(client, data);\n      } else if (data.type === ChannelTypes.GROUP) {\n        const PartialGroupDMChannel = __webpack_require__(/*! ./PartialGroupDMChannel */ \"./node_modules/discord.js/src/structures/PartialGroupDMChannel.js\");\n        channel = new PartialGroupDMChannel(client, data);\n      }\n    } else {\n      guild = guild || client.guilds.cache.get(data.guild_id);\n      if (guild) {\n        switch (data.type) {\n          case ChannelTypes.TEXT: {\n            const TextChannel = Structures.get('TextChannel');\n            channel = new TextChannel(guild, data);\n            break;\n          }\n          case ChannelTypes.VOICE: {\n            const VoiceChannel = Structures.get('VoiceChannel');\n            channel = new VoiceChannel(guild, data);\n            break;\n          }\n          case ChannelTypes.CATEGORY: {\n            const CategoryChannel = Structures.get('CategoryChannel');\n            channel = new CategoryChannel(guild, data);\n            break;\n          }\n          case ChannelTypes.NEWS: {\n            const NewsChannel = Structures.get('NewsChannel');\n            channel = new NewsChannel(guild, data);\n            break;\n          }\n          case ChannelTypes.STORE: {\n            const StoreChannel = Structures.get('StoreChannel');\n            channel = new StoreChannel(guild, data);\n            break;\n          }\n        }\n        if (channel) guild.channels.cache.set(channel.id, channel);\n      }\n    }\n    return channel;\n  }\n\n  toJSON(...props) {\n    return super.toJSON({ createdTimestamp: true }, ...props);\n  }\n}\n\nmodule.exports = Channel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Channel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/ClientApplication.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientApplication.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst Team = __webpack_require__(/*! ./Team */ \"./node_modules/discord.js/src/structures/Team.js\");\nconst { ClientApplicationAssetTypes, Endpoints } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\n\nconst AssetTypes = Object.keys(ClientApplicationAssetTypes);\n\n/**\n * Represents a Client OAuth2 Application.\n * @extends {Base}\n */\nclass ClientApplication extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the app\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the app\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The app's description\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The app's icon hash\n     * @type {string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The app's cover image\n     * @type {?string}\n     */\n    this.cover = data.cover_image || null;\n\n    /**\n     * The app's RPC origins, if enabled\n     * @type {string[]}\n     */\n    this.rpcOrigins = data.rpc_origins || [];\n\n    /**\n     * If this app's bot requires a code grant when using the OAuth2 flow\n     * @type {?boolean}\n     */\n    this.botRequireCodeGrant = typeof data.bot_require_code_grant !== 'undefined' ? data.bot_require_code_grant : null;\n\n    /**\n     * If this app's bot is public\n     * @type {?boolean}\n     */\n    this.botPublic = typeof data.bot_public !== 'undefined' ? data.bot_public : null;\n\n    /**\n     * The owner of this OAuth application\n     * @type {?User|Team}\n     */\n    this.owner = data.team ? new Team(this.client, data.team) : data.owner ? this.client.users.add(data.owner) : null;\n  }\n\n  /**\n   * The timestamp the app was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the app was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the application's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the icon\n   */\n  iconURL({ format, size } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.AppIcon(this.id, this.icon, { format, size });\n  }\n\n  /**\n   * A link to this application's cover image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the cover image\n   */\n  coverImage({ format, size } = {}) {\n    if (!this.cover) return null;\n    return Endpoints.CDN(this.client.options.http.cdn).AppIcon(this.id, this.cover, { format, size });\n  }\n\n  /**\n   * Asset data.\n   * @typedef {Object} ClientAsset\n   * @property {Snowflake} id The asset ID\n   * @property {string} name The asset name\n   * @property {string} type The asset type\n   */\n\n  /**\n   * Gets the clients rich presence assets.\n   * @returns {Promise<Array<ClientAsset>>}\n   */\n  fetchAssets() {\n    return this.client.api.oauth2\n      .applications(this.id)\n      .assets.get()\n      .then(assets =>\n        assets.map(a => ({\n          id: a.id,\n          name: a.name,\n          type: AssetTypes[a.type - 1],\n        })),\n      );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the application's name instead of the\n   * ClientApplication object.\n   * @returns {string}\n   * @example\n   * // Logs: Application name: My App\n   * console.log(`Application name: ${application}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = ClientApplication;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/ClientApplication.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/ClientPresence.js":
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientPresence.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { Presence } = __webpack_require__(/*! ./Presence */ \"./node_modules/discord.js/src/structures/Presence.js\");\nconst { TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { ActivityTypes, OPCodes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\nclass ClientPresence extends Presence {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the client presence\n   */\n  constructor(client, data = {}) {\n    super(client, Object.assign(data, { status: 'online', user: { id: null } }));\n  }\n\n  async set(presence) {\n    const packet = await this._parse(presence);\n    this.patch(packet);\n    if (typeof presence.shardID === 'undefined') {\n      this.client.ws.broadcast({ op: OPCodes.STATUS_UPDATE, d: packet });\n    } else if (Array.isArray(presence.shardID)) {\n      for (const shardID of presence.shardID) {\n        this.client.ws.shards.get(shardID).send({ op: OPCodes.STATUS_UPDATE, d: packet });\n      }\n    } else {\n      this.client.ws.shards.get(presence.shardID).send({ op: OPCodes.STATUS_UPDATE, d: packet });\n    }\n    return this;\n  }\n\n  async _parse({ status, since, afk, activity }) {\n    const applicationID = activity && (activity.application ? activity.application.id || activity.application : null);\n    let assets = new Collection();\n    if (activity) {\n      if (typeof activity.name !== 'string') throw new TypeError('INVALID_TYPE', 'name', 'string');\n      if (!activity.type) activity.type = 0;\n      if (activity.assets && applicationID) {\n        try {\n          const a = await this.client.api.oauth2.applications(applicationID).assets.get();\n          for (const asset of a) assets.set(asset.name, asset.id);\n        } catch {} // eslint-disable-line no-empty\n      }\n    }\n\n    const packet = {\n      afk: afk != null ? afk : false, // eslint-disable-line eqeqeq\n      since: since != null ? since : null, // eslint-disable-line eqeqeq\n      status: status || this.status,\n      game: activity\n        ? {\n            type: activity.type,\n            name: activity.name,\n            url: activity.url,\n            details: activity.details || undefined,\n            state: activity.state || undefined,\n            assets: activity.assets\n              ? {\n                  large_text: activity.assets.largeText || undefined,\n                  small_text: activity.assets.smallText || undefined,\n                  large_image: assets.get(activity.assets.largeImage) || activity.assets.largeImage,\n                  small_image: assets.get(activity.assets.smallImage) || activity.assets.smallImage,\n                }\n              : undefined,\n            timestamps: activity.timestamps || undefined,\n            party: activity.party || undefined,\n            application_id: applicationID || undefined,\n            secrets: activity.secrets || undefined,\n            instance: activity.instance || undefined,\n          }\n        : null,\n    };\n\n    if ((status || afk || since) && !activity) {\n      packet.game = this.activities[0] || null;\n    }\n\n    if (packet.game) {\n      packet.game.type =\n        typeof packet.game.type === 'number' ? packet.game.type : ActivityTypes.indexOf(packet.game.type);\n    }\n\n    return packet;\n  }\n}\n\nmodule.exports = ClientPresence;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/ClientPresence.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/ClientUser.js":
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUser.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst DataResolver = __webpack_require__(/*! ../util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\");\nconst Structures = __webpack_require__(/*! ../util/Structures */ \"./node_modules/discord.js/src/util/Structures.js\");\n\n/**\n * Represents the logged in client's Discord user.\n * @extends {User}\n */\nclass ClientUser extends Structures.get('User') {\n  constructor(client, data) {\n    super(client, data);\n    this._typing = new Map();\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('verified' in data) {\n      /**\n       * Whether or not this account has been verified\n       * @type {boolean}\n       */\n      this.verified = data.verified;\n    }\n\n    if ('mfa_enabled' in data) {\n      /**\n       * If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account\n       * @type {?boolean}\n       */\n      this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;\n    } else if (typeof this.mfaEnabled === 'undefined') {\n      this.mfaEnabled = null;\n    }\n\n    if (data.token) this.client.token = data.token;\n  }\n\n  /**\n   * ClientUser's presence\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.client.presence;\n  }\n\n  edit(data) {\n    return this.client.api\n      .users('@me')\n      .patch({ data })\n      .then(newData => {\n        this.client.token = newData.token;\n        const { updated } = this.client.actions.UserUpdate.handle(newData);\n        if (updated) return updated;\n        return this;\n      });\n  }\n\n  /**\n   * Sets the username of the logged in client.\n   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n   * every hour. Use this sparingly!</info>\n   * @param {string} username The new username\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set username\n   * client.user.setUsername('discordjs')\n   *   .then(user => console.log(`My new username is ${user.username}`))\n   *   .catch(console.error);\n   */\n  setUsername(username) {\n    return this.edit({ username });\n  }\n\n  /**\n   * Sets the avatar of the logged in client.\n   * @param {BufferResolvable|Base64Resolvable} avatar The new avatar\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set avatar\n   * client.user.setAvatar('./avatar.png')\n   *   .then(user => console.log(`New avatar set!`))\n   *   .catch(console.error);\n   */\n  async setAvatar(avatar) {\n    return this.edit({ avatar: await DataResolver.resolveImage(avatar) });\n  }\n\n  /**\n   * Data resembling a raw Discord presence.\n   * @typedef {Object} PresenceData\n   * @property {PresenceStatusData} [status] Status of the user\n   * @property {boolean} [afk] Whether the user is AFK\n   * @property {Object} [activity] Activity the user is playing\n   * @property {Object|string} [activity.application] An application object or application id\n   * @property {string} [activity.application.id] The id of the application\n   * @property {string} [activity.name] Name of the activity\n   * @property {ActivityType|number} [activity.type] Type of the activity\n   * @property {string} [activity.url] Stream url\n   * @property {?number|number[]} [shardID] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the full presence of the client user.\n   * @param {PresenceData} data Data for the presence\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's presence\n   * client.user.setPresence({ activity: { name: 'with discord.js' }, status: 'idle' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setPresence(data) {\n    return this.client.presence.set(data);\n  }\n\n  /**\n   * A user's status. Must be one of:\n   * * `online`\n   * * `idle`\n   * * `invisible`\n   * * `dnd` (do not disturb)\n   * @typedef {string} PresenceStatusData\n   */\n\n  /**\n   * Sets the status of the client user.\n   * @param {PresenceStatusData} status Status to change to\n   * @param {?number|number[]} [shardID] Shard ID(s) to have the activity set on\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's status\n   * client.user.setStatus('idle')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setStatus(status, shardID) {\n    return this.setPresence({ status, shardID });\n  }\n\n  /**\n   * Options for setting an activity\n   * @typedef ActivityOptions\n   * @type {Object}\n   * @property {string} [url] Twitch stream URL\n   * @property {ActivityType|number} [type] Type of the activity\n   * @property {?number|number[]} [shardID] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the activity the client user is playing.\n   * @param {string|ActivityOptions} [name] Activity being played, or options for setting the activity\n   * @param {ActivityOptions} [options] Options for setting the activity\n   * @returns {Promise<Presence>}\n   * @example\n   * // Set the client user's activity\n   * client.user.setActivity('discord.js', { type: 'WATCHING' })\n   *   .then(presence => console.log(`Activity set to ${presence.activities[0].name}`))\n   *   .catch(console.error);\n   */\n  setActivity(name, options = {}) {\n    if (!name) return this.setPresence({ activity: null, shardID: options.shardID });\n\n    const activity = Object.assign({}, options, typeof name === 'object' ? name : { name });\n    return this.setPresence({ activity, shardID: activity.shardID });\n  }\n\n  /**\n   * Sets/removes the AFK flag for the client user.\n   * @param {boolean} afk Whether or not the user is AFK\n   * @returns {Promise<Presence>}\n   */\n  setAFK(afk) {\n    return this.setPresence({ afk });\n  }\n}\n\nmodule.exports = ClientUser;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/ClientUser.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/DMChannel.js":
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/DMChannel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Channel = __webpack_require__(/*! ./Channel */ \"./node_modules/discord.js/src/structures/Channel.js\");\nconst TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ \"./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js\");\nconst MessageManager = __webpack_require__(/*! ../managers/MessageManager */ \"./node_modules/discord.js/src/managers/MessageManager.js\");\n\n/**\n * Represents a direct message channel between two users.\n * @extends {Channel}\n * @implements {TextBasedChannel}\n */\nclass DMChannel extends Channel {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the DM channel\n   */\n  constructor(client, data) {\n    super(client, data);\n    // Override the channel type so partials have a known type\n    this.type = 'dm';\n    /**\n     * A manager of the messages belonging to this channel\n     * @type {MessageManager}\n     */\n    this.messages = new MessageManager(this);\n    this._typing = new Map();\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if (data.recipients) {\n      /**\n       * The recipient on the other end of the DM\n       * @type {User}\n       */\n      this.recipient = this.client.users.add(data.recipients[0]);\n    }\n\n    /**\n     * The ID of the last message in the channel, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = data.last_message_id;\n\n    /**\n     * The timestamp when the last pinned message was pinned, if there was one\n     * @type {?number}\n     */\n    this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;\n  }\n\n  /**\n   * Whether this DMChannel is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.lastMessageID === 'undefined';\n  }\n\n  /**\n   * Fetch this DMChannel.\n   * @returns {Promise<DMChannel>}\n   */\n  fetch() {\n    return this.recipient.createDM();\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the recipient's mention instead of the\n   * DMChannel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return this.recipient.toString();\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  send() {}\n  startTyping() {}\n  stopTyping() {}\n  get typing() {}\n  get typingCount() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  // Doesn't work on DM channels; bulkDelete() {}\n}\n\nTextBasedChannel.applyToClass(DMChannel, true, ['bulkDelete']);\n\nmodule.exports = DMChannel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/DMChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Emoji.js":
/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Emoji.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether this emoji is animated\n     * @type {boolean}\n     */\n    this.animated = emoji.animated;\n\n    /**\n     * The name of this emoji\n     * @type {string}\n     */\n    this.name = emoji.name;\n\n    /**\n     * The ID of this emoji\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id;\n\n    /**\n     * Whether this emoji has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * The URL to the emoji file if its a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    if (!this.id) return null;\n    return this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    if (!this.id) return null;\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    if (!this.id) return null;\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.reply(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildID',\n      createdTimestamp: true,\n      url: true,\n      identifier: true,\n    });\n  }\n}\n\nmodule.exports = Emoji;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Emoji.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Guild.js":
/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Guild.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst GuildAuditLogs = __webpack_require__(/*! ./GuildAuditLogs */ \"./node_modules/discord.js/src/structures/GuildAuditLogs.js\");\nconst GuildPreview = __webpack_require__(/*! ./GuildPreview */ \"./node_modules/discord.js/src/structures/GuildPreview.js\");\nconst Integration = __webpack_require__(/*! ./Integration */ \"./node_modules/discord.js/src/structures/Integration.js\");\nconst Invite = __webpack_require__(/*! ./Invite */ \"./node_modules/discord.js/src/structures/Invite.js\");\nconst VoiceRegion = __webpack_require__(/*! ./VoiceRegion */ \"./node_modules/discord.js/src/structures/VoiceRegion.js\");\nconst Webhook = __webpack_require__(/*! ./Webhook */ \"./node_modules/discord.js/src/structures/Webhook.js\");\nconst GuildChannelManager = __webpack_require__(/*! ../managers/GuildChannelManager */ \"./node_modules/discord.js/src/managers/GuildChannelManager.js\");\nconst GuildEmojiManager = __webpack_require__(/*! ../managers/GuildEmojiManager */ \"./node_modules/discord.js/src/managers/GuildEmojiManager.js\");\nconst GuildMemberManager = __webpack_require__(/*! ../managers/GuildMemberManager */ \"./node_modules/discord.js/src/managers/GuildMemberManager.js\");\nconst PresenceManager = __webpack_require__(/*! ../managers/PresenceManager */ \"./node_modules/discord.js/src/managers/PresenceManager.js\");\nconst RoleManager = __webpack_require__(/*! ../managers/RoleManager */ \"./node_modules/discord.js/src/managers/RoleManager.js\");\nconst VoiceStateManager = __webpack_require__(/*! ../managers/VoiceStateManager */ \"./node_modules/discord.js/src/managers/VoiceStateManager.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst {\n  ChannelTypes,\n  DefaultMessageNotifications,\n  PartialTypes,\n  VerificationLevels,\n  ExplicitContentFilterLevels,\n} = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst DataResolver = __webpack_require__(/*! ../util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\nconst SystemChannelFlags = __webpack_require__(/*! ../util/SystemChannelFlags */ \"./node_modules/discord.js/src/util/SystemChannelFlags.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with `guild.available`.</info>\n * @extends {Base}\n */\nclass Guild extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the guild\n   */\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n    this.members = new GuildMemberManager(this);\n\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n    this.channels = new GuildChannelManager(this);\n\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n    this.roles = new RoleManager(this);\n\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n    this.presences = new PresenceManager(this.client);\n\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n    this.voiceStates = new VoiceStateManager(this);\n\n    /**\n     * Whether the bot has been removed from the guild\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n\n      /**\n       * The Unique ID of the guild, useful for comparisons\n       * @type {Snowflake}\n       */\n      this.id = data.id;\n    } else {\n      this._patch(data);\n      if (!data.channels) this.available = false;\n    }\n\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n    this.shardID = data.shardID;\n  }\n\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n  get shard() {\n    return this.client.ws.shards.get(this.shardID);\n  }\n\n  /**\n   * Sets up the guild.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The name of the guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of the guild icon\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The hash of the guild splash image (VIP only)\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The region the guild is located in\n     * @type {string}\n     */\n    this.region = data.region;\n\n    /**\n     * The full amount of members in this guild\n     * @type {number}\n     */\n    this.memberCount = data.member_count || this.memberCount;\n\n    /**\n     * Whether the guild is \"large\" (has more than 250 members)\n     * @type {boolean}\n     */\n    this.large = Boolean('large' in data ? data.large : this.large);\n\n    /**\n     * An array of enabled guild features, here are the possible values:\n     * * ANIMATED_ICON\n     * * BANNER\n     * * COMMERCE\n     * * DISCOVERABLE\n     * * FEATURABLE\n     * * INVITE_SPLASH\n     * * NEWS\n     * * PARTNERED\n     * * PUBLIC\n     * * PUBLIC_DISABLED\n     * * VANITY_URL\n     * * VERIFIED\n     * * VIP_REGIONS\n     * * WELCOME_SCREEN_ENABLED\n     * @typedef {string} Features\n     */\n\n    /**\n     * An array of guild features partnered guilds have enabled\n     * @type {Features[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The ID of the application that created this guild (if applicable)\n     * @type {?Snowflake}\n     */\n    this.applicationID = data.application_id;\n\n    /**\n     * The time in seconds before a user is counted as \"away from keyboard\"\n     * @type {?number}\n     */\n    this.afkTimeout = data.afk_timeout;\n\n    /**\n     * The ID of the voice channel where AFK members are moved\n     * @type {?Snowflake}\n     */\n    this.afkChannelID = data.afk_channel_id;\n\n    /**\n     * The ID of the system channel\n     * @type {?Snowflake}\n     */\n    this.systemChannelID = data.system_channel_id;\n\n    /**\n     * Whether embedded images are enabled on this guild\n     * @type {boolean}\n     */\n    this.embedEnabled = data.embed_enabled;\n\n    /**\n     * The type of premium tier:\n     * * 0: NONE\n     * * 1: TIER_1\n     * * 2: TIER_2\n     * * 3: TIER_3\n     * @typedef {number} PremiumTier\n     */\n\n    /**\n     * The premium tier on this guild\n     * @type {PremiumTier}\n     */\n    this.premiumTier = data.premium_tier;\n\n    /**\n     * The total number of users currently boosting this server\n     * @type {?number}\n     * @name Guild#premiumSubscriptionCount\n     */\n    if (typeof data.premium_subscription_count !== 'undefined') {\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    }\n\n    /**\n     * Whether widget images are enabled on this guild\n     * @type {?boolean}\n     * @name Guild#widgetEnabled\n     */\n    if (typeof data.widget_enabled !== 'undefined') this.widgetEnabled = data.widget_enabled;\n\n    /**\n     * The widget channel ID, if enabled\n     * @type {?string}\n     * @name Guild#widgetChannelID\n     */\n    if (typeof data.widget_channel_id !== 'undefined') this.widgetChannelID = data.widget_channel_id;\n\n    /**\n     * The embed channel ID, if enabled\n     * @type {?string}\n     * @name Guild#embedChannelID\n     */\n    if (typeof data.embed_channel_id !== 'undefined') this.embedChannelID = data.embed_channel_id;\n\n    /**\n     * The verification level of the guild\n     * @type {VerificationLevel}\n     */\n    this.verificationLevel = VerificationLevels[data.verification_level];\n\n    /**\n     * The explicit content filter level of the guild\n     * @type {ExplicitContentFilterLevel}\n     */\n    this.explicitContentFilter = ExplicitContentFilterLevels[data.explicit_content_filter];\n\n    /**\n     * The required MFA level for the guild\n     * @type {number}\n     */\n    this.mfaLevel = data.mfa_level;\n\n    /**\n     * The timestamp the client user joined the guild at\n     * @type {number}\n     */\n    this.joinedTimestamp = data.joined_at ? new Date(data.joined_at).getTime() : this.joinedTimestamp;\n\n    /**\n     * The value set for the guild's default message notifications\n     * @type {DefaultMessageNotifications|number}\n     */\n    this.defaultMessageNotifications =\n      DefaultMessageNotifications[data.default_message_notifications] || data.default_message_notifications;\n\n    /**\n     * The value set for the guild's system channel flags\n     * @type {Readonly<SystemChannelFlags>}\n     */\n    this.systemChannelFlags = new SystemChannelFlags(data.system_channel_flags).freeze();\n\n    /**\n     * The maximum amount of members the guild can have\n     * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n     * @type {?number}\n     * @name Guild#maximumMembers\n     */\n    if (typeof data.max_members !== 'undefined') this.maximumMembers = data.max_members || 250000;\n\n    /**\n     * The maximum amount of presences the guild can have\n     * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n     * @type {?number}\n     * @name Guild#maximumPresences\n     */\n    if (typeof data.max_presences !== 'undefined') this.maximumPresences = data.max_presences || 25000;\n\n    /**\n     * The vanity URL code of the guild, if any\n     * @type {?string}\n     */\n    this.vanityURLCode = data.vanity_url_code;\n\n    /**\n     * The description of the guild, if any\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The hash of the guild banner\n     * @type {?string}\n     */\n    this.banner = data.banner;\n\n    this.id = data.id;\n    this.available = !data.unavailable;\n    this.features = data.features || this.features || [];\n\n    /**\n     * The ID of the rules channel for the guild\n     * <info>This is only available on guilds with the `PUBLIC` feature</info>\n     * @type {?Snowflake}\n     */\n    this.rulesChannelID = data.rules_channel_id;\n\n    /**\n     * The ID of the public updates channel for the guild\n     * <info>This is only available on guilds with the `PUBLIC` feature</info>\n     * @type {?Snowflake}\n     */\n    this.publicUpdatesChannelID = data.public_updates_channel_id;\n\n    if (data.channels) {\n      this.channels.cache.clear();\n      for (const rawChannel of data.channels) {\n        this.client.channels.add(rawChannel, this);\n      }\n    }\n\n    if (data.roles) {\n      this.roles.cache.clear();\n      for (const role of data.roles) this.roles.add(role);\n    }\n\n    if (data.members) {\n      this.members.cache.clear();\n      for (const guildUser of data.members) this.members.add(guildUser);\n    }\n\n    if (data.owner_id) {\n      /**\n       * The user ID of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerID = data.owner_id;\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences.add(Object.assign(presence, { guild: this }));\n      }\n    }\n\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n      for (const voiceState of data.voice_states) {\n        this.voiceStates.add(voiceState);\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis.add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis,\n      });\n    }\n  }\n\n  /**\n   * The URL to this guild's banner.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  bannerURL({ format, size } = {}) {\n    if (!this.banner) return null;\n    return this.client.rest.cdn.Banner(this.id, this.banner, format, size);\n  }\n\n  /**\n   * The timestamp the guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * If this guild is partnered\n   * @type {boolean}\n   * @readonly\n   */\n  get partnered() {\n    return this.features.includes('PARTNERED');\n  }\n\n  /**\n   * If this guild is verified\n   * @type {boolean}\n   * @readonly\n   */\n  get verified() {\n    return this.features.includes('VERIFIED');\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size, dynamic } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * The acronym that shows up in place of a guild icon.\n   * @type {string}\n   * @readonly\n   */\n  get nameAcronym() {\n    return this.name.replace(/\\w+/g, name => name[0]).replace(/\\s/g, '');\n  }\n\n  /**\n   * The URL to this guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL({ format, size } = {}) {\n    if (!this.splash) return null;\n    return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The owner of the guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get owner() {\n    return (\n      this.members.cache.get(this.ownerID) ||\n      (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER)\n        ? this.members.add({ user: { id: this.ownerID } }, true)\n        : null)\n    );\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.cache.get(this.afkChannelID) || null;\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.cache.get(this.systemChannelID) || null;\n  }\n\n  /**\n   * Widget channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get widgetChannel() {\n    return this.client.channels.cache.get(this.widgetChannelID) || null;\n  }\n\n  /**\n   * Embed channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get embedChannel() {\n    return this.client.channels.cache.get(this.embedChannelID) || null;\n  }\n\n  /**\n   * Rules channel for this guild\n   * <info>This is only available on guilds with the `PUBLIC` feature</info>\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get rulesChannel() {\n    return this.client.channels.cache.get(this.rulesChannelID) || null;\n  }\n\n  /**\n   * Public updates channel for this guild\n   * <info>This is only available on guilds with the `PUBLIC` feature</info>\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get publicUpdatesChannel() {\n    return this.client.channels.cache.get(this.publicUpdatesChannelID) || null;\n  }\n\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get me() {\n    return (\n      this.members.cache.get(this.client.user.id) ||\n      (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER)\n        ? this.members.add({ user: { id: this.client.user.id } }, true)\n        : null)\n    );\n  }\n\n  /**\n   * The voice state for the client user of this guild, if any\n   * @type {?VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.voiceStates.cache.get(this.client.user.id);\n  }\n\n  /**\n   * Returns the GuildMember form of a User object, if the user is present in the guild.\n   * @param {UserResolvable} user The user that you want to obtain the GuildMember of\n   * @returns {?GuildMember}\n   * @example\n   * // Get the guild member of a user\n   * const member = guild.member(message.author);\n   */\n  member(user) {\n    return this.members.resolve(user);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<Guild>}\n   */\n  fetch() {\n    return this.client.api\n      .guilds(this.id)\n      .get()\n      .then(data => {\n        this._patch(data);\n        return this;\n      });\n  }\n\n  /**\n   * An object containing information about a guild member's ban.\n   * @typedef {Object} BanInfo\n   * @property {User} user User that was banned\n   * @property {?string} reason Reason the user was banned\n   */\n\n  /**\n   * Fetches information on a banned user from this guild.\n   * @param {UserResolvable} user The User to fetch the ban info of\n   * @returns {Promise<BanInfo>}\n   */\n  fetchBan(user) {\n    const id = this.client.users.resolveID(user);\n    if (!id) throw new Error('FETCH_BAN_RESOLVE_ID');\n    return this.client.api\n      .guilds(this.id)\n      .bans(id)\n      .get()\n      .then(ban => ({\n        reason: ban.reason,\n        user: this.client.users.add(ban.user),\n      }));\n  }\n\n  /**\n   * Fetches a collection of banned users in this guild.\n   * @returns {Promise<Collection<Snowflake, BanInfo>>}\n   */\n  fetchBans() {\n    return this.client.api\n      .guilds(this.id)\n      .bans.get()\n      .then(bans =>\n        bans.reduce((collection, ban) => {\n          collection.set(ban.user.id, {\n            reason: ban.reason,\n            user: this.client.users.add(ban.user),\n          });\n          return collection;\n        }, new Collection()),\n      );\n  }\n\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @returns {Promise<Collection<string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n  fetchIntegrations() {\n    return this.client.api\n      .guilds(this.id)\n      .integrations.get()\n      .then(data =>\n        data.reduce(\n          (collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)),\n          new Collection(),\n        ),\n      );\n  }\n\n  /**\n   * The data for creating an integration.\n   * @typedef {Object} IntegrationData\n   * @property {string} id The integration id\n   * @property {string} type The integration type\n   */\n\n  /**\n   * Creates an integration by attaching an integration object\n   * @param {IntegrationData} data The data for the integration\n   * @param {string} reason Reason for creating the integration\n   * @returns {Promise<Guild>}\n   */\n  createIntegration(data, reason) {\n    return this.client.api\n      .guilds(this.id)\n      .integrations.post({ data, reason })\n      .then(() => this);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild.\n   * Resolves with a collection mapping invites by their codes.\n   * @returns {Promise<Collection<string, Invite>>}\n   * @example\n   * // Fetch invites\n   * guild.fetchInvites()\n   *   .then(invites => console.log(`Fetched ${invites.size} invites`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch invite creator by their id\n   * guild.fetchInvites()\n   *  .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))\n   *  .catch(console.error);\n   */\n  fetchInvites() {\n    return this.client.api\n      .guilds(this.id)\n      .invites.get()\n      .then(inviteItems => {\n        const invites = new Collection();\n        for (const inviteItem of inviteItems) {\n          const invite = new Invite(this.client, inviteItem);\n          invites.set(invite.code, invite);\n        }\n        return invites;\n      });\n  }\n\n  /**\n   * Obtains a guild preview for this guild from Discord, only available for public guilds.\n   * @returns {Promise<GuildPreview>}\n   */\n  fetchPreview() {\n    return this.client.api\n      .guilds(this.id)\n      .preview.get()\n      .then(data => new GuildPreview(this.client, data));\n  }\n\n  /**\n   * Fetches the vanity url invite code to this guild.\n   * Resolves with a string matching the vanity url invite code, not the full url.\n   * @returns {Promise<string>}\n   * @example\n   * // Fetch invites\n   * guild.fetchVanityCode()\n   *   .then(code => {\n   *     console.log(`Vanity URL: https://discord.gg/${code}`);\n   *   })\n   *   .catch(console.error);\n   */\n  fetchVanityCode() {\n    if (!this.features.includes('VANITY_URL')) {\n      return Promise.reject(new Error('VANITY_URL'));\n    }\n    return this.client.api\n      .guilds(this.id, 'vanity-url')\n      .get()\n      .then(res => res.code);\n  }\n\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.client.api\n      .guilds(this.id)\n      .webhooks.get()\n      .then(data => {\n        const hooks = new Collection();\n        for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n        return hooks;\n      });\n  }\n\n  /**\n   * Fetches available voice regions.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   */\n  fetchVoiceRegions() {\n    return this.client.api\n      .guilds(this.id)\n      .regions.get()\n      .then(res => {\n        const regions = new Collection();\n        for (const region of res) regions.set(region.id, new VoiceRegion(region));\n        return regions;\n      });\n  }\n\n  /**\n   * The Guild Embed object\n   * @typedef {Object} GuildEmbedData\n   * @property {boolean} enabled Whether the embed is enabled\n   * @property {?GuildChannel} channel The embed channel\n   */\n\n  /**\n   * Fetches the guild embed.\n   * @returns {Promise<GuildEmbedData>}\n   * @example\n   * // Fetches the guild embed\n   * guild.fetchEmbed()\n   *   .then(embed => console.log(`The embed is ${embed.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  fetchEmbed() {\n    return this.client.api\n      .guilds(this.id)\n      .embed.get()\n      .then(data => ({\n        enabled: data.enabled,\n        channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null,\n      }));\n  }\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {Object} [options={}] Options for fetching audit logs\n   * @param {Snowflake|GuildAuditLogsEntry} [options.before] Limit to entries from before specified entry\n   * @param {number} [options.limit] Limit number of entries\n   * @param {UserResolvable} [options.user] Only show entries involving this user\n   * @param {AuditLogAction|number} [options.type] Only show entries involving this action type\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  fetchAuditLogs(options = {}) {\n    if (options.before && options.before instanceof GuildAuditLogs.Entry) options.before = options.before.id;\n    if (typeof options.type === 'string') options.type = GuildAuditLogs.Actions[options.type];\n\n    return this.client.api\n      .guilds(this.id)\n      ['audit-logs'].get({\n        query: {\n          before: options.before,\n          limit: options.limit,\n          user_id: this.client.users.resolveID(options.user),\n          action_type: options.type,\n        },\n      })\n      .then(data => GuildAuditLogs.build(this, data));\n  }\n\n  /**\n   * Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.\n   * @param {UserResolvable} user User to add to the guild\n   * @param {Object} options Options for the addition\n   * @param {string} options.accessToken An OAuth2 access token for the user with the `guilds.join` scope granted to the\n   * bot's application\n   * @param {string} [options.nick] Nickname to give the member (requires `MANAGE_NICKNAMES`)\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to add to the member\n   * (requires `MANAGE_ROLES`)\n   * @param {boolean} [options.mute] Whether the member should be muted (requires `MUTE_MEMBERS`)\n   * @param {boolean} [options.deaf] Whether the member should be deafened (requires `DEAFEN_MEMBERS`)\n   * @returns {Promise<GuildMember>}\n   */\n  addMember(user, options) {\n    user = this.client.users.resolveID(user);\n    if (!user) return Promise.reject(new TypeError('INVALID_TYPE', 'user', 'UserResolvable'));\n    if (this.members.cache.has(user)) return Promise.resolve(this.members.cache.get(user));\n    options.access_token = options.accessToken;\n    if (options.roles) {\n      const roles = [];\n      for (let role of options.roles instanceof Collection ? options.roles.values() : options.roles) {\n        role = this.roles.resolve(role);\n        if (!role) {\n          return Promise.reject(\n            new TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true),\n          );\n        }\n        roles.push(role.id);\n      }\n      options.roles = roles;\n    }\n    return this.client.api\n      .guilds(this.id)\n      .members(user)\n      .put({ data: options })\n      .then(data => this.members.add(data));\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {string} [region] The region of the guild\n   * @property {VerificationLevel|number} [verificationLevel] The verification level of the guild\n   * @property {ExplicitContentFilterLevel|number} [explicitContentFilter] The level of the explicit content filter\n   * @property {ChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {ChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {Base64Resolvable} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {Base64Resolvable} [splash] The splash screen of the guild\n   * @property {Base64Resolvable} [banner] The banner of the guild\n   * @property {DefaultMessageNotifications|number} [defaultMessageNotifications] The default message notifications\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @param {string} [reason] Reason for editing this guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name and region\n   * guild.edit({\n   *   name: 'Discord Guild',\n   *   region: 'london',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated} in region ${updated.region}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n    if (data.region) _data.region = data.region;\n    if (typeof data.verificationLevel !== 'undefined') {\n      _data.verification_level =\n        typeof data.verificationLevel === 'number'\n          ? Number(data.verificationLevel)\n          : VerificationLevels.indexOf(data.verificationLevel);\n    }\n    if (typeof data.afkChannel !== 'undefined') {\n      _data.afk_channel_id = this.client.channels.resolveID(data.afkChannel);\n    }\n    if (typeof data.systemChannel !== 'undefined') {\n      _data.system_channel_id = this.client.channels.resolveID(data.systemChannel);\n    }\n    if (data.afkTimeout) _data.afk_timeout = Number(data.afkTimeout);\n    if (typeof data.icon !== 'undefined') _data.icon = data.icon;\n    if (data.owner) _data.owner_id = this.client.users.resolveID(data.owner);\n    if (data.splash) _data.splash = data.splash;\n    if (data.banner) _data.banner = data.banner;\n    if (typeof data.explicitContentFilter !== 'undefined') {\n      _data.explicit_content_filter =\n        typeof data.explicitContentFilter === 'number'\n          ? data.explicitContentFilter\n          : ExplicitContentFilterLevels.indexOf(data.explicitContentFilter);\n    }\n    if (typeof data.defaultMessageNotifications !== 'undefined') {\n      _data.default_message_notifications =\n        typeof data.defaultMessageNotifications === 'string'\n          ? DefaultMessageNotifications.indexOf(data.defaultMessageNotifications)\n          : data.defaultMessageNotifications;\n    }\n    if (typeof data.systemChannelFlags !== 'undefined') {\n      _data.system_channel_flags = SystemChannelFlags.resolve(data.systemChannelFlags);\n    }\n    return this.client.api\n      .guilds(this.id)\n      .patch({ data: _data, reason })\n      .then(newData => this.client.actions.GuildUpdate.handle(newData).updated);\n  }\n\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {ExplicitContentFilterLevel|number} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({ explicitContentFilter }, reason);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {DefaultMessageNotifications|number} defaultMessageNotifications The new setting for the default message notifications\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({ defaultMessageNotifications }, reason);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({ systemChannelFlags }, reason);\n  }\n\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${guild}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Edits the region of the guild.\n   * @param {string} region The new region of the guild\n   * @param {string} [reason] Reason for changing the guild's region\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild region\n   * guild.setRegion('london')\n   *  .then(updated => console.log(`Updated guild region to ${updated.region}`))\n   *  .catch(console.error);\n   */\n  setRegion(region, reason) {\n    return this.edit({ region }, reason);\n  }\n\n  /**\n   * Edits the verification level of the guild.\n   * @param {VerificationLevel|number} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({ verificationLevel }, reason);\n  }\n\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {ChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({ afkChannel }, reason);\n  }\n\n  /**\n   * Edits the system channel of the guild.\n   * @param {ChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({ systemChannel }, reason);\n  }\n\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({ afkTimeout }, reason);\n  }\n\n  /**\n   * Sets a new guild icon.\n   * @param {Base64Resolvable|BufferResolvable} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  async setIcon(icon, reason) {\n    return this.edit({ icon: await DataResolver.resolveImage(icon), reason });\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(updated => console.log(`Updated the guild owner to ${updated.owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({ owner }, reason);\n  }\n\n  /**\n   * Sets a new guild splash screen.\n   * @param {Base64Resolvable|BufferResolvable} splash The new splash screen of the guild\n   * @param {string} [reason] Reason for changing the guild's splash screen\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  async setSplash(splash, reason) {\n    return this.edit({ splash: await DataResolver.resolveImage(splash), reason });\n  }\n\n  /**\n   * Sets a new guild banner.\n   * @param {Base64Resolvable|BufferResolvable} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n  async setBanner(banner, reason) {\n    return this.edit({ banner: await DataResolver.resolveImage(banner), reason });\n  }\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {ChannelResolvable} channel Channel to update\n   * @property {number} position New position for the channel\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setChannelPositions([{ channel: channelID, position: newChannelIndex }])\n   *   .then(guild => console.log(`Updated channel positions for ${guild}`))\n   *   .catch(console.error);\n   */\n  setChannelPositions(channelPositions) {\n    const updatedChannels = channelPositions.map(r => ({\n      id: this.client.channels.resolveID(r.channel),\n      position: r.position,\n    }));\n\n    return this.client.api\n      .guilds(this.id)\n      .channels.patch({ data: updatedChannels })\n      .then(\n        () =>\n          this.client.actions.GuildChannelsPositionUpdate.handle({\n            guild_id: this.id,\n            channels: updatedChannels,\n          }).guild,\n      );\n  }\n\n  /**\n   * The data needed for updating a guild role's position\n   * @typedef {Object} GuildRolePosition\n   * @property {RoleResolveable} role The ID of the role\n   * @property {number} position The position to update\n   */\n\n  /**\n   * Batch-updates the guild's role positions\n   * @param {GuildRolePosition[]} rolePositions Role positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setRolePositions([{ role: roleID, position: updatedRoleIndex }])\n   *  .then(guild => console.log(`Role permissions updated for ${guild}`))\n   *  .catch(console.error);\n   */\n  setRolePositions(rolePositions) {\n    // Make sure rolePositions are prepared for API\n    rolePositions = rolePositions.map(o => ({\n      id: this.roles.resolveID(o.role),\n      position: o.position,\n    }));\n\n    // Call the API to update role positions\n    return this.client.api\n      .guilds(this.id)\n      .roles.patch({\n        data: rolePositions,\n      })\n      .then(\n        () =>\n          this.client.actions.GuildRolesPositionUpdate.handle({\n            guild_id: this.id,\n            roles: rolePositions,\n          }).guild,\n      );\n  }\n\n  /**\n   * Edits the guild's embed.\n   * @param {GuildEmbedData} embed The embed for the guild\n   * @param {string} [reason] Reason for changing the guild's embed\n   * @returns {Promise<Guild>}\n   */\n  setEmbed(embed, reason) {\n    return this.client.api\n      .guilds(this.id)\n      .embed.patch({\n        data: {\n          enabled: embed.enabled,\n          channel_id: this.channels.resolveID(embed.channel),\n        },\n        reason,\n      })\n      .then(() => this);\n  }\n\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(g => console.log(`Left the guild ${g}`))\n   *   .catch(console.error);\n   */\n  leave() {\n    if (this.ownerID === this.client.user.id) return Promise.reject(new Error('GUILD_OWNED'));\n    return this.client.api\n      .users('@me')\n      .guilds(this.id)\n      .delete()\n      .then(() => this.client.actions.GuildDelete.handle({ id: this.id }).guild);\n  }\n\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.client.api\n      .guilds(this.id)\n      .delete()\n      .then(() => this.client.actions.GuildDelete.handle({ id: this.id }).guild);\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    let equal =\n      guild &&\n      guild instanceof this.constructor &&\n      this.id === guild.id &&\n      this.available === guild.available &&\n      this.splash === guild.splash &&\n      this.region === guild.region &&\n      this.name === guild.name &&\n      this.memberCount === guild.memberCount &&\n      this.large === guild.large &&\n      this.icon === guild.icon &&\n      this.ownerID === guild.ownerID &&\n      this.verificationLevel === guild.verificationLevel &&\n      this.embedEnabled === guild.embedEnabled &&\n      (this.features === guild.features ||\n        (this.features.length === guild.features.length &&\n          this.features.every((feat, i) => feat === guild.features[i])));\n\n    if (equal) {\n      if (this.embedChannel) {\n        if (!guild.embedChannel || this.embedChannel.id !== guild.embedChannel.id) equal = false;\n      } else if (guild.embedChannel) {\n        equal = false;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${guild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false,\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and IDs.\n   * @returns {Collection<Role>}\n   * @private\n   */\n  _sortedRoles() {\n    return Util.discordSort(this.roles.cache);\n  }\n\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and IDs.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<GuildChannel>}\n   * @private\n   */\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelTypes.CATEGORY;\n    return Util.discordSort(\n      this.channels.cache.filter(\n        c =>\n          (['text', 'news', 'store'].includes(channel.type)\n            ? ['text', 'news', 'store'].includes(c.type)\n            : c.type === channel.type) &&\n          (category || c.parent === channel.parent),\n      ),\n    );\n  }\n}\n\nmodule.exports = Guild;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Guild.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/GuildAuditLogs.js":
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildAuditLogs.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Integration = __webpack_require__(/*! ./Integration */ \"./node_modules/discord.js/src/structures/Integration.js\");\nconst Webhook = __webpack_require__(/*! ./Webhook */ \"./node_modules/discord.js/src/structures/Webhook.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { PartialTypes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * The target type of an entry, e.g. `GUILD`. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * * INTEGRATION\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {AuditLogTargetType}\n */\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE',\n  INTEGRATION: 'INTEGRATION',\n  UNKNOWN: 'UNKNOWN',\n};\n\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * MEMBER_MOVE: 26\n * * MEMBER_DISCONNECT: 27\n * * BOT_ADD: 28,\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 52\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * * MESSAGE_BULK_DELETE: 73\n * * MESSAGE_PIN: 74\n * * MESSAGE_UNPIN: 75\n * * INTEGRATION_CREATE: 80\n * * INTEGRATION_UPDATE: 81\n * * INTEGRATION_DELETE: 82\n * @typedef {?number|string} AuditLogAction\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {AuditLogAction}\n */\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  MEMBER_MOVE: 26,\n  MEMBER_DISCONNECT: 27,\n  BOT_ADD: 28,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72,\n  MESSAGE_BULK_DELETE: 73,\n  MESSAGE_PIN: 74,\n  MESSAGE_UNPIN: 75,\n  INTEGRATION_CREATE: 80,\n  INTEGRATION_UPDATE: 81,\n  INTEGRATION_DELETE: 82,\n};\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users.add(user);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake, Integration>}\n     * @private\n     */\n    this.integrations = new Collection();\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n  static build(...args) {\n    const logs = new GuildAuditLogs(...args);\n    return Promise.all(logs.entries.map(e => e.target)).then(() => logs);\n  }\n\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A user\n   * * A role\n   * * An emoji\n   * * An invite\n   * * A webhook\n   * * An integration\n   * * An object with an id key if target was deleted\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?Object|Guild|User|Role|GuildEmoji|Invite|Webhook|Integration} AuditLogEntryTarget\n   */\n\n  /**\n   * Finds the target type from the entry action.\n   * @param {AuditLogAction} target The action target\n   * @returns {AuditLogTargetType}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    if (target < 90) return Targets.INTEGRATION;\n    return Targets.UNKNOWN;\n  }\n\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if (\n      [\n        Actions.CHANNEL_CREATE,\n        Actions.CHANNEL_OVERWRITE_CREATE,\n        Actions.MEMBER_BAN_REMOVE,\n        Actions.BOT_ADD,\n        Actions.ROLE_CREATE,\n        Actions.INVITE_CREATE,\n        Actions.WEBHOOK_CREATE,\n        Actions.EMOJI_CREATE,\n        Actions.MESSAGE_PIN,\n        Actions.INTEGRATION_CREATE,\n      ].includes(action)\n    ) {\n      return 'CREATE';\n    }\n\n    if (\n      [\n        Actions.CHANNEL_DELETE,\n        Actions.CHANNEL_OVERWRITE_DELETE,\n        Actions.MEMBER_KICK,\n        Actions.MEMBER_PRUNE,\n        Actions.MEMBER_BAN_ADD,\n        Actions.MEMBER_DISCONNECT,\n        Actions.ROLE_DELETE,\n        Actions.INVITE_DELETE,\n        Actions.WEBHOOK_DELETE,\n        Actions.EMOJI_DELETE,\n        Actions.MESSAGE_DELETE,\n        Actions.MESSAGE_BULK_DELETE,\n        Actions.MESSAGE_UNPIN,\n        Actions.INTEGRATION_DELETE,\n      ].includes(action)\n    ) {\n      return 'DELETE';\n    }\n\n    if (\n      [\n        Actions.GUILD_UPDATE,\n        Actions.CHANNEL_UPDATE,\n        Actions.CHANNEL_OVERWRITE_UPDATE,\n        Actions.MEMBER_UPDATE,\n        Actions.MEMBER_ROLE_UPDATE,\n        Actions.MEMBER_MOVE,\n        Actions.ROLE_UPDATE,\n        Actions.INVITE_UPDATE,\n        Actions.WEBHOOK_UPDATE,\n        Actions.EMOJI_UPDATE,\n        Actions.INTEGRATION_UPDATE,\n      ].includes(action)\n    ) {\n      return 'UPDATE';\n    }\n\n    return 'ALL';\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n\n    /**\n     * Specific action type of this entry in its string presentation\n     * @type {AuditLogAction}\n     */\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason || null;\n\n    /**\n     * The user that executed this entry\n     * @type {User}\n     */\n    this.executor = guild.client.options.partials.includes(PartialTypes.USER)\n      ? guild.client.users.add({ id: data.user_id })\n      : guild.client.users.cache.get(data.user_id);\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n    this.changes = data.changes ? data.changes.map(c => ({ key: c.key, old: c.old_value, new: c.new_value })) : null;\n\n    /**\n     * The ID of this entry\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?Object|Role|GuildMember}\n     */\n    this.extra = null;\n    switch (data.action_type) {\n      case Actions.MEMBER_PRUNE:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days),\n        };\n        break;\n\n      case Actions.MEMBER_MOVE:\n      case Actions.MESSAGE_DELETE:\n      case Actions.MESSAGE_BULK_DELETE:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) || { id: data.options.channel_id },\n          count: Number(data.options.count),\n        };\n        break;\n\n      case Actions.MESSAGE_PIN:\n      case Actions.MESSAGE_UNPIN:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) || { id: data.options.channel_id },\n          messageID: data.options.message_id,\n        };\n        break;\n\n      case Actions.MEMBER_DISCONNECT:\n        this.extra = {\n          count: Number(data.options.count),\n        };\n        break;\n\n      case Actions.CHANNEL_OVERWRITE_CREATE:\n      case Actions.CHANNEL_OVERWRITE_UPDATE:\n      case Actions.CHANNEL_OVERWRITE_DELETE:\n        switch (data.options.type) {\n          case 'member':\n            this.extra = guild.members.cache.get(data.options.id) || { id: data.options.id, type: 'member' };\n            break;\n\n          case 'role':\n            this.extra = guild.roles.cache.get(data.options.id) || {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: 'role',\n            };\n            break;\n\n          default:\n            break;\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n    this.target = null;\n    if (targetType === Targets.UNKNOWN) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id;\n      // MEMBER_DISCONNECT and similar types do not provide a target_id.\n    } else if (targetType === Targets.USER && data.target_id) {\n      this.target = guild.client.options.partials.includes(PartialTypes.USER)\n        ? guild.client.users.add({ id: data.target_id })\n        : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.GUILD) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target =\n        logs.webhooks.get(data.target_id) ||\n        new Webhook(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new || c.old;\n              return o;\n            },\n            {\n              id: data.target_id,\n              guild_id: guild.id,\n            },\n          ),\n        );\n    } else if (targetType === Targets.INVITE) {\n      this.target = guild.members.fetch(guild.client.user.id).then(me => {\n        if (me.permissions.has('MANAGE_GUILD')) {\n          const change = this.changes.find(c => c.key === 'code');\n          return guild.fetchInvites().then(invites => {\n            this.target = invites.find(i => i.code === (change.new || change.old));\n          });\n        } else {\n          this.target = this.changes.reduce((o, c) => {\n            o[c.key] = c.new || c.old;\n            return o;\n          }, {});\n          return this.target;\n        }\n      });\n    } else if (targetType === Targets.MESSAGE) {\n      // Discord sends a channel id for the MESSAGE_BULK_DELETE action type.\n      this.target =\n        data.action_type === Actions.MESSAGE_BULK_DELETE\n          ? guild.channels.cache.get(data.target_id) || { id: data.target_id }\n          : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.INTEGRATION) {\n      this.target =\n        logs.integrations.get(data.target_id) ||\n        new Integration(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new || c.old;\n              return o;\n            },\n            { id: data.target_id },\n          ),\n          guild,\n        );\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`].cache.get(data.target_id) || { id: data.target_id };\n    }\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  toJSON() {\n    return Util.flatten(this, { createdTimestamp: true });\n  }\n}\n\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\n\nmodule.exports = GuildAuditLogs;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/GuildAuditLogs.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/GuildChannel.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildChannel.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Channel = __webpack_require__(/*! ./Channel */ \"./node_modules/discord.js/src/structures/Channel.js\");\nconst Invite = __webpack_require__(/*! ./Invite */ \"./node_modules/discord.js/src/structures/Invite.js\");\nconst PermissionOverwrites = __webpack_require__(/*! ./PermissionOverwrites */ \"./node_modules/discord.js/src/structures/PermissionOverwrites.js\");\nconst Role = __webpack_require__(/*! ./Role */ \"./node_modules/discord.js/src/structures/Role.js\");\nconst { Error, TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a guild channel from any of the following:\n * - {@link TextChannel}\n * - {@link VoiceChannel}\n * - {@link CategoryChannel}\n * - {@link NewsChannel}\n * - {@link StoreChannel}\n * @extends {Channel}\n */\nclass GuildChannel extends Channel {\n  /**\n   * @param {Guild} guild The guild the guild channel is part of\n   * @param {Object} data The data for the guild channel\n   */\n  constructor(guild, data) {\n    super(guild.client, data);\n\n    /**\n     * The guild the channel is in\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The name of the guild channel\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The raw position of the channel from discord\n     * @type {number}\n     */\n    this.rawPosition = data.position;\n\n    /**\n     * The ID of the category parent of this channel\n     * @type {?Snowflake}\n     */\n    this.parentID = data.parent_id;\n\n    /**\n     * A map of permission overwrites in this channel for roles and users\n     * @type {Collection<Snowflake, PermissionOverwrites>}\n     */\n    this.permissionOverwrites = new Collection();\n    if (data.permission_overwrites) {\n      for (const overwrite of data.permission_overwrites) {\n        this.permissionOverwrites.set(overwrite.id, new PermissionOverwrites(this, overwrite));\n      }\n    }\n  }\n\n  /**\n   * The category parent of this channel\n   * @type {?CategoryChannel}\n   * @readonly\n   */\n  get parent() {\n    return this.guild.channels.cache.get(this.parentID) || null;\n  }\n\n  /**\n   * If the permissionOverwrites match the parent channel, null if no parent\n   * @type {?boolean}\n   * @readonly\n   */\n  get permissionsLocked() {\n    if (!this.parent) return null;\n    if (this.permissionOverwrites.size !== this.parent.permissionOverwrites.size) return false;\n    return this.permissionOverwrites.every((value, key) => {\n      const testVal = this.parent.permissionOverwrites.get(key);\n      return (\n        testVal !== undefined &&\n        testVal.deny.bitfield === value.deny.bitfield &&\n        testVal.allow.bitfield === value.allow.bitfield\n      );\n    });\n  }\n\n  /**\n   * The position of the channel\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    const sorted = this.guild._sortedChannels(this);\n    return sorted.array().indexOf(sorted.get(this.id));\n  }\n\n  /**\n   * Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.\n   * @param {GuildMemberResolvable|RoleResolvable} memberOrRole The member or role to obtain the overall permissions for\n   * @returns {?Readonly<Permissions>}\n   */\n  permissionsFor(memberOrRole) {\n    const member = this.guild.members.resolve(memberOrRole);\n    if (member) return this.memberPermissions(member);\n    const role = this.guild.roles.resolve(memberOrRole);\n    if (role) return this.rolePermissions(role);\n    return null;\n  }\n\n  overwritesFor(member, verified = false, roles = null) {\n    if (!verified) member = this.guild.members.resolve(member);\n    if (!member) return [];\n\n    roles = roles || member.roles.cache;\n    const roleOverwrites = [];\n    let memberOverwrites;\n    let everyoneOverwrites;\n\n    for (const overwrite of this.permissionOverwrites.values()) {\n      if (overwrite.id === this.guild.id) {\n        everyoneOverwrites = overwrite;\n      } else if (roles.has(overwrite.id)) {\n        roleOverwrites.push(overwrite);\n      } else if (overwrite.id === member.id) {\n        memberOverwrites = overwrite;\n      }\n    }\n\n    return {\n      everyone: everyoneOverwrites,\n      roles: roleOverwrites,\n      member: memberOverwrites,\n    };\n  }\n\n  /**\n   * Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.\n   * @param {GuildMember} member The member to obtain the overall permissions for\n   * @returns {Readonly<Permissions>}\n   * @private\n   */\n  memberPermissions(member) {\n    if (member.id === this.guild.ownerID) return new Permissions(Permissions.ALL).freeze();\n\n    const roles = member.roles.cache;\n    const permissions = new Permissions(roles.map(role => role.permissions));\n\n    if (permissions.has(Permissions.FLAGS.ADMINISTRATOR)) return new Permissions(Permissions.ALL).freeze();\n\n    const overwrites = this.overwritesFor(member, true, roles);\n\n    return permissions\n      .remove(overwrites.everyone ? overwrites.everyone.deny : 0)\n      .add(overwrites.everyone ? overwrites.everyone.allow : 0)\n      .remove(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.deny) : 0)\n      .add(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.allow) : 0)\n      .remove(overwrites.member ? overwrites.member.deny : 0)\n      .add(overwrites.member ? overwrites.member.allow : 0)\n      .freeze();\n  }\n\n  /**\n   * Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.\n   * @param {Role} role The role to obtain the overall permissions for\n   * @returns {Readonly<Permissions>}\n   * @private\n   */\n  rolePermissions(role) {\n    if (role.permissions.has(Permissions.FLAGS.ADMINISTRATOR)) return new Permissions(Permissions.ALL).freeze();\n\n    const everyoneOverwrites = this.permissionOverwrites.get(this.guild.id);\n    const roleOverwrites = this.permissionOverwrites.get(role.id);\n\n    return role.permissions\n      .remove(everyoneOverwrites ? everyoneOverwrites.deny : 0)\n      .add(everyoneOverwrites ? everyoneOverwrites.allow : 0)\n      .remove(roleOverwrites ? roleOverwrites.deny : 0)\n      .add(roleOverwrites ? roleOverwrites.allow : 0)\n      .freeze();\n  }\n\n  /**\n   * Replaces the permission overwrites in this channel.\n   * @param {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} overwrites\n   * Permission overwrites the channel gets updated with\n   * @param {string} [reason] Reason for updating the channel overwrites\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * channel.overwritePermissions([\n   *   {\n   *      id: message.author.id,\n   *      deny: ['VIEW_CHANNEL'],\n   *   },\n   * ], 'Needed to change permissions');\n   */\n  overwritePermissions(overwrites, reason) {\n    if (!Array.isArray(overwrites) && !(overwrites instanceof Collection)) {\n      return Promise.reject(\n        new TypeError('INVALID_TYPE', 'overwrites', 'Array or Collection of Permission Overwrites', true),\n      );\n    }\n    return this.edit({ permissionOverwrites: overwrites, reason }).then(() => this);\n  }\n\n  /**\n   * Updates Overwrites for a user or role in this channel. (creates if non-existent)\n   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Update or Create permission overwrites for a message author\n   * message.channel.updateOverwrite(message.author, {\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  updateOverwrite(userOrRole, options, reason) {\n    userOrRole = this.guild.roles.resolve(userOrRole) || this.client.users.resolve(userOrRole);\n    if (!userOrRole) return Promise.reject(new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role', true));\n\n    const existing = this.permissionOverwrites.get(userOrRole.id);\n    if (existing) return existing.update(options, reason).then(() => this);\n    return this.createOverwrite(userOrRole, options, reason);\n  }\n\n  /**\n   * Overwrites the permissions for a user or role in this channel. (replaces if existent)\n   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Create or Replace permissions overwrites for a message author\n   * message.channel.createOverwrite(message.author, {\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  createOverwrite(userOrRole, options, reason) {\n    userOrRole = this.guild.roles.resolve(userOrRole) || this.client.users.resolve(userOrRole);\n    if (!userOrRole) return Promise.reject(new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role', true));\n\n    const type = userOrRole instanceof Role ? 'role' : 'member';\n    const { allow, deny } = PermissionOverwrites.resolveOverwriteOptions(options);\n\n    return this.client.api\n      .channels(this.id)\n      .permissions[userOrRole.id].put({\n        data: { id: userOrRole.id, type, allow: allow.bitfield, deny: deny.bitfield },\n        reason,\n      })\n      .then(() => this);\n  }\n\n  /**\n   * Locks in the permission overwrites from the parent channel.\n   * @returns {Promise<GuildChannel>}\n   */\n  lockPermissions() {\n    if (!this.parent) return Promise.reject(new Error('GUILD_CHANNEL_ORPHAN'));\n    const permissionOverwrites = this.parent.permissionOverwrites.map(overwrite => overwrite.toJSON());\n    return this.edit({ permissionOverwrites });\n  }\n\n  /**\n   * A collection of members that can see this channel, mapped by their ID\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const members = new Collection();\n    for (const member of this.guild.members.cache.values()) {\n      if (this.permissionsFor(member).has('VIEW_CHANNEL', false)) {\n        members.set(member.id, member);\n      }\n    }\n    return members;\n  }\n\n  /**\n   * The data for a guild channel.\n   * @typedef {Object} ChannelData\n   * @property {string} [name] The name of the channel\n   * @property {number} [position] The position of the channel\n   * @property {string} [topic] The topic of the text channel\n   * @property {boolean} [nsfw] Whether the channel is NSFW\n   * @property {number} [bitrate] The bitrate of the voice channel\n   * @property {number} [userLimit] The user limit of the voice channel\n   * @property {Snowflake} [parentID] The parent ID of the channel\n   * @property {boolean} [lockPermissions]\n   * Lock the permissions of the channel to what the parent's permissions are\n   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]\n   * Permission overwrites for the channel\n   * @property {number} [rateLimitPerUser] The ratelimit per user for the channel in seconds\n   */\n\n  /**\n   * Edits the channel.\n   * @param {ChannelData} data The new data for the channel\n   * @param {string} [reason] Reason for editing this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Edit a channel\n   * channel.edit({ name: 'new-channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async edit(data, reason) {\n    if (typeof data.position !== 'undefined') {\n      await Util.setPosition(\n        this,\n        data.position,\n        false,\n        this.guild._sortedChannels(this),\n        this.client.api.guilds(this.guild.id).channels,\n        reason,\n      ).then(updatedChannels => {\n        this.client.actions.GuildChannelsPositionUpdate.handle({\n          guild_id: this.guild.id,\n          channels: updatedChannels,\n        });\n      });\n    }\n\n    const permission_overwrites =\n      data.permissionOverwrites && data.permissionOverwrites.map(o => PermissionOverwrites.resolve(o, this.guild));\n\n    const newData = await this.client.api.channels(this.id).patch({\n      data: {\n        name: (data.name || this.name).trim(),\n        topic: data.topic,\n        nsfw: data.nsfw,\n        bitrate: data.bitrate || this.bitrate,\n        user_limit: typeof data.userLimit !== 'undefined' ? data.userLimit : this.userLimit,\n        parent_id: data.parentID,\n        lock_permissions: data.lockPermissions,\n        rate_limit_per_user: data.rateLimitPerUser,\n        permission_overwrites,\n      },\n      reason,\n    });\n\n    const clone = this._clone();\n    clone._patch(newData);\n    return clone;\n  }\n\n  /**\n   * Sets a new name for the guild channel.\n   * @param {string} name The new name for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's name\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel name\n   * channel.setName('not_general')\n   *   .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Sets the category parent of this channel.\n   * @param {?CategoryChannel|Snowflake} channel Parent channel\n   * @param {Object} [options={}] Options to pass\n   * @param {boolean} [options.lockPermissions=true] Lock the permissions to what the parent's permissions are\n   * @param {string} [options.reason] Reason for modifying the parent of this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Add a parent to a channel\n   * message.channel.setParent('355908108431917066', { lockPermissions: false })\n   *   .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setParent(channel, { lockPermissions = true, reason } = {}) {\n    return this.edit(\n      {\n        // eslint-disable-next-line no-prototype-builtins\n        parentID: channel !== null ? (channel.hasOwnProperty('id') ? channel.id : channel) : null,\n        lockPermissions,\n      },\n      reason,\n    );\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({ topic }, reason);\n  }\n\n  /**\n   * Sets a new position for the guild channel.\n   * @param {number} position The new position for the guild channel\n   * @param {Object} [options] Options for setting position\n   * @param {boolean} [options.relative=false] Change the position relative to its current value\n   * @param {string} [options.reason] Reason for changing the position\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel position\n   * channel.setPosition(2)\n   *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, { relative, reason } = {}) {\n    return Util.setPosition(\n      this,\n      position,\n      relative,\n      this.guild._sortedChannels(this),\n      this.client.api.guilds(this.guild.id).channels,\n      reason,\n    ).then(updatedChannels => {\n      this.client.actions.GuildChannelsPositionUpdate.handle({\n        guild_id: this.guild.id,\n        channels: updatedChannels,\n      });\n      return this;\n    });\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {Object} [options={}] Options for the invite\n   * @param {boolean} [options.temporary=false] Whether members that joined via the invite should be automatically\n   * kicked after 24 hours if they have not yet received a role\n   * @param {number} [options.maxAge=86400] How long the invite should last (in seconds, 0 for forever)\n   * @param {number} [options.maxUses=0] Maximum number of uses\n   * @param {boolean} [options.unique=false] Create a unique invite, or use an existing one with similar settings\n   * @param {string} [options.reason] Reason for creating this\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite({ temporary = false, maxAge = 86400, maxUses = 0, unique, reason } = {}) {\n    return this.client.api\n      .channels(this.id)\n      .invites.post({\n        data: {\n          temporary,\n          max_age: maxAge,\n          max_uses: maxUses,\n          unique,\n        },\n        reason,\n      })\n      .then(invite => new Invite(this.client, invite));\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  async fetchInvites() {\n    const inviteItems = await this.client.api.channels(this.id).invites.get();\n    const invites = new Collection();\n    for (const inviteItem of inviteItems) {\n      const invite = new Invite(this.client, inviteItem);\n      invites.set(invite.code, invite);\n    }\n    return invites;\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Clones this channel.\n   * @param {Object} [options] The options\n   * @param {string} [options.name=this.name] Name of the new channel\n   * @param {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [options.permissionOverwrites=this.permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @param {string} [options.type=this.type] Type of the new channel\n   * @param {string} [options.topic=this.topic] Topic of the new channel (only text)\n   * @param {boolean} [options.nsfw=this.nsfw] Whether the new channel is nsfw (only text)\n   * @param {number} [options.bitrate=this.bitrate] Bitrate of the new channel in bits (only voice)\n   * @param {number} [options.userLimit=this.userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @param {number} [options.rateLimitPerUser=ThisType.rateLimitPerUser] Ratelimit per user for the new channel (only text)\n   * @param {ChannelResolvable} [options.parent=this.parent] Parent of the new channel\n   * @param {string} [options.reason] Reason for cloning this channel\n   * @returns {Promise<GuildChannel>}\n   */\n  clone(options = {}) {\n    Util.mergeDefault(\n      {\n        name: this.name,\n        permissionOverwrites: this.permissionOverwrites,\n        topic: this.topic,\n        type: this.type,\n        nsfw: this.nsfw,\n        parent: this.parent,\n        bitrate: this.bitrate,\n        userLimit: this.userLimit,\n        rateLimitPerUser: this.rateLimitPerUser,\n        reason: null,\n      },\n      options,\n    );\n    return this.guild.channels.create(options.name, options);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\n   * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.\n   * @param {GuildChannel} channel Channel to compare with\n   * @returns {boolean}\n   */\n  equals(channel) {\n    let equal =\n      channel &&\n      this.id === channel.id &&\n      this.type === channel.type &&\n      this.topic === channel.topic &&\n      this.position === channel.position &&\n      this.name === channel.name;\n\n    if (equal) {\n      if (this.permissionOverwrites && channel.permissionOverwrites) {\n        equal = this.permissionOverwrites.equals(channel.permissionOverwrites);\n      } else {\n        equal = !this.permissionOverwrites && !channel.permissionOverwrites;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * Whether the channel is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return this.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false);\n  }\n\n  /**\n   * Whether the channel is manageable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.client.user.id === this.guild.ownerID) return true;\n    if (this.type === 'voice') {\n      if (!this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false)) {\n        return false;\n      }\n    } else if (!this.viewable) {\n      return false;\n    }\n    return this.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false);\n  }\n\n  /**\n   * Whether the channel is viewable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get viewable() {\n    if (this.client.user.id === this.guild.ownerID) return true;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    return permissions.has(Permissions.FLAGS.VIEW_CHANNEL, false);\n  }\n\n  /**\n   * Deletes this channel.\n   * @param {string} [reason] Reason for deleting this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Delete the channel\n   * channel.delete('making room for new channels')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete(reason) {\n    return this.client.api\n      .channels(this.id)\n      .delete({ reason })\n      .then(() => this);\n  }\n}\n\nmodule.exports = GuildChannel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/GuildChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/GuildEmoji.js":
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildEmoji.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseGuildEmoji = __webpack_require__(/*! ./BaseGuildEmoji */ \"./node_modules/discord.js/src/structures/BaseGuildEmoji.js\");\nconst { Error } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst GuildEmojiRoleManager = __webpack_require__(/*! ../managers/GuildEmojiRoleManager */ \"./node_modules/discord.js/src/managers/GuildEmojiRoleManager.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\n\n/**\n * Represents a custom emoji.\n * @extends {BaseGuildEmoji}\n */\nclass GuildEmoji extends BaseGuildEmoji {\n  /**\n   * @name GuildEmoji\n   * @kind constructor\n   * @memberof GuildEmoji\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the guild emoji\n   * @param {Guild} guild The guild the guild emoji is part of\n   */\n\n  /**\n   * The guild this emoji is part of\n   * @type {Guild}\n   * @name GuildEmoji#guild\n   */\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  /**\n   * Whether the emoji is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return !this.managed && this.guild.me.hasPermission(Permissions.FLAGS.MANAGE_EMOJIS);\n  }\n\n  /**\n   * A manager for roles this emoji is active for.\n   * @type {GuildEmojiRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildEmojiRoleManager(this);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @returns {Promise<User>}\n   */\n  fetchAuthor() {\n    if (this.managed) {\n      return Promise.reject(new Error('EMOJI_MANAGED'));\n    } else {\n      if (!this.guild.me) return Promise.reject(new Error('GUILD_UNCACHED_ME'));\n      if (!this.guild.me.permissions.has(Permissions.FLAGS.MANAGE_EMOJIS)) {\n        return Promise.reject(new Error('MISSING_MANAGE_EMOJIS_PERMISSION', this.guild));\n      }\n    }\n    return this.client.api\n      .guilds(this.guild.id)\n      .emojis(this.id)\n      .get()\n      .then(emoji => this.client.users.add(emoji.user));\n  }\n\n  /**\n   * Data for editing an emoji.\n   * @typedef {Object} GuildEmojiEditData\n   * @property {string} [name] The name of the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] Roles to restrict emoji to\n   */\n\n  /**\n   * Edits the emoji.\n   * @param {GuildEmojiEditData} data The new data for the emoji\n   * @param {string} [reason] Reason for editing this emoji\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Edit an emoji\n   * emoji.edit({ name: 'newemoji' })\n   *   .then(e => console.log(`Edited emoji ${e}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    const roles = data.roles ? data.roles.map(r => r.id || r) : undefined;\n    return this.client.api\n      .guilds(this.guild.id)\n      .emojis(this.id)\n      .patch({\n        data: {\n          name: data.name,\n          roles,\n        },\n        reason,\n      })\n      .then(newData => {\n        const clone = this._clone();\n        clone._patch(newData);\n        return clone;\n      });\n  }\n\n  /**\n   * Sets the name of the emoji.\n   * @param {string} name The new name for the emoji\n   * @param {string} [reason] Reason for changing the emoji's name\n   * @returns {Promise<GuildEmoji>}\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Deletes the emoji.\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<GuildEmoji>}\n   */\n  delete(reason) {\n    return this.client.api\n      .guilds(this.guild.id)\n      .emojis(this.id)\n      .delete({ reason })\n      .then(() => this);\n  }\n\n  /**\n   * Whether this emoji is the same as another one.\n   * @param {GuildEmoji|Object} other The emoji to compare it to\n   * @returns {boolean} Whether the emoji is equal to the given emoji or not\n   */\n  equals(other) {\n    if (other instanceof GuildEmoji) {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.managed === this.managed &&\n        other.requiresColons === this.requiresColons &&\n        other.roles.cache.size === this.roles.cache.size &&\n        other.roles.cache.every(role => this.roles.cache.has(role.id))\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.roles.length === this.roles.cache.size &&\n        other.roles.every(role => this.roles.cache.has(role))\n      );\n    }\n  }\n}\n\nmodule.exports = GuildEmoji;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/GuildEmoji.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/GuildMember.js":
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildMember.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst { Presence } = __webpack_require__(/*! ./Presence */ \"./node_modules/discord.js/src/structures/Presence.js\");\nconst Role = __webpack_require__(/*! ./Role */ \"./node_modules/discord.js/src/structures/Role.js\");\nconst VoiceState = __webpack_require__(/*! ./VoiceState */ \"./node_modules/discord.js/src/structures/VoiceState.js\");\nconst TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ \"./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js\");\nconst { Error } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst GuildMemberRoleManager = __webpack_require__(/*! ../managers/GuildMemberRoleManager */ \"./node_modules/discord.js/src/managers/GuildMemberRoleManager.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\n\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass GuildMember extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the guild member\n   * @param {Guild} guild The guild the member is part of\n   */\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The user that this guild member instance represents\n     * @type {User}\n     * @name GuildMember#user\n     */\n    if (data.user) this.user = client.users.add(data.user, true);\n\n    /**\n     * The timestamp the member joined the guild at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The ID of the last message sent by the member in their guild, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = null;\n\n    /**\n     * The ID of the channel for the last message sent by the member in their guild, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageChannelID = null;\n\n    /**\n     * The timestamp of when the member used their Nitro boost on the guild, if it was used\n     * @type {?number}\n     */\n    this.premiumSinceTimestamp = null;\n\n    /**\n     * Whether the member has been removed from the guild\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    this._roles = [];\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The nickname of this member, if they have one\n     * @type {?string}\n     * @name GuildMember#nickname\n     */\n    if (typeof data.nick !== 'undefined') this.nickname = data.nick;\n\n    if (data.joined_at) this.joinedTimestamp = new Date(data.joined_at).getTime();\n    if (data.premium_since) this.premiumSinceTimestamp = new Date(data.premium_since).getTime();\n\n    if (data.user) this.user = this.guild.client.users.add(data.user);\n    if (data.roles) this._roles = data.roles;\n  }\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  /**\n   * Whether this GuildMember is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.joinedTimestamp;\n  }\n\n  /**\n   * A manager for the roles belonging to this member\n   * @type {GuildMemberRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildMemberRoleManager(this);\n  }\n\n  /**\n   * The Message object of the last message sent by the member in their guild, if one was sent\n   * @type {?Message}\n   * @readonly\n   */\n  get lastMessage() {\n    const channel = this.guild.channels.cache.get(this.lastMessageChannelID);\n    return (channel && channel.messages.cache.get(this.lastMessageID)) || null;\n  }\n\n  /**\n   * The voice state of this member\n   * @type {VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.guild.voiceStates.cache.get(this.id) || new VoiceState(this.guild, { user_id: this.id });\n  }\n\n  /**\n   * The time this member joined the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp ? new Date(this.joinedTimestamp) : null;\n  }\n\n  /**\n   * The time of when the member used their Nitro boost on the guild, if it was used\n   * @type {?Date}\n   * @readonly\n   */\n  get premiumSince() {\n    return this.premiumSinceTimestamp ? new Date(this.premiumSinceTimestamp) : null;\n  }\n\n  /**\n   * The presence of this guild member\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    return (\n      this.guild.presences.cache.get(this.id) ||\n      new Presence(this.client, {\n        user: {\n          id: this.id,\n        },\n        guild: this.guild,\n      })\n    );\n  }\n\n  /**\n   * The displayed color of this member in base 10\n   * @type {number}\n   * @readonly\n   */\n  get displayColor() {\n    const role = this.roles.color;\n    return (role && role.color) || 0;\n  }\n\n  /**\n   * The displayed color of this member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n  get displayHexColor() {\n    const role = this.roles.color;\n    return (role && role.hexColor) || '#000000';\n  }\n\n  /**\n   * The ID of this member\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * The nickname of this member, or their username if they don't have one\n   * @type {string}\n   * @readonly\n   */\n  get displayName() {\n    return this.nickname || this.user.username;\n  }\n\n  /**\n   * The overall set of permissions for this member, taking only roles into account\n   * @type {Readonly<Permissions>}\n   * @readonly\n   */\n  get permissions() {\n    if (this.user.id === this.guild.ownerID) return new Permissions(Permissions.ALL).freeze();\n    return new Permissions(this.roles.cache.map(role => role.permissions)).freeze();\n  }\n\n  /**\n   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\n   * This is a prerequisite for many moderative actions.\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.user.id === this.guild.ownerID) return false;\n    if (this.user.id === this.client.user.id) return false;\n    if (this.client.user.id === this.guild.ownerID) return true;\n    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return this.guild.me.roles.highest.comparePositionTo(this.roles.highest) > 0;\n  }\n\n  /**\n   * Whether this member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get kickable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.KICK_MEMBERS);\n  }\n\n  /**\n   * Whether this member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get bannable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.BAN_MEMBERS);\n  }\n\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {ChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<Permissions>}\n   */\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n    return channel.memberPermissions(this);\n  }\n\n  /**\n   * Checks if any of this member's roles have a permission.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {Object} [options] Options\n   * @param {boolean} [options.checkAdmin=true] Whether to allow the administrator permission to override\n   * @param {boolean} [options.checkOwner=true] Whether to allow being the guild's owner to override\n   * @returns {boolean}\n   */\n  hasPermission(permission, { checkAdmin = true, checkOwner = true } = {}) {\n    if (checkOwner && this.user.id === this.guild.ownerID) return true;\n    return this.roles.cache.some(r => r.permissions.has(permission, checkAdmin));\n  }\n\n  /**\n   * The data for editing a guild member.\n   * @typedef {Object} GuildMemberEditData\n   * @property {string} [nick] The nickname to set for the member\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles or role IDs to apply\n   * @property {boolean} [mute] Whether or not the member should be muted\n   * @property {boolean} [deaf] Whether or not the member should be deafened\n   * @property {ChannelResolvable|null} [channel] Channel to move member to (if they are connected to voice), or `null`\n   * if you want to kick them from voice\n   */\n\n  /**\n   * Edits this member.\n   * @param {GuildMemberEditData} data The data to edit the member with\n   * @param {string} [reason] Reason for editing this user\n   * @returns {Promise<GuildMember>}\n   */\n  async edit(data, reason) {\n    if (data.channel) {\n      data.channel = this.guild.channels.resolve(data.channel);\n      if (!data.channel || data.channel.type !== 'voice') {\n        throw new Error('GUILD_VOICE_CHANNEL_RESOLVE');\n      }\n      data.channel_id = data.channel.id;\n      data.channel = undefined;\n    } else if (data.channel === null) {\n      data.channel_id = null;\n      data.channel = undefined;\n    }\n    if (data.roles) data.roles = data.roles.map(role => (role instanceof Role ? role.id : role));\n    let endpoint = this.client.api.guilds(this.guild.id);\n    if (this.user.id === this.client.user.id) {\n      const keys = Object.keys(data);\n      if (keys.length === 1 && keys[0] === 'nick') endpoint = endpoint.members('@me').nick;\n      else endpoint = endpoint.members(this.id);\n    } else {\n      endpoint = endpoint.members(this.id);\n    }\n    await endpoint.patch({ data, reason });\n\n    const clone = this._clone();\n    data.user = this.user;\n    clone._patch(data);\n    return clone;\n  }\n\n  /**\n   * Sets the nickname for this member.\n   * @param {string} nick The nickname for the guild member\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   */\n  setNickname(nick, reason) {\n    return this.edit({ nick }, reason);\n  }\n\n  /**\n   * Creates a DM channel between the client and this member.\n   * @returns {Promise<DMChannel>}\n   */\n  createDM() {\n    return this.user.createDM();\n  }\n\n  /**\n   * Deletes any DMs with this member.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n\n  /**\n   * Kicks this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.client.api\n      .guilds(this.guild.id)\n      .members(this.user.id)\n      .delete({ reason })\n      .then(() => this);\n  }\n\n  /**\n   * Bans this guild member.\n   * @param {Object} [options] Options for the ban\n   * @param {number} [options.days=0] Number of days of messages to delete\n   * @param {string} [options.reason] Reason for banning\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // ban a guild member\n   * guildMember.ban({ days: 7, reason: 'They deserved it' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  ban(options) {\n    return this.guild.members.ban(this, options);\n  }\n\n  /**\n   * Fetches this GuildMember.\n   * @returns {Promise<GuildMember>}\n   */\n  fetch() {\n    return this.guild.members.fetch(this.id, true);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${member}!`);\n   */\n  toString() {\n    return `<@${this.nickname ? '!' : ''}${this.user.id}>`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildID',\n      user: 'userID',\n      displayName: true,\n      speaking: false,\n      lastMessage: false,\n      lastMessageID: false,\n      roles: true,\n    });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n}\n\nTextBasedChannel.applyToClass(GuildMember);\n\nmodule.exports = GuildMember;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/GuildMember.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/GuildPreview.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildPreview.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst GuildPreviewEmoji = __webpack_require__(/*! ./GuildPreviewEmoji */ \"./node_modules/discord.js/src/structures/GuildPreviewEmoji.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\n\n/**\n * Represents the data about the guild any bot can preview, connected to the specified public guild.\n * @extends {Base}\n */\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n\n    if (!data) return;\n\n    this._patch(data);\n  }\n\n  /**\n   * Builds the public guild with the provided data.\n   * @param {*} data The raw data of the public guild\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The id of this public guild\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this public guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon of this public guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The splash icon of this public guild\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The discovery splash icon of this public guild\n     * @type {?string}\n     */\n    this.discoverySplash = data.discovery_splash;\n\n    /**\n     * An array of enabled guild features\n     * @type {Features[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The approximate count of members in this public guild\n     * @type {number}\n     */\n    this.approximateMemberCount = data.approximate_member_count;\n\n    /**\n     * The approximate count of online members in this public guild\n     * @type {number}\n     */\n    this.approximatePresenceCount = data.approximate_presence_count;\n\n    /**\n     * The description for this public guild\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this public guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n  }\n\n  /**\n   * The URL to this public guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL({ format, size } = {}) {\n    if (!this.splash) return null;\n    return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The URL to this public guild's discovery splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL({ format, size } = {}) {\n    if (!this.discoverySplash) return null;\n    return this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * The URL to this public guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size, dynamic } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * Fetches this public guild.\n   * @returns {Promise<GuildPreview>}\n   */\n  fetch() {\n    return this.client.api\n      .guilds(this.id)\n      .preview.get()\n      .then(data => {\n        this._patch(data);\n        return this;\n      });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n}\n\nmodule.exports = GuildPreview;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/GuildPreview.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/GuildPreviewEmoji.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildPreviewEmoji.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseGuildEmoji = __webpack_require__(/*! ./BaseGuildEmoji */ \"./node_modules/discord.js/src/structures/BaseGuildEmoji.js\");\n\n/**\n * Represents an instance of an emoji belonging to a public guild obtained through Discord's preview endpoint.\n * @extends {BaseGuildEmoji}\n */\nclass GuildPreviewEmoji extends BaseGuildEmoji {\n  /**\n   * The public guild this emoji is part of\n   * @type {GuildPreview}\n   * @name GuildPreviewEmoji#guild\n   */\n\n  /**\n   * Set of roles this emoji is active for\n   * @type {Set<Snowflake>}\n   * @readonly\n   */\n  get roles() {\n    return new Set(this._roles);\n  }\n}\n\nmodule.exports = GuildPreviewEmoji;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/GuildPreviewEmoji.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Integration.js":
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Integration.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\n\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n *  Represents a guild integration.\n */\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The integration id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The integration name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The integration type (twitch, youtube, etc)\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this integration is enabled\n     * @type {boolean}\n     */\n    this.enabled = data.enabled;\n\n    /**\n     * Whether this integration is syncing\n     * @type {boolean}\n     */\n    this.syncing = data.syncing;\n\n    /**\n     * The role that this integration uses for subscribers\n     * @type {Role}\n     */\n    this.role = this.guild.roles.cache.get(data.role_id);\n\n    /**\n     * The user for this integration\n     * @type {User}\n     */\n    this.user = this.client.users.add(data.user);\n\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n    this.account = data.account;\n\n    /**\n     * The last time this integration was last synced\n     * @type {number}\n     */\n    this.syncedAt = data.synced_at;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The behavior of expiring subscribers\n     * @type {number}\n     */\n    this.expireBehavior = data.expire_behavior;\n\n    /**\n     * The grace period before expiring subscribers\n     * @type {number}\n     */\n    this.expireGracePeriod = data.expire_grace_period;\n  }\n\n  /**\n   * Sync this integration\n   * @returns {Promise<Integration>}\n   */\n  sync() {\n    this.syncing = true;\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .post()\n      .then(() => {\n        this.syncing = false;\n        this.syncedAt = Date.now();\n        return this;\n      });\n  }\n\n  /**\n   * The data for editing an integration.\n   * @typedef {Object} IntegrationEditData\n   * @property {number} [expireBehavior] The new behaviour of expiring subscribers\n   * @property {number} [expireGracePeriod] The new grace period before expiring subscribers\n   */\n\n  /**\n   * Edits this integration.\n   * @param {IntegrationEditData} data The data to edit this integration with\n   * @param {string} reason Reason for editing this integration\n   * @returns {Promise<Integration>}\n   */\n  edit(data, reason) {\n    if ('expireBehavior' in data) {\n      data.expire_behavior = data.expireBehavior;\n      data.expireBehavior = null;\n    }\n    if ('expireGracePeriod' in data) {\n      data.expire_grace_period = data.expireGracePeriod;\n      data.expireGracePeriod = null;\n    }\n    // The option enable_emoticons is only available for Twitch at this moment\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .patch({ data, reason })\n      .then(() => {\n        this._patch(data);\n        return this;\n      });\n  }\n\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n  delete(reason) {\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .delete({ reason })\n      .then(() => this);\n  }\n\n  toJSON() {\n    return super.toJSON({\n      role: 'roleID',\n      guild: 'guildID',\n      user: 'userID',\n    });\n  }\n}\n\nmodule.exports = Integration;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Integration.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Invite.js":
/*!**********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Invite.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst { Endpoints } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\n\n/**\n * Represents an invitation to a guild channel.\n * <warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>\n * @extends {Base}\n */\nclass Invite extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The guild the invite is for\n     * @type {?Guild}\n     */\n    this.guild = data.guild ? this.client.guilds.add(data.guild, false) : null;\n\n    /**\n     * The code for this invite\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * The approximate number of online members of the guild this invite is for\n     * @type {?number}\n     */\n    this.presenceCount = 'approximate_presence_count' in data ? data.approximate_presence_count : null;\n\n    /**\n     * The approximate total number of members of the guild this invite is for\n     * @type {?number}\n     */\n    this.memberCount = 'approximate_member_count' in data ? data.approximate_member_count : null;\n\n    /**\n     * Whether or not this invite is temporary\n     * @type {?boolean}\n     */\n    this.temporary = 'temporary' in data ? data.temporary : null;\n\n    /**\n     * The maximum age of the invite, in seconds, 0 if never expires\n     * @type {?number}\n     */\n    this.maxAge = 'max_age' in data ? data.max_age : null;\n\n    /**\n     * How many times this invite has been used\n     * @type {?number}\n     */\n    this.uses = 'uses' in data ? data.uses : null;\n\n    /**\n     * The maximum uses of this invite\n     * @type {?number}\n     */\n    this.maxUses = 'max_uses' in data ? data.max_uses : null;\n\n    /**\n     * The user who created this invite\n     * @type {?User}\n     */\n    this.inviter = data.inviter ? this.client.users.add(data.inviter) : null;\n\n    /**\n     * The target user for this invite\n     * @type {?User}\n     */\n    this.targetUser = data.target_user ? this.client.users.add(data.target_user) : null;\n\n    /**\n     * The type of the target user:\n     * * 1: STREAM\n     * @typedef {number} TargetUser\n     */\n\n    /**\n     * The target user type\n     * @type {?TargetUser}\n     */\n    this.targetUserType = typeof data.target_user_type === 'number' ? data.target_user_type : null;\n\n    /**\n     * The channel the invite is for\n     * @type {Channel}\n     */\n    this.channel = this.client.channels.add(data.channel, this.guild, false);\n\n    /**\n     * The timestamp the invite was created at\n     * @type {?number}\n     */\n    this.createdTimestamp = 'created_at' in data ? new Date(data.created_at).getTime() : null;\n  }\n\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.createdTimestamp ? new Date(this.createdTimestamp) : null;\n  }\n\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return (\n      this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false) ||\n      guild.me.permissions.has(Permissions.FLAGS.MANAGE_GUILD)\n    );\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1000 : null;\n  }\n\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n  get expiresAt() {\n    const { expiresTimestamp } = this;\n    return expiresTimestamp ? new Date(expiresTimestamp) : null;\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Endpoints.invite(this.client.options.http.invite, this.code);\n  }\n\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n  delete(reason) {\n    return this.client.api.invites[this.code].delete({ reason }).then(() => this);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelID',\n      inviter: 'inviterID',\n      guild: 'guildID',\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n}\n\nmodule.exports = Invite;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Invite.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Message.js":
/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Message.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst APIMessage = __webpack_require__(/*! ./APIMessage */ \"./node_modules/discord.js/src/structures/APIMessage.js\");\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst ClientApplication = __webpack_require__(/*! ./ClientApplication */ \"./node_modules/discord.js/src/structures/ClientApplication.js\");\nconst MessageAttachment = __webpack_require__(/*! ./MessageAttachment */ \"./node_modules/discord.js/src/structures/MessageAttachment.js\");\nconst Embed = __webpack_require__(/*! ./MessageEmbed */ \"./node_modules/discord.js/src/structures/MessageEmbed.js\");\nconst Mentions = __webpack_require__(/*! ./MessageMentions */ \"./node_modules/discord.js/src/structures/MessageMentions.js\");\nconst ReactionCollector = __webpack_require__(/*! ./ReactionCollector */ \"./node_modules/discord.js/src/structures/ReactionCollector.js\");\nconst { Error, TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst ReactionManager = __webpack_require__(/*! ../managers/ReactionManager */ \"./node_modules/discord.js/src/managers/ReactionManager.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { MessageTypes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst MessageFlags = __webpack_require__(/*! ../util/MessageFlags */ \"./node_modules/discord.js/src/util/MessageFlags.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a message on Discord.\n * @extends {Base}\n */\nclass Message extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the message\n   * @param {TextChannel|DMChannel} channel The channel the message was sent in\n   */\n  constructor(client, data, channel) {\n    super(client);\n\n    /**\n     * The channel that the message was sent in\n     * @type {TextChannel|DMChannel}\n     */\n    this.channel = channel;\n\n    /**\n     * Whether this message has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the message\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of the message\n     * @type {MessageType}\n     */\n    this.type = MessageTypes[data.type];\n\n    /**\n     * The content of the message\n     * @type {string}\n     */\n    this.content = data.content;\n\n    /**\n     * The author of the message\n     * @type {?User}\n     */\n    this.author = data.author ? this.client.users.add(data.author, !data.webhook_id) : null;\n\n    /**\n     * Whether or not this message is pinned\n     * @type {boolean}\n     */\n    this.pinned = data.pinned;\n\n    /**\n     * Whether or not the message was Text-To-Speech\n     * @type {boolean}\n     */\n    this.tts = data.tts;\n\n    /**\n     * A random number or string used for checking message delivery\n     * <warn>This is only received after the message was sent successfully, and\n     * lost if re-fetched</warn>\n     * @type {?string}\n     */\n    this.nonce = data.nonce;\n\n    /**\n     * Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)\n     * @type {boolean}\n     */\n    this.system = data.type !== 0;\n\n    /**\n     * A list of embeds in the message - e.g. YouTube Player\n     * @type {MessageEmbed[]}\n     */\n    this.embeds = (data.embeds || []).map(e => new Embed(e, true));\n\n    /**\n     * A collection of attachments in the message - e.g. Pictures - mapped by their ID\n     * @type {Collection<Snowflake, MessageAttachment>}\n     */\n    this.attachments = new Collection();\n    if (data.attachments) {\n      for (const attachment of data.attachments) {\n        this.attachments.set(attachment.id, new MessageAttachment(attachment.url, attachment.filename, attachment));\n      }\n    }\n\n    /**\n     * The timestamp the message was sent at\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.timestamp).getTime();\n\n    /**\n     * The timestamp the message was last edited at (if applicable)\n     * @type {?number}\n     */\n    this.editedTimestamp = data.edited_timestamp ? new Date(data.edited_timestamp).getTime() : null;\n\n    /**\n     * A manager of the reactions belonging to this message\n     * @type {ReactionManager}\n     */\n    this.reactions = new ReactionManager(this);\n    if (data.reactions && data.reactions.length > 0) {\n      for (const reaction of data.reactions) {\n        this.reactions.add(reaction);\n      }\n    }\n\n    /**\n     * All valid mentions that the message contains\n     * @type {MessageMentions}\n     */\n    this.mentions = new Mentions(this, data.mentions, data.mention_roles, data.mention_everyone, data.mention_channels);\n\n    /**\n     * ID of the webhook that sent the message, if applicable\n     * @type {?Snowflake}\n     */\n    this.webhookID = data.webhook_id || null;\n\n    /**\n     * Supplemental application information for group activities\n     * @type {?ClientApplication}\n     */\n    this.application = data.application ? new ClientApplication(this.client, data.application) : null;\n\n    /**\n     * Group activity\n     * @type {?MessageActivity}\n     */\n    this.activity = data.activity\n      ? {\n          partyID: data.activity.party_id,\n          type: data.activity.type,\n        }\n      : null;\n\n    /**\n     * The previous versions of the message, sorted with the most recent first\n     * @type {Message[]}\n     * @private\n     */\n    this._edits = [];\n\n    if (this.member && data.member) {\n      this.member._patch(data.member);\n    } else if (data.member && this.guild && this.author) {\n      this.guild.members.add(Object.assign(data.member, { user: this.author }));\n    }\n\n    /**\n     * Flags that are applied to the message\n     * @type {Readonly<MessageFlags>}\n     */\n    this.flags = new MessageFlags(data.flags).freeze();\n\n    /**\n     * Reference data sent in a crossposted message.\n     * @typedef {Object} MessageReference\n     * @property {string} channelID ID of the channel the message was crossposted from\n     * @property {?string} guildID ID of the guild the message was crossposted from\n     * @property {?string} messageID ID of the message that was crossposted\n     */\n\n    /**\n     * Message reference data\n     * @type {?MessageReference}\n     */\n    this.reference = data.message_reference\n      ? {\n          channelID: data.message_reference.channel_id,\n          guildID: data.message_reference.guild_id,\n          messageID: data.message_reference.message_id,\n        }\n      : null;\n  }\n\n  /**\n   * Whether or not this message is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.content !== 'string' || !this.author;\n  }\n\n  /**\n   * Updates the message.\n   * @param {Object} data Raw Discord message update data\n   * @private\n   */\n  patch(data) {\n    const clone = this._clone();\n    this._edits.unshift(clone);\n\n    if ('edited_timestamp' in data) this.editedTimestamp = new Date(data.edited_timestamp).getTime();\n    if ('content' in data) this.content = data.content;\n    if ('pinned' in data) this.pinned = data.pinned;\n    if ('tts' in data) this.tts = data.tts;\n    if ('embeds' in data) this.embeds = data.embeds.map(e => new Embed(e, true));\n    else this.embeds = this.embeds.slice();\n\n    if ('attachments' in data) {\n      this.attachments = new Collection();\n      for (const attachment of data.attachments) {\n        this.attachments.set(attachment.id, new MessageAttachment(attachment.url, attachment.filename, attachment));\n      }\n    } else {\n      this.attachments = new Collection(this.attachments);\n    }\n\n    this.mentions = new Mentions(\n      this,\n      'mentions' in data ? data.mentions : this.mentions.users,\n      'mention_roles' in data ? data.mention_roles : this.mentions.roles,\n      'mention_everyone' in data ? data.mention_everyone : this.mentions.everyone,\n      'mention_channels' in data ? data.mention_channels : this.mentions.crosspostedChannels,\n    );\n\n    this.flags = new MessageFlags('flags' in data ? data.flags : 0).freeze();\n  }\n\n  /**\n   * Represents the author of the message as a guild member.\n   * Only available if the message comes from a guild where the author is still a member\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild ? this.guild.member(this.author) || null : null;\n  }\n\n  /**\n   * The time the message was sent at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the message was last edited at (if applicable)\n   * @type {?Date}\n   * @readonly\n   */\n  get editedAt() {\n    return this.editedTimestamp ? new Date(this.editedTimestamp) : null;\n  }\n\n  /**\n   * The guild the message was sent in (if in a guild channel)\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.channel.guild || null;\n  }\n\n  /**\n   * The url to jump to this message\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `https://discordapp.com/channels/${this.guild ? this.guild.id : '@me'}/${this.channel.id}/${this.id}`;\n  }\n\n  /**\n   * The message contents with all mentions replaced by the equivalent text.\n   * If mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.\n   * @type {string}\n   * @readonly\n   */\n  get cleanContent() {\n    // eslint-disable-next-line eqeqeq\n    return this.content != null ? Util.cleanContent(this.content, this) : null;\n  }\n\n  /**\n   * Creates a reaction collector.\n   * @param {CollectorFilter} filter The filter to apply\n   * @param {ReactionCollectorOptions} [options={}] Options to send to the collector\n   * @returns {ReactionCollector}\n   * @example\n   * // Create a reaction collector\n   * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID';\n   * const collector = message.createReactionCollector(filter, { time: 15000 });\n   * collector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createReactionCollector(filter, options = {}) {\n    return new ReactionCollector(this, filter, options);\n  }\n\n  /**\n   * An object containing the same properties as CollectorOptions, but a few more:\n   * @typedef {ReactionCollectorOptions} AwaitReactionsOptions\n   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject\n   */\n\n  /**\n   * Similar to createReactionCollector but in promise form.\n   * Resolves with a collection of reactions that pass the specified filter.\n   * @param {CollectorFilter} filter The filter function to use\n   * @param {AwaitReactionsOptions} [options={}] Optional options to pass to the internal collector\n   * @returns {Promise<Collection<string, MessageReaction>>}\n   * @example\n   * // Create a reaction collector\n   * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\n   * message.awaitReactions(filter, { time: 15000 })\n   *   .then(collected => console.log(`Collected ${collected.size} reactions`))\n   *   .catch(console.error);\n   */\n  awaitReactions(filter, options = {}) {\n    return new Promise((resolve, reject) => {\n      const collector = this.createReactionCollector(filter, options);\n      collector.once('end', (reactions, reason) => {\n        if (options.errors && options.errors.includes(reason)) reject(reactions);\n        else resolve(reactions);\n      });\n    });\n  }\n\n  /**\n   * An array of cached versions of the message, including the current version\n   * Sorted from latest (first) to oldest (last)\n   * @type {Message[]}\n   * @readonly\n   */\n  get edits() {\n    const copy = this._edits.slice();\n    copy.unshift(this);\n    return copy;\n  }\n\n  /**\n   * Whether the message is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    return this.author.id === this.client.user.id;\n  }\n\n  /**\n   * Whether the message is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return (\n      !this.deleted &&\n      (this.author.id === this.client.user.id ||\n        (this.guild && this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_MESSAGES, false)))\n    );\n  }\n\n  /**\n   * Whether the message is pinnable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get pinnable() {\n    return (\n      this.type === 'DEFAULT' &&\n      (!this.guild || this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_MESSAGES, false))\n    );\n  }\n\n  /**\n   * Options that can be passed into editMessage.\n   * @typedef {Object} MessageEditOptions\n   * @property {string} [content] Content to be edited\n   * @property {Object} [embed] An embed to be added/edited\n   * @property {string|boolean} [code] Language for optional codeblock formatting to apply\n   * @property {MessageMentionOptions} [allowedMentions] Which mentions should be parsed from the message content\n   */\n\n  /**\n   * Edits the content of the message.\n   * @param {StringResolvable|APIMessage} [content] The new content for the message\n   * @param {MessageEditOptions|MessageEmbed} [options] The options to provide\n   * @returns {Promise<Message>}\n   * @example\n   * // Update the content of a message\n   * message.edit('This is my new content!')\n   *   .then(msg => console.log(`Updated the content of a message to ${msg.content}`))\n   *   .catch(console.error);\n   */\n  edit(content, options) {\n    const { data } =\n      content instanceof APIMessage ? content.resolveData() : APIMessage.create(this, content, options).resolveData();\n    return this.client.api.channels[this.channel.id].messages[this.id].patch({ data }).then(d => {\n      const clone = this._clone();\n      clone._patch(d);\n      return clone;\n    });\n  }\n\n  /**\n   * Pins this message to the channel's pinned messages.\n   * @returns {Promise<Message>}\n   */\n  pin() {\n    return this.client.api\n      .channels(this.channel.id)\n      .pins(this.id)\n      .put()\n      .then(() => this);\n  }\n\n  /**\n   * Unpins this message from the channel's pinned messages.\n   * @returns {Promise<Message>}\n   */\n  unpin() {\n    return this.client.api\n      .channels(this.channel.id)\n      .pins(this.id)\n      .delete()\n      .then(() => this);\n  }\n\n  /**\n   * Adds a reaction to the message.\n   * @param {EmojiIdentifierResolvable} emoji The emoji to react with\n   * @returns {Promise<MessageReaction>}\n   * @example\n   * // React to a message with a unicode emoji\n   * message.react('🤔')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // React to a message with a custom emoji\n   * message.react(message.guild.emojis.cache.get('123456789012345678'))\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  react(emoji) {\n    emoji = this.client.emojis.resolveIdentifier(emoji);\n    if (!emoji) throw new TypeError('EMOJI_TYPE');\n\n    return this.client.api\n      .channels(this.channel.id)\n      .messages(this.id)\n      .reactions(emoji, '@me')\n      .put()\n      .then(\n        () =>\n          this.client.actions.MessageReactionAdd.handle({\n            user: this.client.user,\n            channel: this.channel,\n            message: this,\n            emoji: Util.parseEmoji(emoji),\n          }).reaction,\n      );\n  }\n\n  /**\n   * Deletes the message.\n   * @param {Object} [options] Options\n   * @param {number} [options.timeout=0] How long to wait to delete the message in milliseconds\n   * @param {string} [options.reason] Reason for deleting this message, if it does not belong to the client user\n   * @returns {Promise<Message>}\n   * @example\n   * // Delete a message\n   * message.delete()\n   *   .then(msg => console.log(`Deleted message from ${msg.author.username}`))\n   *   .catch(console.error);\n   */\n  delete(options = {}) {\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    const { timeout = 0, reason } = options;\n    if (timeout <= 0) {\n      return this.channel.messages.delete(this.id, reason).then(() => this);\n    } else {\n      return new Promise(resolve => {\n        this.client.setTimeout(() => {\n          resolve(this.delete({ reason }));\n        }, timeout);\n      });\n    }\n  }\n\n  /**\n   * Replies to the message.\n   * @param {StringResolvable|APIMessage} [content=''] The content for the message\n   * @param {MessageOptions|MessageAdditions} [options={}] The options to provide\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // Reply to a message\n   * message.reply('Hey, I\\'m a reply!')\n   *   .then(() => console.log(`Sent a reply to ${message.author.username}`))\n   *   .catch(console.error);\n   */\n  reply(content, options) {\n    return this.channel.send(\n      content instanceof APIMessage\n        ? content\n        : APIMessage.transformOptions(content, options, { reply: this.member || this.author }),\n    );\n  }\n\n  /**\n   * Fetch this message.\n   * @returns {Promise<Message>}\n   */\n  fetch() {\n    return this.channel.messages.fetch(this.id, true);\n  }\n\n  /**\n   * Fetches the webhook used to create this message.\n   * @returns {Promise<?Webhook>}\n   */\n  fetchWebhook() {\n    if (!this.webhookID) return Promise.reject(new Error('WEBHOOK_MESSAGE'));\n    return this.client.fetchWebhook(this.webhookID);\n  }\n\n  /**\n   * Suppresses or unsuppresses embeds on a message\n   * @param {boolean} [suppress=true] If the embeds should be suppressed or not\n   * @returns {Promise<Message>}\n   */\n  suppressEmbeds(suppress = true) {\n    const flags = new MessageFlags(this.flags.bitfield);\n\n    if (suppress) {\n      flags.add(MessageFlags.FLAGS.SUPPRESS_EMBEDS);\n    } else {\n      flags.remove(MessageFlags.FLAGS.SUPPRESS_EMBEDS);\n    }\n\n    return this.edit({ flags });\n  }\n\n  /**\n   * Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\n   * without checking all the properties, use `message.id === message2.id`, which is much more efficient. This\n   * method allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.\n   * @param {Message} message The message to compare it to\n   * @param {Object} rawData Raw data passed through the WebSocket about this message\n   * @returns {boolean}\n   */\n  equals(message, rawData) {\n    if (!message) return false;\n    const embedUpdate = !message.author && !message.attachments;\n    if (embedUpdate) return this.id === message.id && this.embeds.length === message.embeds.length;\n\n    let equal =\n      this.id === message.id &&\n      this.author.id === message.author.id &&\n      this.content === message.content &&\n      this.tts === message.tts &&\n      this.nonce === message.nonce &&\n      this.embeds.length === message.embeds.length &&\n      this.attachments.length === message.attachments.length;\n\n    if (equal && rawData) {\n      equal =\n        this.mentions.everyone === message.mentions.everyone &&\n        this.createdTimestamp === new Date(rawData.timestamp).getTime() &&\n        this.editedTimestamp === new Date(rawData.edited_timestamp).getTime();\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the message's content instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Message: This is a message!\n   * console.log(`Message: ${message}`);\n   */\n  toString() {\n    return this.content;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      channel: 'channelID',\n      author: 'authorID',\n      application: 'applicationID',\n      guild: 'guildID',\n      cleanContent: true,\n      member: false,\n      reactions: false,\n    });\n  }\n}\n\nmodule.exports = Message;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Message.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/MessageAttachment.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageAttachment.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents an attachment in a message.\n */\nclass MessageAttachment {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @param {Object} [data] Extra data\n   */\n  constructor(attachment, name = null, data) {\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n    this.name = name;\n    if (data) this._patch(data);\n  }\n\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @returns {MessageAttachment} This attachment\n   */\n  setFile(attachment, name = null) {\n    this.attachment = attachment;\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the name of this attachment.\n   * @param {string} name The name of the file\n   * @returns {MessageAttachment} This attachment\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  _patch(data) {\n    /**\n     * The ID of this attachment\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The size of this attachment in bytes\n     * @type {number}\n     */\n    this.size = data.size;\n\n    /**\n     * The URL to this attachment\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The Proxy URL to this attachment\n     * @type {string}\n     */\n    this.proxyURL = data.proxy_url;\n\n    /**\n     * The height of this attachment (if an image or video)\n     * @type {?number}\n     */\n    this.height = typeof data.height !== 'undefined' ? data.height : null;\n\n    /**\n     * The width of this attachment (if an image or video)\n     * @type {?number}\n     */\n    this.width = typeof data.width !== 'undefined' ? data.width : null;\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return Util.basename(this.url).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\nmodule.exports = MessageAttachment;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/MessageAttachment.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/MessageCollector.js":
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageCollector.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Collector = __webpack_require__(/*! ./interfaces/Collector */ \"./node_modules/discord.js/src/structures/interfaces/Collector.js\");\nconst { Events } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * @typedef {CollectorOptions} MessageCollectorOptions\n * @property {number} max The maximum amount of messages to collect\n * @property {number} maxProcessed The maximum amount of messages to process\n */\n\n/**\n * Collects messages on a channel.\n * Will automatically stop if the channel (`'channelDelete'`) or guild (`'guildDelete'`) are deleted.\n * @extends {Collector}\n */\nclass MessageCollector extends Collector {\n  /**\n   * @param {TextChannel|DMChannel} channel The channel\n   * @param {CollectorFilter} filter The filter to be applied to this collector\n   * @param {MessageCollectorOptions} options The options to be applied to this collector\n   * @emits MessageCollector#message\n   */\n  constructor(channel, filter, options = {}) {\n    super(channel.client, filter, options);\n\n    /**\n     * The channel\n     * @type {TextBasedChannel}\n     */\n    this.channel = channel;\n\n    /**\n     * Total number of messages that were received in the channel during message collection\n     * @type {number}\n     */\n    this.received = 0;\n\n    const bulkDeleteListener = messages => {\n      for (const message of messages.values()) this.handleDispose(message);\n    };\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n\n    if (this.client.getMaxListeners() !== 0) this.client.setMaxListeners(this.client.getMaxListeners() + 1);\n    this.client.on(Events.MESSAGE_CREATE, this.handleCollect);\n    this.client.on(Events.MESSAGE_DELETE, this.handleDispose);\n    this.client.on(Events.MESSAGE_BULK_DELETE, bulkDeleteListener);\n    this.client.on(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n    this.client.on(Events.GUILD_DELETE, this._handleGuildDeletion);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.MESSAGE_CREATE, this.handleCollect);\n      this.client.removeListener(Events.MESSAGE_DELETE, this.handleDispose);\n      this.client.removeListener(Events.MESSAGE_BULK_DELETE, bulkDeleteListener);\n      this.client.removeListener(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n      this.client.removeListener(Events.GUILD_DELETE, this._handleGuildDeletion);\n      if (this.client.getMaxListeners() !== 0) this.client.setMaxListeners(this.client.getMaxListeners() - 1);\n    });\n  }\n\n  /**\n   * Handles a message for possible collection.\n   * @param {Message} message The message that could be collected\n   * @returns {?Snowflake}\n   * @private\n   */\n  collect(message) {\n    /**\n     * Emitted whenever a message is collected.\n     * @event MessageCollector#collect\n     * @param {Message} message The message that was collected\n     */\n    if (message.channel.id !== this.channel.id) return null;\n    this.received++;\n    return message.id;\n  }\n\n  /**\n   * Handles a message for possible disposal.\n   * @param {Message} message The message that could be disposed of\n   * @returns {?Snowflake}\n   */\n  dispose(message) {\n    /**\n     * Emitted whenever a message is disposed of.\n     * @event MessageCollector#dispose\n     * @param {Message} message The message that was disposed of\n     */\n    return message.channel.id === this.channel.id ? message.id : null;\n  }\n\n  /**\n   * Checks after un/collection to see if the collector is done.\n   * @returns {?string}\n   * @private\n   */\n  endReason() {\n    if (this.options.max && this.collected.size >= this.options.max) return 'limit';\n    if (this.options.maxProcessed && this.received === this.options.maxProcessed) return 'processedLimit';\n    return null;\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.channel.id) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (this.channel.guild && guild.id === this.channel.guild.id) {\n      this.stop('guildDelete');\n    }\n  }\n}\n\nmodule.exports = MessageCollector;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/MessageCollector.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/MessageEmbed.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageEmbed.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { RangeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\nclass MessageEmbed {\n  /**\n   * @name MessageEmbed\n   * @kind constructor\n   * @memberof MessageEmbed\n   * @param {MessageEmbed|Object} [data={}] MessageEmbed to clone or raw embed data\n   */\n\n  constructor(data = {}, skipValidation = false) {\n    this.setup(data, skipValidation);\n  }\n\n  setup(data, skipValidation) {\n    /**\n     * The type of this embed, either:\n     * * `rich` - a rich embed\n     * * `image` - an image embed\n     * * `video` - a video embed\n     * * `gifv` - a gifv embed\n     * * `article` - an article embed\n     * * `link` - a link embed\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n    this.title = data.title;\n\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The URL of this embed\n     * @type {?string}\n     */\n    this.url = data.url;\n\n    /**\n     * The color of this embed\n     * @type {?number}\n     */\n    this.color = Util.resolveColor(data.color);\n\n    /**\n     * The timestamp of this embed\n     * @type {?number}\n     */\n    this.timestamp = data.timestamp ? new Date(data.timestamp).getTime() : null;\n\n    /**\n     * @typedef {Object} EmbedField\n     * @property {string} name The name of this field\n     * @property {string} value The value of this field\n     * @property {boolean} inline If this field will be displayed inline\n     */\n\n    /**\n     * The fields of this embed\n     * @type {EmbedField[]}\n     */\n    this.fields = [];\n    if (data.fields) {\n      this.fields = skipValidation ? data.fields.map(Util.cloneObject) : this.constructor.normalizeFields(data.fields);\n    }\n\n    /**\n     * @typedef {Object} MessageEmbedThumbnail\n     * @property {string} url URL for this thumbnail\n     * @property {string} proxyURL ProxyURL for this thumbnail\n     * @property {number} height Height of this thumbnail\n     * @property {number} width Width of this thumbnail\n     */\n\n    /**\n     * The thumbnail of this embed (if there is one)\n     * @type {?MessageEmbedThumbnail}\n     */\n    this.thumbnail = data.thumbnail\n      ? {\n          url: data.thumbnail.url,\n          proxyURL: data.thumbnail.proxyURL || data.thumbnail.proxy_url,\n          height: data.thumbnail.height,\n          width: data.thumbnail.width,\n        }\n      : null;\n\n    /**\n     * @typedef {Object} MessageEmbedImage\n     * @property {string} url URL for this image\n     * @property {string} proxyURL ProxyURL for this image\n     * @property {number} height Height of this image\n     * @property {number} width Width of this image\n     */\n\n    /**\n     * The image of this embed, if there is one\n     * @type {?MessageEmbedImage}\n     */\n    this.image = data.image\n      ? {\n          url: data.image.url,\n          proxyURL: data.image.proxyURL || data.image.proxy_url,\n          height: data.image.height,\n          width: data.image.width,\n        }\n      : null;\n\n    /**\n     * @typedef {Object} MessageEmbedVideo\n     * @property {string} url URL of this video\n     * @property {string} proxyURL ProxyURL for this video\n     * @property {number} height Height of this video\n     * @property {number} width Width of this video\n     */\n\n    /**\n     * The video of this embed (if there is one)\n     * @type {?MessageEmbedVideo}\n     * @readonly\n     */\n    this.video = data.video\n      ? {\n          url: data.video.url,\n          proxyURL: data.video.proxyURL || data.video.proxy_url,\n          height: data.video.height,\n          width: data.video.width,\n        }\n      : null;\n\n    /**\n     * @typedef {Object} MessageEmbedAuthor\n     * @property {string} name The name of this author\n     * @property {string} url URL of this author\n     * @property {string} iconURL URL of the icon for this author\n     * @property {string} proxyIconURL Proxied URL of the icon for this author\n     */\n\n    /**\n     * The author of this embed (if there is one)\n     * @type {?MessageEmbedAuthor}\n     */\n    this.author = data.author\n      ? {\n          name: data.author.name,\n          url: data.author.url,\n          iconURL: data.author.iconURL || data.author.icon_url,\n          proxyIconURL: data.author.proxyIconURL || data.author.proxy_icon_url,\n        }\n      : null;\n\n    /**\n     * @typedef {Object} MessageEmbedProvider\n     * @property {string} name The name of this provider\n     * @property {string} url URL of this provider\n     */\n\n    /**\n     * The provider of this embed (if there is one)\n     * @type {?MessageEmbedProvider}\n     */\n    this.provider = data.provider\n      ? {\n          name: data.provider.name,\n          url: data.provider.name,\n        }\n      : null;\n\n    /**\n     * @typedef {Object} MessageEmbedFooter\n     * @property {string} text The text of this footer\n     * @property {string} iconURL URL of the icon for this footer\n     * @property {string} proxyIconURL Proxied URL of the icon for this footer\n     */\n\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n    this.footer = data.footer\n      ? {\n          text: data.footer.text,\n          iconURL: data.footer.iconURL || data.footer.icon_url,\n          proxyIconURL: data.footer.proxyIconURL || data.footer.proxy_icon_url,\n        }\n      : null;\n\n    /**\n     * The files of this embed\n     * @type {Array<FileOptions|string|MessageAttachment>}\n     */\n    this.files = data.files || [];\n  }\n\n  /**\n   * The date displayed on this embed\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.timestamp ? new Date(this.timestamp) : null;\n  }\n\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {?string}\n   * @readonly\n   */\n  get hexColor() {\n    return this.color ? `#${this.color.toString(16).padStart(6, '0')}` : null;\n  }\n\n  /**\n   * The accumulated length for the embed title, description, fields and footer text\n   * @type {number}\n   * @readonly\n   */\n  get length() {\n    return (\n      (this.title ? this.title.length : 0) +\n      (this.description ? this.description.length : 0) +\n      (this.fields.length >= 1\n        ? this.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0)\n        : 0) +\n      (this.footer ? this.footer.text.length : 0)\n    );\n  }\n\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {StringResolvable} name The name of this field\n   * @param {StringResolvable} value The value of this field\n   * @param {boolean} [inline=false] If this field will be displayed inline\n   * @returns {MessageEmbed}\n   */\n  addField(name, value, inline) {\n    return this.addFields({ name, value, inline });\n  }\n\n  /**\n   * Adds fields to the embed (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to add\n   * @returns {MessageEmbed}\n   */\n  addFields(...fields) {\n    this.fields.push(...this.constructor.normalizeFields(fields));\n    return this;\n  }\n\n  /**\n   * Removes, replaces, and inserts fields in the embed (max 25).\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of fields to remove\n   * @param {...EmbedFieldData|EmbedFieldData[]} [fields] The replacing field objects\n   * @returns {MessageEmbed}\n   */\n  spliceFields(index, deleteCount, ...fields) {\n    this.fields.splice(index, deleteCount, ...this.constructor.normalizeFields(...fields));\n    return this;\n  }\n\n  /**\n   * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\n   * setting an embed image or author/footer icons. Multiple files can be attached.\n   * @param {Array<FileOptions|string|MessageAttachment>} files Files to attach\n   * @returns {MessageEmbed}\n   */\n  attachFiles(files) {\n    this.files = this.files.concat(files);\n    return this;\n  }\n\n  /**\n   * Sets the author of this embed.\n   * @param {StringResolvable} name The name of the author\n   * @param {string} [iconURL] The icon URL of the author\n   * @param {string} [url] The URL of the author\n   * @returns {MessageEmbed}\n   */\n  setAuthor(name, iconURL, url) {\n    this.author = { name: Util.resolveString(name), iconURL, url };\n    return this;\n  }\n\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {MessageEmbed}\n   */\n  setColor(color) {\n    this.color = Util.resolveColor(color);\n    return this;\n  }\n\n  /**\n   * Sets the description of this embed.\n   * @param {StringResolvable} description The description\n   * @returns {MessageEmbed}\n   */\n  setDescription(description) {\n    description = Util.resolveString(description);\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the footer of this embed.\n   * @param {StringResolvable} text The text of the footer\n   * @param {string} [iconURL] The icon URL of the footer\n   * @returns {MessageEmbed}\n   */\n  setFooter(text, iconURL) {\n    text = Util.resolveString(text);\n    this.footer = { text, iconURL };\n    return this;\n  }\n\n  /**\n   * Sets the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {MessageEmbed}\n   */\n  setImage(url) {\n    this.image = { url };\n    return this;\n  }\n\n  /**\n   * Sets the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {MessageEmbed}\n   */\n  setThumbnail(url) {\n    this.thumbnail = { url };\n    return this;\n  }\n\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date|number} [timestamp=Date.now()] The timestamp or date\n   * @returns {MessageEmbed}\n   */\n  setTimestamp(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    this.timestamp = timestamp;\n    return this;\n  }\n\n  /**\n   * Sets the title of this embed.\n   * @param {StringResolvable} title The title\n   * @returns {MessageEmbed}\n   */\n  setTitle(title) {\n    title = Util.resolveString(title);\n    this.title = title;\n    return this;\n  }\n\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {MessageEmbed}\n   */\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Transforms the embed to a plain object.\n   * @returns {Object} The raw data of this embed\n   */\n  toJSON() {\n    return {\n      title: this.title,\n      type: 'rich',\n      description: this.description,\n      url: this.url,\n      timestamp: this.timestamp ? new Date(this.timestamp) : null,\n      color: this.color,\n      fields: this.fields,\n      thumbnail: this.thumbnail,\n      image: this.image,\n      author: this.author\n        ? {\n            name: this.author.name,\n            url: this.author.url,\n            icon_url: this.author.iconURL,\n          }\n        : null,\n      footer: this.footer\n        ? {\n            text: this.footer.text,\n            icon_url: this.footer.iconURL,\n          }\n        : null,\n    };\n  }\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param {StringResolvable} name The name of the field\n   * @param {StringResolvable} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {EmbedField}\n   */\n  static normalizeField(name, value, inline = false) {\n    name = Util.resolveString(name);\n    if (!name) throw new RangeError('EMBED_FIELD_NAME');\n    value = Util.resolveString(value);\n    if (!value) throw new RangeError('EMBED_FIELD_VALUE');\n    return { name, value, inline };\n  }\n\n  /**\n   * @typedef {Object} EmbedFieldData\n   * @property {StringResolvable} name The name of this field\n   * @property {StringResolvable} value The value of this field\n   * @property {boolean} [inline] If this field will be displayed inline\n   */\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param  {...EmbedFieldData|EmbedFieldData[]} fields Fields to normalize\n   * @returns {EmbedField[]}\n   */\n  static normalizeFields(...fields) {\n    return fields\n      .flat(2)\n      .map(field =>\n        this.normalizeField(\n          field && field.name,\n          field && field.value,\n          field && typeof field.inline === 'boolean' ? field.inline : false,\n        ),\n      );\n  }\n}\n\nmodule.exports = MessageEmbed;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/MessageEmbed.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/MessageMentions.js":
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageMentions.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { ChannelTypes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Keeps track of mentions in a {@link Message}.\n */\nclass MessageMentions {\n  constructor(message, users, roles, everyone, crosspostedChannels) {\n    /**\n     * The client the message is from\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: message.client });\n\n    /**\n     * The guild the message is in\n     * @type {?Guild}\n     * @readonly\n     */\n    Object.defineProperty(this, 'guild', { value: message.guild });\n\n    /**\n     * The initial message content\n     * @type {string}\n     * @readonly\n     * @private\n     */\n    Object.defineProperty(this, '_content', { value: message.content });\n\n    /**\n     * Whether `@everyone` or `@here` were mentioned\n     * @type {boolean}\n     */\n    this.everyone = Boolean(everyone);\n\n    if (users) {\n      if (users instanceof Collection) {\n        /**\n         * Any users that were mentioned\n         * <info>Order as received from the API, not as they appear in the message content</info>\n         * @type {Collection<Snowflake, User>}\n         */\n        this.users = new Collection(users);\n      } else {\n        this.users = new Collection();\n        for (const mention of users) {\n          if (mention.member && message.guild) {\n            message.guild.members.add(Object.assign(mention.member, { user: mention }));\n          }\n          const user = message.client.users.add(mention);\n          this.users.set(user.id, user);\n        }\n      }\n    } else {\n      this.users = new Collection();\n    }\n\n    if (roles) {\n      if (roles instanceof Collection) {\n        /**\n         * Any roles that were mentioned\n         * <info>Order as received from the API, not as they appear in the message content</info>\n         * @type {Collection<Snowflake, Role>}\n         */\n        this.roles = new Collection(roles);\n      } else {\n        this.roles = new Collection();\n        for (const mention of roles) {\n          const role = message.channel.guild.roles.cache.get(mention);\n          if (role) this.roles.set(role.id, role);\n        }\n      }\n    } else {\n      this.roles = new Collection();\n    }\n\n    /**\n     * Cached members for {@link MessageMention#members}\n     * @type {?Collection<Snowflake, GuildMember>}\n     * @private\n     */\n    this._members = null;\n\n    /**\n     * Cached channels for {@link MessageMention#channels}\n     * @type {?Collection<Snowflake, GuildChannel>}\n     * @private\n     */\n    this._channels = null;\n\n    /**\n     * Crossposted channel data.\n     * @typedef {Object} CrosspostedChannel\n     * @property {string} channelID ID of the mentioned channel\n     * @property {string} guildID ID of the guild that has the channel\n     * @property {string} type Type of the channel\n     * @property {string} name The name of the channel\n     */\n\n    if (crosspostedChannels) {\n      if (crosspostedChannels instanceof Collection) {\n        /**\n         * A collection of crossposted channels\n         * <info>Order as received from the API, not as they appear in the message content</info>\n         * @type {Collection<Snowflake, CrosspostedChannel>}\n         */\n        this.crosspostedChannels = new Collection(crosspostedChannels);\n      } else {\n        this.crosspostedChannels = new Collection();\n        const channelTypes = Object.keys(ChannelTypes);\n        for (const d of crosspostedChannels) {\n          const type = channelTypes[d.type];\n          this.crosspostedChannels.set(d.id, {\n            channelID: d.id,\n            guildID: d.guild_id,\n            type: type ? type.toLowerCase() : 'unknown',\n            name: d.name,\n          });\n        }\n      }\n    } else {\n      this.crosspostedChannels = new Collection();\n    }\n  }\n\n  /**\n   * Any members that were mentioned (only in {@link TextChannel}s)\n   * <info>Order as received from the API, not as they appear in the message content</info>\n   * @type {?Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    if (this._members) return this._members;\n    if (!this.guild) return null;\n    this._members = new Collection();\n    this.users.forEach(user => {\n      const member = this.guild.member(user);\n      if (member) this._members.set(member.user.id, member);\n    });\n    return this._members;\n  }\n\n  /**\n   * Any channels that were mentioned\n   * <info>Order as they appear first in the message content</info>\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @readonly\n   */\n  get channels() {\n    if (this._channels) return this._channels;\n    this._channels = new Collection();\n    let matches;\n    while ((matches = this.constructor.CHANNELS_PATTERN.exec(this._content)) !== null) {\n      const chan = this.client.channels.cache.get(matches[1]);\n      if (chan) this._channels.set(chan.id, chan);\n    }\n    return this._channels;\n  }\n\n  /**\n   * Checks if a user, guild member, role, or channel is mentioned.\n   * Takes into account user mentions, role mentions, and @everyone/@here mentions.\n   * @param {UserResolvable|GuildMember|Role|GuildChannel} data User/GuildMember/Role/Channel to check\n   * @param {Object} [options] Options\n   * @param {boolean} [options.ignoreDirect=false] - Whether to ignore direct mentions to the item\n   * @param {boolean} [options.ignoreRoles=false] - Whether to ignore role mentions to a guild member\n   * @param {boolean} [options.ignoreEveryone=false] - Whether to ignore everyone/here mentions\n   * @returns {boolean}\n   */\n  has(data, { ignoreDirect = false, ignoreRoles = false, ignoreEveryone = false } = {}) {\n    if (!ignoreEveryone && this.everyone) return true;\n    const GuildMember = __webpack_require__(/*! ./GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\");\n    if (!ignoreRoles && data instanceof GuildMember) {\n      for (const role of this.roles.values()) if (data.roles.cache.has(role.id)) return true;\n    }\n\n    if (!ignoreDirect) {\n      const id = data.id || data;\n      return this.users.has(id) || this.channels.has(id) || this.roles.has(id);\n    }\n\n    return false;\n  }\n\n  toJSON() {\n    return Util.flatten(this, {\n      members: true,\n      channels: true,\n    });\n  }\n}\n\n/**\n * Regular expression that globally matches `@everyone` and `@here`\n * @type {RegExp}\n */\nMessageMentions.EVERYONE_PATTERN = /@(everyone|here)/g;\n\n/**\n * Regular expression that globally matches user mentions like `<@81440962496172032>`\n * @type {RegExp}\n */\nMessageMentions.USERS_PATTERN = /<@!?(\\d{17,19})>/g;\n\n/**\n * Regular expression that globally matches role mentions like `<@&297577916114403338>`\n * @type {RegExp}\n */\nMessageMentions.ROLES_PATTERN = /<@&(\\d{17,19})>/g;\n\n/**\n * Regular expression that globally matches channel mentions like `<#222079895583457280>`\n * @type {RegExp}\n */\nMessageMentions.CHANNELS_PATTERN = /<#(\\d{17,19})>/g;\n\nmodule.exports = MessageMentions;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/MessageMentions.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/MessageReaction.js":
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageReaction.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst GuildEmoji = __webpack_require__(/*! ./GuildEmoji */ \"./node_modules/discord.js/src/structures/GuildEmoji.js\");\nconst ReactionEmoji = __webpack_require__(/*! ./ReactionEmoji */ \"./node_modules/discord.js/src/structures/ReactionEmoji.js\");\nconst ReactionUserManager = __webpack_require__(/*! ../managers/ReactionUserManager */ \"./node_modules/discord.js/src/managers/ReactionUserManager.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the message reaction\n   * @param {Message} message The message the reaction refers to\n   */\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = data.me;\n\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n    this.users = new ReactionUserManager(client, undefined, this);\n\n    this._emoji = new ReactionEmoji(this, data.emoji);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The number of people that have given the same reaction\n     * @type {?number}\n     * @name MessageReaction#count\n     */\n    // eslint-disable-next-line eqeqeq\n    if (this.count == undefined) this.count = data.count;\n  }\n\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    await this.client.api\n      .channels(this.message.channel.id)\n      .messages(this.message.id)\n      .reactions(this._emoji.identifier)\n      .delete();\n    return this;\n  }\n\n  /**\n   * The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.count === null;\n  }\n\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id || this.emoji.name);\n    // The reaction won't get set when it has been completely removed\n    this._patch(existing || { count: 0 });\n    return this;\n  }\n\n  toJSON() {\n    return Util.flatten(this, { emoji: 'emojiID', message: 'messageID' });\n  }\n\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    if (!this.me) this.me = user.id === this.message.client.user.id;\n  }\n\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id || this.emoji.name);\n    }\n  }\n}\n\nmodule.exports = MessageReaction;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/MessageReaction.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/NewsChannel.js":
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/NewsChannel.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst TextChannel = __webpack_require__(/*! ./TextChannel */ \"./node_modules/discord.js/src/structures/TextChannel.js\");\n\n/**\n * Represents a guild news channel on Discord.\n * @extends {TextChannel}\n */\nclass NewsChannel extends TextChannel {\n  _patch(data) {\n    super._patch(data);\n\n    // News channels don't have a rate limit per user, remove it\n    this.rateLimitPerUser = undefined;\n  }\n}\n\nmodule.exports = NewsChannel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/NewsChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/PartialGroupDMChannel.js":
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/PartialGroupDMChannel.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Channel = __webpack_require__(/*! ./Channel */ \"./node_modules/discord.js/src/structures/Channel.js\");\nconst { Error } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\n\n/**\n * Represents a Partial Group DM Channel on Discord.\n * @extends {Channel}\n */\nclass PartialGroupDMChannel extends Channel {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The name of this Group DM Channel\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of the channel icon\n     * @type {?string}\n     */\n    this.icon = data.icon;\n  }\n\n  /**\n   * The URL to this channel's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.GDMIcon(this.id, this.icon, format, size);\n  }\n\n  delete() {\n    return Promise.reject(new Error('DELETE_GROUP_DM_CHANNEL'));\n  }\n\n  fetch() {\n    return Promise.reject(new Error('FETCH_GROUP_DM_CHANNEL'));\n  }\n}\n\nmodule.exports = PartialGroupDMChannel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/PartialGroupDMChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/PermissionOverwrites.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/PermissionOverwrites.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Role = __webpack_require__(/*! ./Role */ \"./node_modules/discord.js/src/structures/Role.js\");\nconst { TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n */\nclass PermissionOverwrites {\n  constructor(guildChannel, data) {\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', { value: guildChannel });\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of this overwrite, either a user ID or a role ID\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of a permission overwrite. It can be one of:\n     * * member\n     * * role\n     * @typedef {string} OverwriteType\n     */\n\n    /**\n     * The type of this overwrite\n     * @type {OverwriteType}\n     */\n    this.type = data.type;\n\n    /**\n     * The permissions that are denied for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.deny = new Permissions(data.deny).freeze();\n\n    /**\n     * The permissions that are allowed for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.allow = new Permissions(data.allow).freeze();\n  }\n\n  /**\n   * Updates this permissionOverwrites.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.update({\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  update(options, reason) {\n    const { allow, deny } = this.constructor.resolveOverwriteOptions(options, this);\n\n    return this.channel.client.api\n      .channels(this.channel.id)\n      .permissions[this.id].put({\n        data: { id: this.id, type: this.type, allow: allow.bitfield, deny: deny.bitfield },\n        reason,\n      })\n      .then(() => this);\n  }\n\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  delete(reason) {\n    return this.channel.client.api.channels[this.channel.id].permissions[this.id].delete({ reason }).then(() => this);\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'EMBED_LINKS': null,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {object} ResolvedOverwriteOptions\n   * @property {Permissions} allow The allowed permissions\n   * @property {Permissions} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {Object} initialPermissions The initial permissions\n   * @param {PermissionResolvable} initialPermissions.allow Initial allowed permissions\n   * @param {PermissionResolvable} initialPermissions.deny Initial denied permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n  static resolveOverwriteOptions(options, { allow, deny } = {}) {\n    allow = new Permissions(allow);\n    deny = new Permissions(deny);\n\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      } else if (value === false) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.add(Permissions.FLAGS[perm]);\n      } else if (value === null) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      }\n    }\n\n    return { allow, deny };\n  }\n\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the overwrite\n   * @property {number} allow The permissions to allow\n   * @property {number} deny The permissions to deny\n   * @property {OverwriteType} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} guild The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n    if (typeof overwrite.id === 'string' && ['role', 'member'].includes(overwrite.type)) {\n      return { ...overwrite, allow: Permissions.resolve(overwrite.allow), deny: Permissions.resolve(overwrite.deny) };\n    }\n\n    const userOrRole = guild.roles.resolve(overwrite.id) || guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role', true);\n    const type = userOrRole instanceof Role ? 'role' : 'member';\n\n    return {\n      id: userOrRole.id,\n      type,\n      allow: Permissions.resolve(overwrite.allow),\n      deny: Permissions.resolve(overwrite.deny),\n    };\n  }\n}\n\nmodule.exports = PermissionOverwrites;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/PermissionOverwrites.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Presence.js":
/*!************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Presence.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Emoji = __webpack_require__(/*! ./Emoji */ \"./node_modules/discord.js/src/structures/Emoji.js\");\nconst ActivityFlags = __webpack_require__(/*! ../util/ActivityFlags */ \"./node_modules/discord.js/src/util/ActivityFlags.js\");\nconst { ActivityTypes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyID] Id of the party represented in activity\n * @property {number} [type] Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n */\nclass Presence {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the presence\n   */\n  constructor(client, data = {}) {\n    /**\n     * The client that instantiated this\n     * @name Presence#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    /**\n     * The user ID of this presence\n     * @type {Snowflake}\n     */\n    this.userID = data.user.id;\n\n    /**\n     * The guild of this presence\n     * @type {?Guild}\n     */\n    this.guild = data.guild || null;\n\n    this.patch(data);\n  }\n\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.cache.get(this.userID) || null;\n  }\n\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.userID) || null;\n  }\n\n  patch(data) {\n    /**\n     * The status of this presence\n     * @type {PresenceStatus}\n     */\n    this.status = data.status || this.status || 'offline';\n\n    if (data.activities) {\n      /**\n       * The activities of this presence\n       * @type {Activity[]}\n       */\n      this.activities = data.activities.map(activity => new Activity(this, activity));\n    } else if (data.activity || data.game) {\n      this.activities = [new Activity(this, data.game || data.activity)];\n    } else {\n      this.activities = [];\n    }\n\n    /**\n     * The devices this presence is on\n     * @type {?Object}\n     * @property {?ClientPresenceStatus} web The current presence in the web application\n     * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n     * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n     */\n    this.clientStatus = data.client_status || null;\n\n    return this;\n  }\n\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    if (this.activities) clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return (\n      this === presence ||\n      (presence &&\n        this.status === presence.status &&\n        this.activities.length === presence.activities.length &&\n        this.activities.every((activity, index) => activity.equals(presence.activities[index])) &&\n        this.clientStatus.web === presence.clientStatus.web &&\n        this.clientStatus.mobile === presence.clientStatus.mobile &&\n        this.clientStatus.desktop === presence.clientStatus.desktop)\n    );\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Represents an activity that is part of a user's presence.\n */\nclass Activity {\n  constructor(presence, data) {\n    Object.defineProperty(this, 'presence', { value: presence });\n\n    /**\n     * The name of the activity being played\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The type of the activity status\n     * @type {ActivityType}\n     */\n    this.type = ActivityTypes[data.type];\n\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url || null;\n\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n    this.details = data.details || null;\n\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n    this.state = data.state || null;\n\n    /**\n     * Application ID associated with this activity\n     * @type {?Snowflake}\n     */\n    this.applicationID = data.application_id || null;\n\n    /**\n     * Timestamps for the activity\n     * @type {?Object}\n     * @prop {?Date} start When the activity started\n     * @prop {?Date} end When the activity will end\n     */\n    this.timestamps = data.timestamps\n      ? {\n          start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n          end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null,\n        }\n      : null;\n\n    /**\n     * Party of the activity\n     * @type {?Object}\n     * @prop {?string} id ID of the party\n     * @prop {number[]} size Size of the party as `[current, max]`\n     */\n    this.party = data.party || null;\n\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n\n    this.syncID = data.sync_id;\n\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlags>}\n     */\n    this.flags = new ActivityFlags(data.flags).freeze();\n\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n  equals(activity) {\n    return (\n      this === activity ||\n      (activity && this.name === activity.name && this.type === activity.type && this.url === activity.url)\n    );\n  }\n\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the activities' name instead of the Activity object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n}\n\n/**\n * Assets for a rich presence\n */\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    Object.defineProperty(this, 'activity', { value: activity });\n\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n    this.largeText = assets.large_text || null;\n\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n    this.smallText = assets.small_text || null;\n\n    /**\n     * ID of the large image asset\n     * @type {?Snowflake}\n     */\n    this.largeImage = assets.large_image || null;\n\n    /**\n     * ID of the small image asset\n     * @type {?Snowflake}\n     */\n    this.smallImage = assets.small_image || null;\n  }\n\n  /**\n   * Gets the URL of the small image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The small image URL\n   */\n  smallImageURL({ format, size } = {}) {\n    if (!this.smallImage) return null;\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.smallImage, {\n      format,\n      size,\n    });\n  }\n\n  /**\n   * Gets the URL of the large image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The large image URL\n   */\n  largeImageURL({ format, size } = {}) {\n    if (!this.largeImage) return null;\n    if (/^spotify:/.test(this.largeImage)) {\n      return `https://i.scdn.co/image/${this.largeImage.slice(8)}`;\n    } else if (/^twitch:/.test(this.largeImage)) {\n      return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${this.largeImage.slice(7)}.png`;\n    }\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.largeImage, {\n      format,\n      size,\n    });\n  }\n}\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Presence.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/ReactionCollector.js":
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ReactionCollector.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Collector = __webpack_require__(/*! ./interfaces/Collector */ \"./node_modules/discord.js/src/structures/interfaces/Collector.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { Events } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message (`'messageDelete'`),\n * channel (`'channelDelete'`), or guild (`'guildDelete'`) are deleted.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {CollectorFilter} filter The filter to apply to this collector\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, filter, options = {}) {\n    super(message.client, filter, options);\n\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users which have reacted to this message\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n\n    if (this.client.getMaxListeners() !== 0) this.client.setMaxListeners(this.client.getMaxListeners() + 1);\n    this.client.on(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n    this.client.on(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n    this.client.on(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n    this.client.on(Events.GUILD_DELETE, this._handleGuildDeletion);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n      this.client.removeListener(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n      this.client.removeListener(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n      this.client.removeListener(Events.GUILD_DELETE, this._handleGuildDeletion);\n      if (this.client.getMaxListeners() !== 0) this.client.setMaxListeners(this.client.getMaxListeners() - 1);\n    });\n\n    this.on('collect', (reaction, user) => {\n      this.total++;\n      this.users.set(user.id, user);\n    });\n\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @returns {?Snowflake|string}\n   * @private\n   */\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    return ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?Snowflake|string}\n   */\n  dispose(reaction, user) {\n    /**\n     * Emitted whenever a reaction is disposed of.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    /**\n     * Emitted whenever a reaction is removed from a message. Will emit on all reaction removals,\n     * as opposed to {@link Collector#dispose} which will only be emitted when the entire reaction\n     * is removed.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Empties this reaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return null;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channel.id) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (this.message.guild && guild.id === this.message.guild.id) {\n      this.stop('guildDelete');\n    }\n  }\n\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n  static key(reaction) {\n    return reaction.emoji.id || reaction.emoji.name;\n  }\n}\n\nmodule.exports = ReactionCollector;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/ReactionCollector.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/ReactionEmoji.js":
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ReactionEmoji.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Emoji = __webpack_require__(/*! ./Emoji */ \"./node_modules/discord.js/src/structures/Emoji.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\n * will use this class opposed to the Emoji class when the client doesn't know enough\n * information about them.\n * @extends {Emoji}\n */\nclass ReactionEmoji extends Emoji {\n  constructor(reaction, emoji) {\n    super(reaction.message.client, emoji);\n    /**\n     * The message reaction this emoji refers to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  toJSON() {\n    return Util.flatten(this, { identifier: true });\n  }\n\n  valueOf() {\n    return this.id;\n  }\n}\n\nmodule.exports = ReactionEmoji;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/ReactionEmoji.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Role.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Role.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst { Error, TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a role on Discord.\n * @extends {Base}\n */\nclass Role extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the role\n   * @param {Guild} guild The guild the role is part of\n   */\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the role (unique to the guild it is part of)\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the role\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The base 10 color of the role\n     * @type {number}\n     */\n    this.color = data.color;\n\n    /**\n     * If true, users that are part of this role will appear in a separate category in the users list\n     * @type {boolean}\n     */\n    this.hoist = data.hoist;\n\n    /**\n     * The raw position of the role from the API\n     * @type {number}\n     */\n    this.rawPosition = data.position;\n\n    /**\n     * The permissions of the role\n     * @type {Readonly<Permissions>}\n     */\n    this.permissions = new Permissions(data.permissions).freeze();\n\n    /**\n     * Whether or not the role is managed by an external service\n     * @type {boolean}\n     */\n    this.managed = data.managed;\n\n    /**\n     * Whether or not the role can be mentioned by anyone\n     * @type {boolean}\n     */\n    this.mentionable = data.mentionable;\n\n    /**\n     * Whether the role has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n  }\n\n  /**\n   * The timestamp the role was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the role was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The hexadecimal version of the role color, with a leading hashtag\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    return `#${this.color.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * The cached guild members that have this role\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.guild.members.cache.filter(m => m.roles.cache.has(this.id));\n  }\n\n  /**\n   * Whether the role is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    if (this.managed) return false;\n    const clientMember = this.guild.member(this.client.user);\n    if (!clientMember.permissions.has(Permissions.FLAGS.MANAGE_ROLES)) return false;\n    return clientMember.roles.highest.comparePositionTo(this) > 0;\n  }\n\n  /**\n   * The position of the role in the role manager\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    const sorted = this.guild._sortedRoles();\n    return sorted.array().indexOf(sorted.get(this.id));\n  }\n\n  /**\n   * Compares this role's position to another role's.\n   * @param {RoleResolvable} role Role to compare to this one\n   * @returns {number} Negative number if this role's position is lower (other role's is higher),\n   * positive number if this one is higher (other's is lower), 0 if equal\n   */\n  comparePositionTo(role) {\n    role = this.guild.roles.resolve(role);\n    if (!role) throw new TypeError('INVALID_TYPE', 'role', 'Role nor a Snowflake');\n    return this.constructor.comparePositions(this, role);\n  }\n\n  /**\n   * The data for a role.\n   * @typedef {Object} RoleData\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   */\n\n  /**\n   * Edits the role.\n   * @param {RoleData} data The new data for the role\n   * @param {string} [reason] Reason for editing this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Edit a role\n   * role.edit({ name: 'new role' })\n   *   .then(updated => console.log(`Edited role ${updated.name} name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  async edit(data, reason) {\n    if (typeof data.permissions !== 'undefined') data.permissions = Permissions.resolve(data.permissions);\n    else data.permissions = this.permissions.bitfield;\n    if (typeof data.position !== 'undefined') {\n      await Util.setPosition(\n        this,\n        data.position,\n        false,\n        this.guild._sortedRoles(),\n        this.client.api.guilds(this.guild.id).roles,\n        reason,\n      ).then(updatedRoles => {\n        this.client.actions.GuildRolesPositionUpdate.handle({\n          guild_id: this.guild.id,\n          roles: updatedRoles,\n        });\n      });\n    }\n    return this.client.api.guilds[this.guild.id].roles[this.id]\n      .patch({\n        data: {\n          name: data.name || this.name,\n          color: data.color !== null ? Util.resolveColor(data.color || this.color) : null,\n          hoist: typeof data.hoist !== 'undefined' ? data.hoist : this.hoist,\n          permissions: data.permissions,\n          mentionable: typeof data.mentionable !== 'undefined' ? data.mentionable : this.mentionable,\n        },\n        reason,\n      })\n      .then(role => {\n        const clone = this._clone();\n        clone._patch(role);\n        return clone;\n      });\n  }\n\n  /**\n   * Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\n   * taking into account permission overwrites.\n   * @param {ChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<Permissions>}\n   */\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n    return channel.rolePermissions(this);\n  }\n\n  /**\n   * Sets a new name for the role.\n   * @param {string} name The new name of the role\n   * @param {string} [reason] Reason for changing the role's name\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the name of the role\n   * role.setName('new role')\n   *   .then(updated => console.log(`Edited name of role ${role.name} to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Sets a new color for the role.\n   * @param {ColorResolvable} color The color of the role\n   * @param {string} [reason] Reason for changing the role's color\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the color of a role\n   * role.setColor('#FF0000')\n   *   .then(updated => console.log(`Set color of role to ${updated.color}`))\n   *   .catch(console.error);\n   */\n  setColor(color, reason) {\n    return this.edit({ color }, reason);\n  }\n\n  /**\n   * Sets whether or not the role should be hoisted.\n   * @param {boolean} hoist Whether or not to hoist the role\n   * @param {string} [reason] Reason for setting whether or not the role should be hoisted\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the hoist of the role\n   * role.setHoist(true)\n   *   .then(r => console.log(`Role hoisted: ${r.hoist}`))\n   *   .catch(console.error);\n   */\n  setHoist(hoist, reason) {\n    return this.edit({ hoist }, reason);\n  }\n\n  /**\n   * Sets the permissions of the role.\n   * @param {PermissionResolvable} permissions The permissions of the role\n   * @param {string} [reason] Reason for changing the role's permissions\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the permissions of the role\n   * role.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove all permissions from a role\n   * role.setPermissions(0)\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   */\n  setPermissions(permissions, reason) {\n    return this.edit({ permissions }, reason);\n  }\n\n  /**\n   * Sets whether this role is mentionable.\n   * @param {boolean} mentionable Whether this role should be mentionable\n   * @param {string} [reason] Reason for setting whether or not this role should be mentionable\n   * @returns {Promise<Role>}\n   * @example\n   * // Make the role mentionable\n   * role.setMentionable(true)\n   *   .then(updated => console.log(`Role updated ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setMentionable(mentionable, reason) {\n    return this.edit({ mentionable }, reason);\n  }\n\n  /**\n   * Sets the position of the role.\n   * @param {number} position The position of the role\n   * @param {Object} [options] Options for setting position\n   * @param {boolean} [options.relative=false] Change the position relative to its current value\n   * @param {string} [options.reason] Reason for changing the position\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the position of the role\n   * role.setPosition(1)\n   *   .then(updated => console.log(`Role position: ${updated.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, { relative, reason } = {}) {\n    return Util.setPosition(\n      this,\n      position,\n      relative,\n      this.guild._sortedRoles(),\n      this.client.api.guilds(this.guild.id).roles,\n      reason,\n    ).then(updatedRoles => {\n      this.client.actions.GuildRolesPositionUpdate.handle({\n        guild_id: this.guild.id,\n        roles: updatedRoles,\n      });\n      return this;\n    });\n  }\n\n  /**\n   * Deletes the role.\n   * @param {string} [reason] Reason for deleting this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Delete a role\n   * role.delete('The role needed to go')\n   *   .then(deleted => console.log(`Deleted role ${deleted.name}`))\n   *   .catch(console.error);\n   */\n  delete(reason) {\n    return this.client.api.guilds[this.guild.id].roles[this.id].delete({ reason }).then(() => {\n      this.client.actions.GuildRoleDelete.handle({ guild_id: this.guild.id, role_id: this.id });\n      return this;\n    });\n  }\n\n  /**\n   * Whether this role equals another role. It compares all properties, so for most operations\n   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Role} role Role to compare with\n   * @returns {boolean}\n   */\n  equals(role) {\n    return (\n      role &&\n      this.id === role.id &&\n      this.name === role.name &&\n      this.color === role.color &&\n      this.hoist === role.hoist &&\n      this.position === role.position &&\n      this.permissions.bitfield === role.permissions.bitfield &&\n      this.managed === role.managed\n    );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the role's mention instead of the Role object.\n   * @returns {string}\n   * @example\n   * // Logs: Role: <@&123456789012345678>\n   * console.log(`Role: ${role}`);\n   */\n  toString() {\n    if (this.id === this.guild.id) return '@everyone';\n    return `<@&${this.id}>`;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n\n  /**\n   * Compares the positions of two roles.\n   * @param {Role} role1 First role to compare\n   * @param {Role} role2 Second role to compare\n   * @returns {number} Negative number if the first role's position is lower (second role's is higher),\n   * positive number if the first's is higher (second's is lower), 0 if equal\n   */\n  static comparePositions(role1, role2) {\n    if (role1.position === role2.position) return role2.id - role1.id;\n    return role1.position - role2.position;\n  }\n}\n\nmodule.exports = Role;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Role.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/StoreChannel.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/StoreChannel.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst GuildChannel = __webpack_require__(/*! ./GuildChannel */ \"./node_modules/discord.js/src/structures/GuildChannel.js\");\n\n/**\n * Represents a guild store channel on Discord.\n * @extends {GuildChannel}\n */\nclass StoreChannel extends GuildChannel {\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     * @readonly\n     */\n    this.nsfw = data.nsfw;\n  }\n}\n\nmodule.exports = StoreChannel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/StoreChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Team.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Team.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst TeamMember = __webpack_require__(/*! ./TeamMember */ \"./node_modules/discord.js/src/structures/TeamMember.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\n\n/**\n * Represents a Client OAuth2 Application Team.\n * @extends {Base}\n */\nclass Team extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the Team\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the Team\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The Team's icon hash\n     * @type {?string}\n     */\n    this.icon = data.icon || null;\n\n    /**\n     * The Team's owner id\n     * @type {?string}\n     */\n    this.ownerID = data.owner_user_id || null;\n\n    /**\n     * The Team's members\n     * @type {Collection<Snowflake, TeamMember>}\n     */\n    this.members = new Collection();\n\n    for (const memberData of data.members) {\n      const member = new TeamMember(this, memberData);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The owner of this team\n   * @type {?TeamMember}\n   * @readonly\n   */\n  get owner() {\n    return this.members.get(this.ownerID) || null;\n  }\n\n  /**\n   * The timestamp the team was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the team was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the teams's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the icon\n   */\n  iconURL({ format, size } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.TeamIcon(this.id, this.icon, { format, size });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the Team's name instead of the\n   * Team object.\n   * @returns {string}\n   * @example\n   * // Logs: Team name: My Team\n   * console.log(`Team name: ${team}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = Team;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Team.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/TeamMember.js":
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/TeamMember.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst { MembershipStates } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * Represents a Client OAuth2 Application Team Member.\n * @extends {Base}\n */\nclass TeamMember extends Base {\n  constructor(team, data) {\n    super(team.client);\n\n    /**\n     * The Team this member is part of\n     * @type {Team}\n     */\n    this.team = team;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The permissions this Team Member has with regard to the team\n     * @type {string[]}\n     */\n    this.permissions = data.permissions;\n\n    /**\n     * The permissions this Team Member has with regard to the team\n     * @type {MembershipStates}\n     */\n    this.membershipState = MembershipStates[data.membership_state];\n\n    /**\n     * The user for this Team Member\n     * @type {User}\n     */\n    this.user = this.client.users.add(data.user);\n  }\n\n  /**\n   * The ID of the Team Member\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the team members's mention instead of the\n   * TeamMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Team Member's mention: <@123456789012345678>\n   * console.log(`Team Member's mention: ${teamMember}`);\n   */\n  toString() {\n    return this.user.toString();\n  }\n}\n\nmodule.exports = TeamMember;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/TeamMember.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/TextChannel.js":
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/TextChannel.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst GuildChannel = __webpack_require__(/*! ./GuildChannel */ \"./node_modules/discord.js/src/structures/GuildChannel.js\");\nconst Webhook = __webpack_require__(/*! ./Webhook */ \"./node_modules/discord.js/src/structures/Webhook.js\");\nconst TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ \"./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js\");\nconst MessageManager = __webpack_require__(/*! ../managers/MessageManager */ \"./node_modules/discord.js/src/managers/MessageManager.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst DataResolver = __webpack_require__(/*! ../util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\");\n\n/**\n * Represents a guild text channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass TextChannel extends GuildChannel {\n  /**\n   * @param {Guild} guild The guild the text channel is part of\n   * @param {Object} data The data for the text channel\n   */\n  constructor(guild, data) {\n    super(guild, data);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n    this.messages = new MessageManager(this);\n    this._typing = new Map();\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The topic of the text channel\n     * @type {?string}\n     */\n    this.topic = data.topic;\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     * @readonly\n     */\n    this.nsfw = data.nsfw;\n\n    /**\n     * The ID of the last message sent in this channel, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = data.last_message_id;\n\n    /**\n     * The ratelimit per user for this channel in seconds\n     * @type {number}\n     */\n    this.rateLimitPerUser = data.rate_limit_per_user || 0;\n\n    /**\n     * The timestamp when the last pinned message was pinned, if there was one\n     * @type {?number}\n     */\n    this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;\n\n    if (data.messages) for (const message of data.messages) this.messages.add(message);\n  }\n\n  /**\n   * Sets the rate limit per user for this channel.\n   * @param {number} rateLimitPerUser The new ratelimit in seconds\n   * @param {string} [reason] Reason for changing the channel's ratelimits\n   * @returns {Promise<TextChannel>}\n   */\n  setRateLimitPerUser(rateLimitPerUser, reason) {\n    return this.edit({ rateLimitPerUser }, reason);\n  }\n\n  /**\n   * Sets whether this channel is flagged as NSFW.\n   * @param {boolean} nsfw Whether the channel should be considered NSFW\n   * @param {string} [reason] Reason for changing the channel's NSFW flag\n   * @returns {Promise<TextChannel>}\n   */\n  setNSFW(nsfw, reason) {\n    return this.edit({ nsfw }, reason);\n  }\n\n  /**\n   * Fetches all webhooks for the channel.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * channel.fetchWebhooks()\n   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.client.api.channels[this.id].webhooks.get().then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  /**\n   * Creates a webhook for the channel.\n   * @param {string} name The name of the webhook\n   * @param {Object} [options] Options for creating the webhook\n   * @param {BufferResolvable|Base64Resolvable} [options.avatar] Avatar for the webhook\n   * @param {string} [options.reason] Reason for creating the webhook\n   * @returns {Promise<Webhook>} webhook The created webhook\n   * @example\n   * // Create a webhook for the current channel\n   * channel.createWebhook('Snek', {\n   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n   *   reason: 'Needed a cool new Webhook'\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  async createWebhook(name, { avatar, reason } = {}) {\n    if (typeof avatar === 'string' && !avatar.startsWith('data:')) {\n      avatar = await DataResolver.resolveImage(avatar);\n    }\n    return this.client.api.channels[this.id].webhooks\n      .post({\n        data: {\n          name,\n          avatar,\n        },\n        reason,\n      })\n      .then(data => new Webhook(this.client, data));\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  send() {}\n  startTyping() {}\n  stopTyping() {}\n  get typing() {}\n  get typingCount() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  bulkDelete() {}\n}\n\nTextBasedChannel.applyToClass(TextChannel, true);\n\nmodule.exports = TextChannel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/TextChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/User.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/User.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst { Presence } = __webpack_require__(/*! ./Presence */ \"./node_modules/discord.js/src/structures/Presence.js\");\nconst TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ \"./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js\");\nconst { Error } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\nconst UserFlags = __webpack_require__(/*! ../util/UserFlags */ \"./node_modules/discord.js/src/util/UserFlags.js\");\n\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass User extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the user\n   */\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The ID of the user\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Whether or not the user is a bot\n     * @type {boolean}\n     * @name User#bot\n     */\n    this.bot = Boolean(data.bot);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The username of the user\n     * @type {?string}\n     * @name User#username\n     */\n    if (data.username) this.username = data.username;\n\n    /**\n     * A discriminator based on username for the user\n     * @type {?string}\n     * @name User#discriminator\n     */\n    if (data.discriminator) this.discriminator = data.discriminator;\n\n    /**\n     * The ID of the user's avatar\n     * @type {?string}\n     * @name User#avatar\n     */\n    if (typeof data.avatar !== 'undefined') this.avatar = data.avatar;\n\n    if (typeof data.bot !== 'undefined') this.bot = Boolean(data.bot);\n\n    /**\n     * Whether the user is an Official Discord System user (part of the urgent message system)\n     * @type {?boolean}\n     * @name User#system\n     */\n    if (typeof data.system !== 'undefined') this.system = Boolean(data.system);\n\n    /**\n     * The locale of the user's client (ISO 639-1)\n     * @type {?string}\n     * @name User#locale\n     */\n    if (data.locale) this.locale = data.locale;\n\n    /**\n     * The flags for this user\n     * @type {?UserFlags}\n     */\n    if (typeof data.public_flags !== 'undefined') this.flags = new UserFlags(data.public_flags);\n\n    /**\n     * The ID of the last message sent by the user, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = null;\n\n    /**\n     * The ID of the channel for the last message sent by the user, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageChannelID = null;\n  }\n\n  /**\n   * Whether this User is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.username !== 'string';\n  }\n\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the user was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The Message object of the last message sent by the user, if one was sent\n   * @type {?Message}\n   * @readonly\n   */\n  get lastMessage() {\n    const channel = this.client.channels.cache.get(this.lastMessageChannelID);\n    return (channel && channel.messages.cache.get(this.lastMessageID)) || null;\n  }\n\n  /**\n   * The presence of this user\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    for (const guild of this.client.guilds.cache.values()) {\n      if (guild.presences.cache.has(this.id)) return guild.presences.cache.get(this.id);\n    }\n    return new Presence(this.client, { user: { id: this.id } });\n  }\n\n  /**\n   * A link to the user's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  avatarURL({ format, size, dynamic } = {}) {\n    if (!this.avatar) return null;\n    return this.client.rest.cdn.Avatar(this.id, this.avatar, format, size, dynamic);\n  }\n\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n  get defaultAvatarURL() {\n    return this.client.rest.cdn.DefaultAvatar(this.discriminator % 5);\n  }\n\n  /**\n   * A link to the user's avatar if they have one.\n   * Otherwise a link to their default avatar will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) || this.defaultAvatarURL;\n  }\n\n  /**\n   * The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user\n   * @type {?string}\n   * @readonly\n   */\n  get tag() {\n    return typeof this.username === 'string' ? `${this.username}#${this.discriminator}` : null;\n  }\n\n  /**\n   * Checks whether the user is typing in a channel.\n   * @param {ChannelResolvable} channel The channel to check in\n   * @returns {boolean}\n   */\n  typingIn(channel) {\n    channel = this.client.channels.resolve(channel);\n    return channel._typing.has(this.id);\n  }\n\n  /**\n   * Gets the time that the user started typing.\n   * @param {ChannelResolvable} channel The channel to get the time in\n   * @returns {?Date}\n   */\n  typingSinceIn(channel) {\n    channel = this.client.channels.resolve(channel);\n    return channel._typing.has(this.id) ? new Date(channel._typing.get(this.id).since) : null;\n  }\n\n  /**\n   * Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.\n   * @param {ChannelResolvable} channel The channel to get the time in\n   * @returns {number}\n   */\n  typingDurationIn(channel) {\n    channel = this.client.channels.resolve(channel);\n    return channel._typing.has(this.id) ? channel._typing.get(this.id).elapsedTime : -1;\n  }\n\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.channels.cache.find(c => c.type === 'dm' && c.recipient.id === this.id) || null;\n  }\n\n  /**\n   * Creates a DM channel between the client and the user.\n   * @returns {Promise<DMChannel>}\n   */\n  async createDM() {\n    const { dmChannel } = this;\n    if (dmChannel && !dmChannel.partial) return dmChannel;\n    const data = await this.client.api.users(this.client.user.id).channels.post({\n      data: {\n        recipient_id: this.id,\n      },\n    });\n    return this.client.actions.ChannelCreate.handle(data).channel;\n  }\n\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n  async deleteDM() {\n    const { dmChannel } = this;\n    if (!dmChannel) throw new Error('USER_NO_DMCHANNEL');\n    const data = await this.client.api.channels(dmChannel.id).delete();\n    return this.client.actions.ChannelDelete.handle(data).channel;\n  }\n\n  /**\n   * Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n  equals(user) {\n    let equal =\n      user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.avatar === user.avatar;\n\n    return equal;\n  }\n\n  /**\n   * Fetches this user's flags.\n   * @returns {Promise<UserFlags>}\n   */\n  async fetchFlags() {\n    if (this.flags) return this.flags;\n    const data = await this.client.api.users(this.id).get();\n    this._patch(data);\n    return this.flags;\n  }\n\n  /**\n   * Fetches this user.\n   * @returns {Promise<User>}\n   */\n  fetch() {\n    return this.client.users.fetch(this.id, true);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${user}!`);\n   */\n  toString() {\n    return `<@${this.id}>`;\n  }\n\n  toJSON(...props) {\n    const json = super.toJSON(\n      {\n        createdTimestamp: true,\n        defaultAvatarURL: true,\n        tag: true,\n        lastMessage: false,\n        lastMessageID: false,\n      },\n      ...props,\n    );\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    return json;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n}\n\nTextBasedChannel.applyToClass(User);\n\nmodule.exports = User;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/User.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/VoiceChannel.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/VoiceChannel.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst GuildChannel = __webpack_require__(/*! ./GuildChannel */ \"./node_modules/discord.js/src/structures/GuildChannel.js\");\nconst { Error } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst Collection = __webpack_require__(/*! ../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { browser } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ \"./node_modules/discord.js/src/util/Permissions.js\");\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {GuildChannel}\n */\nclass VoiceChannel extends GuildChannel {\n  _patch(data) {\n    super._patch(data);\n    /**\n     * The bitrate of this voice channel\n     * @type {number}\n     */\n    this.bitrate = data.bitrate;\n\n    /**\n     * The maximum amount of users allowed in this channel - 0 means unlimited.\n     * @type {number}\n     */\n    this.userLimit = data.user_limit;\n  }\n\n  /**\n   * The members in this voice channel\n   * @type {Collection<Snowflake, GuildMember>}\n   * @name VoiceChannel#members\n   * @readonly\n   */\n  get members() {\n    const coll = new Collection();\n    for (const state of this.guild.voiceStates.cache.values()) {\n      if (state.channelID === this.id && state.member) {\n        coll.set(state.id, state.member);\n      }\n    }\n    return coll;\n  }\n\n  /**\n   * Checks if the voice channel is full\n   * @type {boolean}\n   * @readonly\n   */\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n\n  /**\n   * Whether the channel is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return super.deletable && this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false);\n  }\n\n  /**\n   * Whether the channel is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    return this.manageable && this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false);\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (browser) return false;\n    if (!this.viewable) return false;\n    if (!this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false)) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has(Permissions.FLAGS.MOVE_MEMBERS, false)) return false;\n    return true;\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get speakable() {\n    return this.permissionsFor(this.client.user).has(Permissions.FLAGS.SPEAK, false);\n  }\n\n  /**\n   * Sets the bitrate of the channel.\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * voiceChannel.setBitrate(48000)\n   *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setBitrate(bitrate, reason) {\n    return this.edit({ bitrate }, reason);\n  }\n\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * voiceChannel.setUserLimit(42)\n   *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setUserLimit(userLimit, reason) {\n    return this.edit({ userLimit }, reason);\n  }\n\n  /**\n   * Attempts to join this voice channel.\n   * @returns {Promise<VoiceConnection>}\n   * @example\n   * // Join a voice channel\n   * voiceChannel.join()\n   *   .then(connection => console.log('Connected!'))\n   *   .catch(console.error);\n   */\n  join() {\n    if (browser) return Promise.reject(new Error('VOICE_NO_BROWSER'));\n    return this.client.voice.joinChannel(this);\n  }\n\n  /**\n   * Leaves this voice channel.\n   * @example\n   * // Leave a voice channel\n   * voiceChannel.leave();\n   */\n  leave() {\n    if (browser) return;\n    const connection = this.client.voice.connections.get(this.guild.id);\n    if (connection && connection.channel.id === this.id) connection.disconnect();\n  }\n}\n\nmodule.exports = VoiceChannel;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/VoiceChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/VoiceRegion.js":
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/VoiceRegion.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Represents a Discord voice region for guilds.\n */\nclass VoiceRegion {\n  constructor(data) {\n    /**\n     * The ID of the region\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * Name of the region\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * Whether the region is VIP-only\n     * @type {boolean}\n     */\n    this.vip = data.vip;\n\n    /**\n     * Whether the region is deprecated\n     * @type {boolean}\n     */\n    this.deprecated = data.deprecated;\n\n    /**\n     * Whether the region is optimal\n     * @type {boolean}\n     */\n    this.optimal = data.optimal;\n\n    /**\n     * Whether the region is custom\n     * @type {boolean}\n     */\n    this.custom = data.custom;\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\nmodule.exports = VoiceRegion;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/VoiceRegion.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/VoiceState.js":
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/VoiceState.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Base = __webpack_require__(/*! ./Base */ \"./node_modules/discord.js/src/structures/Base.js\");\nconst { Error, TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst { browser } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\n\n/**\n * Represents the voice state for a Guild Member.\n */\nclass VoiceState extends Base {\n  /**\n   * @param {Guild} guild The guild the voice state is part of\n   * @param {Object} data The data for the voice state\n   */\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n    this.guild = guild;\n    /**\n     * The ID of the member of this voice state\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * Whether this member is deafened server-wide\n     * @type {?boolean}\n     */\n    this.serverDeaf = data.deaf;\n    /**\n     * Whether this member is muted server-wide\n     * @type {?boolean}\n     */\n    this.serverMute = data.mute;\n    /**\n     * Whether this member is self-deafened\n     * @type {?boolean}\n     */\n    this.selfDeaf = data.self_deaf;\n    /**\n     * Whether this member is self-muted\n     * @type {?boolean}\n     */\n    this.selfMute = data.self_mute;\n    /**\n     * The session ID of this member's connection\n     * @type {?string}\n     */\n    this.sessionID = data.session_id;\n    /**\n     * Whether this member is streaming using \"Go Live\"\n     * @type {boolean}\n     */\n    this.streaming = data.self_stream || false;\n    /**\n     * The ID of the voice channel that this member is in\n     * @type {?Snowflake}\n     */\n    this.channelID = data.channel_id;\n    return this;\n  }\n\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.id) || null;\n  }\n\n  /**\n   * The channel that the member is connected to\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelID) || null;\n  }\n\n  /**\n   * If this is a voice state of the client user, then this will refer to the active VoiceConnection for this guild\n   * @type {?VoiceConnection}\n   * @readonly\n   */\n  get connection() {\n    if (browser || this.id !== this.client.user.id) return null;\n    return this.client.voice.connections.get(this.guild.id) || null;\n  }\n\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n\n  /**\n   * Whether this member is currently speaking. A boolean if the information is available (aka\n   * the bot is connected to any voice channel in the guild), otherwise this is null\n   * @type {?boolean}\n   * @readonly\n   */\n  get speaking() {\n    return this.channel && this.channel.connection ? Boolean(this.channel.connection._speaking.get(this.id)) : null;\n  }\n\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} mute Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute, reason) {\n    return this.member ? this.member.edit({ mute }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} deaf Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf, reason) {\n    return this.member ? this.member.edit({ deaf }, reason) : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Kicks the member from the voice channel.\n   * @param {string} [reason] Reason for kicking member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.setChannel(null, reason);\n  }\n\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {ChannelResolvable|null} [channel] Channel to move the member to, or `null` if you want to disconnect them\n   * from voice. Requires the `MOVE_MEMBERS` permission.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n  setChannel(channel, reason) {\n    return this.member\n      ? this.member.edit({ channel }, reason)\n      : Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Self-mutes/unmutes the bot for this voice state.\n   * @param {boolean} mute Whether or not the bot should be self-muted\n   * @returns {Promise<boolean>} true if the voice state was successfully updated, otherwise false\n   */\n  async setSelfMute(mute) {\n    if (this.id !== this.client.user.id) throw new Error('VOICE_STATE_NOT_OWN');\n    if (typeof mute !== 'boolean') throw new TypeError('VOICE_STATE_INVALID_TYPE', 'mute');\n    if (!this.connection) return false;\n    this.selfMute = mute;\n    await this.connection.sendVoiceStateUpdate();\n    return true;\n  }\n\n  /**\n   * Self-deafens/undeafens the bot for this voice state.\n   * @param {boolean} deaf Whether or not the bot should be self-deafened\n   * @returns {Promise<boolean>} true if the voice state was successfully updated, otherwise false\n   */\n  async setSelfDeaf(deaf) {\n    if (this.id !== this.client.user.id) return new Error('VOICE_STATE_NOT_OWN');\n    if (typeof deaf !== 'boolean') return new TypeError('VOICE_STATE_INVALID_TYPE', 'deaf');\n    if (!this.connection) return false;\n    this.selfDeaf = deaf;\n    await this.connection.sendVoiceStateUpdate();\n    return true;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionID: true,\n      channelID: 'channel',\n    });\n  }\n}\n\nmodule.exports = VoiceState;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/VoiceState.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/Webhook.js":
/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Webhook.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst APIMessage = __webpack_require__(/*! ./APIMessage */ \"./node_modules/discord.js/src/structures/APIMessage.js\");\nconst Channel = __webpack_require__(/*! ./Channel */ \"./node_modules/discord.js/src/structures/Channel.js\");\nconst { WebhookTypes } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst DataResolver = __webpack_require__(/*! ../util/DataResolver */ \"./node_modules/discord.js/src/util/DataResolver.js\");\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\n\n/**\n * Represents a webhook.\n */\nclass Webhook {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the webhook\n     * @name Webhook#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The name of the webhook\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The token for the webhook\n     * @name Webhook#token\n     * @type {?string}\n     */\n    Object.defineProperty(this, 'token', { value: data.token || null, writable: true, configurable: true });\n\n    /**\n     * The avatar for the webhook\n     * @type {?string}\n     */\n    this.avatar = data.avatar;\n\n    /**\n     * The ID of the webhook\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of the webhook\n     * @type {WebhookTypes}\n     */\n    this.type = WebhookTypes[data.type];\n\n    /**\n     * The guild the webhook belongs to\n     * @type {Snowflake}\n     */\n    this.guildID = data.guild_id;\n\n    /**\n     * The channel the webhook belongs to\n     * @type {Snowflake}\n     */\n    this.channelID = data.channel_id;\n\n    if (data.user) {\n      /**\n       * The owner of the webhook\n       * @type {?User|Object}\n       */\n      this.owner = this.client.users ? this.client.users.cache.get(data.user.id) : data.user;\n    } else {\n      this.owner = null;\n    }\n  }\n\n  /**\n   * Options that can be passed into send.\n   * @typedef {Object} WebhookMessageOptions\n   * @property {string} [username=this.name] Username override for the message\n   * @property {string} [avatarURL] Avatar URL override for the message\n   * @property {boolean} [tts=false] Whether or not the message should be spoken aloud\n   * @property {string} [nonce=''] The nonce for the message\n   * @property {Object[]} [embeds] An array of embeds for the message\n   * @property {MessageMentionOptions} [allowedMentions] Which mentions should be parsed from the message content\n   * (see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)\n   * @property {DisableMentionType} [disableMentions=this.client.options.disableMentions] Whether or not all mentions or\n   * everyone/here mentions should be sanitized to prevent unexpected mentions\n   * @property {FileOptions[]|string[]} [files] Files to send with the message\n   * @property {string|boolean} [code] Language for optional codeblock formatting to apply\n   * @property {boolean|SplitOptions} [split=false] Whether or not the message should be split into multiple messages if\n   * it exceeds the character limit. If an object is provided, these are the options for splitting the message.\n   */\n\n  /**\n   * Sends a message with this webhook.\n   * @param {StringResolvable|APIMessage} [content=''] The content to send\n   * @param {WebhookMessageOptions|MessageAdditions} [options={}] The options to provide\n   * @returns {Promise<Message|Object>}\n   * @example\n   * // Send a basic message\n   * webhook.send('hello!')\n   *   .then(message => console.log(`Sent message: ${message.content}`))\n   *   .catch(console.error);\n   * @example\n   * // Send a remote file\n   * webhook.send({\n   *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send a local file\n   * webhook.send({\n   *   files: [{\n   *     attachment: 'entire/path/to/file.jpg',\n   *     name: 'file.jpg'\n   *   }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send an embed with a local image inside\n   * webhook.send('This is an embed', {\n   *   embeds: [{\n   *     thumbnail: {\n   *          url: 'attachment://file.jpg'\n   *       }\n   *    }],\n   *    files: [{\n   *       attachment: 'entire/path/to/file.jpg',\n   *       name: 'file.jpg'\n   *    }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async send(content, options) {\n    let apiMessage;\n\n    if (content instanceof APIMessage) {\n      apiMessage = content.resolveData();\n    } else {\n      apiMessage = APIMessage.create(this, content, options).resolveData();\n      if (Array.isArray(apiMessage.data.content)) {\n        return Promise.all(apiMessage.split().map(this.send.bind(this)));\n      }\n    }\n\n    const { data, files } = await apiMessage.resolveFiles();\n    return this.client.api\n      .webhooks(this.id, this.token)\n      .post({\n        data,\n        files,\n        query: { wait: true },\n        auth: false,\n      })\n      .then(d => {\n        const channel = this.client.channels ? this.client.channels.cache.get(d.channel_id) : undefined;\n        if (!channel) return d;\n        return channel.messages.add(d, false);\n      });\n  }\n\n  /**\n   * Sends a raw slack message with this webhook.\n   * @param {Object} body The raw body to send\n   * @returns {Promise<boolean>}\n   * @example\n   * // Send a slack message\n   * webhook.sendSlackMessage({\n   *   'username': 'Wumpus',\n   *   'attachments': [{\n   *     'pretext': 'this looks pretty cool',\n   *     'color': '#F0F',\n   *     'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n   *     'footer': 'Powered by sneks',\n   *     'ts': Date.now() / 1000\n   *   }]\n   * }).catch(console.error);\n   */\n  sendSlackMessage(body) {\n    return this.client.api\n      .webhooks(this.id, this.token)\n      .slack.post({\n        query: { wait: true },\n        auth: false,\n        data: body,\n      })\n      .then(data => data.toString() === 'ok');\n  }\n\n  /**\n   * Edits the webhook.\n   * @param {Object} options Options\n   * @param {string} [options.name=this.name] New name for this webhook\n   * @param {BufferResolvable} [options.avatar] New avatar for this webhook\n   * @param {ChannelResolvable} [options.channel] New channel for this webhook\n   * @param {string} [reason] Reason for editing this webhook\n   * @returns {Promise<Webhook>}\n   */\n  async edit({ name = this.name, avatar, channel }, reason) {\n    if (avatar && typeof avatar === 'string' && !avatar.startsWith('data:')) {\n      avatar = await DataResolver.resolveImage(avatar);\n    }\n    if (channel) channel = channel instanceof Channel ? channel.id : channel;\n    const data = await this.client.api.webhooks(this.id, channel ? undefined : this.token).patch({\n      data: { name, avatar, channel_id: channel },\n      reason,\n    });\n\n    this.name = data.name;\n    this.avatar = data.avatar;\n    this.channelID = data.channel_id;\n    return this;\n  }\n\n  /**\n   * Deletes the webhook.\n   * @param {string} [reason] Reason for deleting this webhook\n   * @returns {Promise}\n   */\n  delete(reason) {\n    return this.client.api.webhooks(this.id, this.token).delete({ reason });\n  }\n  /**\n   * The timestamp the webhook was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the webhook was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The url of this webhook\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.client.options.http.api + this.client.api.webhooks(this.id, this.token);\n  }\n\n  /**\n   * A link to the webhook's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  avatarURL({ format, size } = {}) {\n    if (!this.avatar) return null;\n    return this.client.rest.cdn.Avatar(this.id, this.avatar, format, size);\n  }\n\n  static applyToClass(structure) {\n    for (const prop of ['send', 'sendSlackMessage', 'edit', 'delete', 'createdTimestamp', 'createdAt', 'url']) {\n      Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(Webhook.prototype, prop));\n    }\n  }\n}\n\nmodule.exports = Webhook;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/Webhook.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/interfaces/Collector.js":
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/interfaces/Collector.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst Collection = __webpack_require__(/*! ../../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst Util = __webpack_require__(/*! ../../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * Filter to be applied to the collector.\n * @typedef {Function} CollectorFilter\n * @param {...*} args Any arguments received by the listener\n * @param {Collection} collection The items collected by this collector\n * @returns {boolean}\n */\n\n/**\n * Options to be applied to the collector.\n * @typedef {Object} CollectorOptions\n * @property {number} [time] How long to run the collector for in milliseconds\n * @property {number} [idle] How long to stop the collector after inactivity in milliseconds\n * @property {boolean} [dispose=false] Whether to dispose data when it's deleted\n */\n\n/**\n * Abstract class for defining a new Collector.\n * @abstract\n */\nclass Collector extends EventEmitter {\n  constructor(client, filter, options = {}) {\n    super();\n\n    /**\n     * The client that instantiated this Collector\n     * @name Collector#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The filter applied to this collector\n     * @type {CollectorFilter}\n     */\n    this.filter = filter;\n\n    /**\n     * The options of this collector\n     * @type {CollectorOptions}\n     */\n    this.options = options;\n\n    /**\n     * The items collected by this collector\n     * @type {Collection}\n     */\n    this.collected = new Collection();\n\n    /**\n     * Whether this collector has finished collecting\n     * @type {boolean}\n     */\n    this.ended = false;\n\n    /**\n     * Timeout for cleanup\n     * @type {?Timeout}\n     * @private\n     */\n    this._timeout = null;\n\n    /**\n     * Timeout for cleanup due to inactivity\n     * @type {?Timeout}\n     * @private\n     */\n    this._idletimeout = null;\n\n    this.handleCollect = this.handleCollect.bind(this);\n    this.handleDispose = this.handleDispose.bind(this);\n\n    if (options.time) this._timeout = this.client.setTimeout(() => this.stop('time'), options.time);\n    if (options.idle) this._idletimeout = this.client.setTimeout(() => this.stop('idle'), options.idle);\n  }\n\n  /**\n   * Call this to handle an event as a collectable element. Accepts any event data as parameters.\n   * @param {...*} args The arguments emitted by the listener\n   * @emits Collector#collect\n   */\n  handleCollect(...args) {\n    const collect = this.collect(...args);\n\n    if (collect && this.filter(...args, this.collected)) {\n      this.collected.set(collect, args[0]);\n\n      /**\n       * Emitted whenever an element is collected.\n       * @event Collector#collect\n       * @param {...*} args The arguments emitted by the listener\n       */\n      this.emit('collect', ...args);\n\n      if (this._idletimeout) {\n        this.client.clearTimeout(this._idletimeout);\n        this._idletimeout = this.client.setTimeout(() => this.stop('idle'), this.options.idle);\n      }\n    }\n    this.checkEnd();\n  }\n\n  /**\n   * Call this to remove an element from the collection. Accepts any event data as parameters.\n   * @param {...*} args The arguments emitted by the listener\n   * @emits Collector#dispose\n   */\n  handleDispose(...args) {\n    if (!this.options.dispose) return;\n\n    const dispose = this.dispose(...args);\n    if (!dispose || !this.filter(...args) || !this.collected.has(dispose)) return;\n    this.collected.delete(dispose);\n\n    /**\n     * Emitted whenever an element is disposed of.\n     * @event Collector#dispose\n     * @param {...*} args The arguments emitted by the listener\n     */\n    this.emit('dispose', ...args);\n    this.checkEnd();\n  }\n\n  /**\n   * Returns a promise that resolves with the next collected element;\n   * rejects with collected elements if the collector finishes without receiving a next element\n   * @type {Promise}\n   * @readonly\n   */\n  get next() {\n    return new Promise((resolve, reject) => {\n      if (this.ended) {\n        reject(this.collected);\n        return;\n      }\n\n      const cleanup = () => {\n        this.removeListener('collect', onCollect);\n        this.removeListener('end', onEnd);\n      };\n\n      const onCollect = item => {\n        cleanup();\n        resolve(item);\n      };\n\n      const onEnd = () => {\n        cleanup();\n        reject(this.collected); // eslint-disable-line prefer-promise-reject-errors\n      };\n\n      this.on('collect', onCollect);\n      this.on('end', onEnd);\n    });\n  }\n\n  /**\n   * Stops this collector and emits the `end` event.\n   * @param {string} [reason='user'] The reason this collector is ending\n   * @emits Collector#end\n   */\n  stop(reason = 'user') {\n    if (this.ended) return;\n\n    if (this._timeout) {\n      this.client.clearTimeout(this._timeout);\n      this._timeout = null;\n    }\n    if (this._idletimeout) {\n      this.client.clearTimeout(this._idletimeout);\n      this._idletimeout = null;\n    }\n    this.ended = true;\n\n    /**\n     * Emitted when the collector is finished collecting.\n     * @event Collector#end\n     * @param {Collection} collected The elements collected by the collector\n     * @param {string} reason The reason the collector ended\n     */\n    this.emit('end', this.collected, reason);\n  }\n\n  /**\n   * Resets the collectors timeout and idle timer.\n   * @param {Object} [options] Options\n   * @param {number} [options.time] How long to run the collector for in milliseconds\n   * @param {number} [options.idle] How long to stop the collector after inactivity in milliseconds\n   */\n  resetTimer({ time, idle } = {}) {\n    if (this._timeout) {\n      this.client.clearTimeout(this._timeout);\n      this._timeout = this.client.setTimeout(() => this.stop('time'), time || this.options.time);\n    }\n    if (this._idletimeout) {\n      this.client.clearTimeout(this._idletimeout);\n      this._idletimeout = this.client.setTimeout(() => this.stop('idle'), idle || this.options.idle);\n    }\n  }\n\n  /**\n   * Checks whether the collector should end, and if so, ends it.\n   */\n  checkEnd() {\n    const reason = this.endReason();\n    if (reason) this.stop(reason);\n  }\n\n  /**\n   * Allows collectors to be consumed with for-await-of loops\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of}\n   */\n  async *[Symbol.asyncIterator]() {\n    const queue = [];\n    const onCollect = item => queue.push(item);\n    this.on('collect', onCollect);\n\n    try {\n      while (queue.length || !this.ended) {\n        if (queue.length) {\n          yield queue.shift();\n        } else {\n          // eslint-disable-next-line no-await-in-loop\n          await new Promise(resolve => {\n            const tick = () => {\n              this.removeListener('collect', tick);\n              this.removeListener('end', tick);\n              return resolve();\n            };\n            this.on('collect', tick);\n            this.on('end', tick);\n          });\n        }\n      }\n    } finally {\n      this.removeListener('collect', onCollect);\n    }\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n  /* eslint-disable no-empty-function, valid-jsdoc */\n  /**\n   * Handles incoming events from the `handleCollect` function. Returns null if the event should not\n   * be collected, or returns an object describing the data that should be stored.\n   * @see Collector#handleCollect\n   * @param {...*} args Any args the event listener emits\n   * @returns {?{key, value}} Data to insert into collection, if any\n   * @abstract\n   */\n  collect() {}\n\n  /**\n   * Handles incoming events from the `handleDispose`. Returns null if the event should not\n   * be disposed, or returns the key that should be removed.\n   * @see Collector#handleDispose\n   * @param {...*} args Any args the event listener emits\n   * @returns {?*} Key to remove from the collection, if any\n   * @abstract\n   */\n  dispose() {}\n\n  /**\n   * The reason this collector has ended or will end with.\n   * @returns {?string} Reason to end the collector, if any\n   * @abstract\n   */\n  endReason() {}\n  /* eslint-enable no-empty-function, valid-jsdoc */\n}\n\nmodule.exports = Collector;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/interfaces/Collector.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* eslint-disable import/order */\nconst MessageCollector = __webpack_require__(/*! ../MessageCollector */ \"./node_modules/discord.js/src/structures/MessageCollector.js\");\nconst APIMessage = __webpack_require__(/*! ../APIMessage */ \"./node_modules/discord.js/src/structures/APIMessage.js\");\nconst Snowflake = __webpack_require__(/*! ../../util/Snowflake */ \"./node_modules/discord.js/src/util/Snowflake.js\");\nconst Collection = __webpack_require__(/*! ../../util/Collection */ \"./node_modules/discord.js/src/util/Collection.js\");\nconst { RangeError, TypeError } = __webpack_require__(/*! ../../errors */ \"./node_modules/discord.js/src/errors/index.js\");\n\n/**\n * Interface for classes that have text-channel-like features.\n * @interface\n */\nclass TextBasedChannel {\n  constructor() {\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n    this.messages = new MessageManager(this);\n\n    /**\n     * The ID of the last message in the channel, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = null;\n\n    /**\n     * The timestamp when the last pinned message was pinned, if there was one\n     * @type {?number}\n     */\n    this.lastPinTimestamp = null;\n  }\n\n  /**\n   * The Message object of the last message in the channel, if one was sent\n   * @type {?Message}\n   * @readonly\n   */\n  get lastMessage() {\n    return this.messages.cache.get(this.lastMessageID) || null;\n  }\n\n  /**\n   * The date when the last pinned message was pinned, if there was one\n   * @type {?Date}\n   * @readonly\n   */\n  get lastPinAt() {\n    return this.lastPinTimestamp ? new Date(this.lastPinTimestamp) : null;\n  }\n\n  /**\n   * Options provided when sending or editing a message.\n   * @typedef {Object} MessageOptions\n   * @property {boolean} [tts=false] Whether or not the message should be spoken aloud\n   * @property {string} [nonce=''] The nonce for the message\n   * @property {string} [content=''] The content for the message\n   * @property {MessageEmbed|Object} [embed] An embed for the message\n   * (see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)\n   * @property {MessageMentionOptions} [allowedMentions] Which mentions should be parsed from the message content\n   * @property {DisableMentionType} [disableMentions=this.client.options.disableMentions] Whether or not all mentions or\n   * everyone/here mentions should be sanitized to prevent unexpected mentions\n   * @property {FileOptions[]|BufferResolvable[]} [files] Files to send with the message\n   * @property {string|boolean} [code] Language for optional codeblock formatting to apply\n   * @property {boolean|SplitOptions} [split=false] Whether or not the message should be split into multiple messages if\n   * it exceeds the character limit. If an object is provided, these are the options for splitting the message\n   * @property {UserResolvable} [reply] User to reply to (prefixes the message with a mention, except in DMs)\n   */\n\n  /**\n   * Options provided to control parsing of mentions by Discord\n   * @typedef {Object} MessageMentionOptions\n   * @property {MessageMentionTypes[]} [parse] Types of mentions to be parsed\n   * @property {Snowflake[]} [users] Snowflakes of Users to be parsed as mentions\n   * @property {Snowflake[]} [roles] Snowflakes of Roles to be parsed as mentions\n   */\n\n  /**\n   * Types of mentions to enable in MessageMentionOptions.\n   * - `roles`\n   * - `users`\n   * - `everyone`\n   * @typedef {string} MessageMentionTypes\n   */\n\n  /**\n   * The type of mentions to disable.\n   * - `none`\n   * - `all`\n   * - `everyone`\n   * @typedef {string} DisableMentionType\n   */\n\n  /**\n   * @typedef {Object} FileOptions\n   * @property {BufferResolvable} attachment File to attach\n   * @property {string} [name='file.jpg'] Filename of the attachment\n   */\n\n  /**\n   * Options for splitting a message.\n   * @typedef {Object} SplitOptions\n   * @property {number} [maxLength=2000] Maximum character length per message piece\n   * @property {string} [char='\\n'] Character to split the message with\n   * @property {string} [prepend=''] Text to prepend to every piece except the first\n   * @property {string} [append=''] Text to append to every piece except the last\n   */\n\n  /**\n   * Sends a message to this channel.\n   * @param {StringResolvable|APIMessage} [content=''] The content to send\n   * @param {MessageOptions|MessageAdditions} [options={}] The options to provide\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // Send a basic message\n   * channel.send('hello!')\n   *   .then(message => console.log(`Sent message: ${message.content}`))\n   *   .catch(console.error);\n   * @example\n   * // Send a remote file\n   * channel.send({\n   *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send a local file\n   * channel.send({\n   *   files: [{\n   *     attachment: 'entire/path/to/file.jpg',\n   *     name: 'file.jpg'\n   *   }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send an embed with a local image inside\n   * channel.send('This is an embed', {\n   *   embed: {\n   *     thumbnail: {\n   *          url: 'attachment://file.jpg'\n   *       }\n   *    },\n   *    files: [{\n   *       attachment: 'entire/path/to/file.jpg',\n   *       name: 'file.jpg'\n   *    }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async send(content, options) {\n    const User = __webpack_require__(/*! ../User */ \"./node_modules/discord.js/src/structures/User.js\");\n    const GuildMember = __webpack_require__(/*! ../GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\");\n\n    if (this instanceof User || this instanceof GuildMember) {\n      return this.createDM().then(dm => dm.send(content, options));\n    }\n\n    let apiMessage;\n\n    if (content instanceof APIMessage) {\n      apiMessage = content.resolveData();\n    } else {\n      apiMessage = APIMessage.create(this, content, options).resolveData();\n      if (Array.isArray(apiMessage.data.content)) {\n        return Promise.all(apiMessage.split().map(this.send.bind(this)));\n      }\n    }\n\n    const { data, files } = await apiMessage.resolveFiles();\n    return this.client.api.channels[this.id].messages\n      .post({ data, files })\n      .then(d => this.client.actions.MessageCreate.handle(d).message);\n  }\n\n  /**\n   * Starts a typing indicator in the channel.\n   * @param {number} [count=1] The number of times startTyping should be considered to have been called\n   * @returns {Promise} Resolves once the bot stops typing gracefully, or rejects when an error occurs\n   * @example\n   * // Start typing in a channel, or increase the typing count by one\n   * channel.startTyping();\n   * @example\n   * // Start typing in a channel with a typing count of five, or set it to five\n   * channel.startTyping(5);\n   */\n  startTyping(count) {\n    if (typeof count !== 'undefined' && count < 1) throw new RangeError('TYPING_COUNT');\n    if (this.client.user._typing.has(this.id)) {\n      const entry = this.client.user._typing.get(this.id);\n      entry.count = count || entry.count + 1;\n      return entry.promise;\n    }\n\n    const entry = {};\n    entry.promise = new Promise((resolve, reject) => {\n      const endpoint = this.client.api.channels[this.id].typing;\n      Object.assign(entry, {\n        count: count || 1,\n        interval: this.client.setInterval(() => {\n          endpoint.post().catch(error => {\n            this.client.clearInterval(entry.interval);\n            this.client.user._typing.delete(this.id);\n            reject(error);\n          });\n        }, 9000),\n        resolve,\n      });\n      endpoint.post().catch(error => {\n        this.client.clearInterval(entry.interval);\n        this.client.user._typing.delete(this.id);\n        reject(error);\n      });\n      this.client.user._typing.set(this.id, entry);\n    });\n    return entry.promise;\n  }\n\n  /**\n   * Stops the typing indicator in the channel.\n   * The indicator will only stop if this is called as many times as startTyping().\n   * <info>It can take a few seconds for the client user to stop typing.</info>\n   * @param {boolean} [force=false] Whether or not to reset the call count and force the indicator to stop\n   * @example\n   * // Reduce the typing count by one and stop typing if it reached 0\n   * channel.stopTyping();\n   * @example\n   * // Force typing to fully stop regardless of typing count\n   * channel.stopTyping(true);\n   */\n  stopTyping(force = false) {\n    if (this.client.user._typing.has(this.id)) {\n      const entry = this.client.user._typing.get(this.id);\n      entry.count--;\n      if (entry.count <= 0 || force) {\n        this.client.clearInterval(entry.interval);\n        this.client.user._typing.delete(this.id);\n        entry.resolve();\n      }\n    }\n  }\n\n  /**\n   * Whether or not the typing indicator is being shown in the channel\n   * @type {boolean}\n   * @readonly\n   */\n  get typing() {\n    return this.client.user._typing.has(this.id);\n  }\n\n  /**\n   * Number of times `startTyping` has been called\n   * @type {number}\n   * @readonly\n   */\n  get typingCount() {\n    if (this.client.user._typing.has(this.id)) return this.client.user._typing.get(this.id).count;\n    return 0;\n  }\n\n  /**\n   * Creates a Message Collector.\n   * @param {CollectorFilter} filter The filter to create the collector with\n   * @param {MessageCollectorOptions} [options={}] The options to pass to the collector\n   * @returns {MessageCollector}\n   * @example\n   * // Create a message collector\n   * const filter = m => m.content.includes('discord');\n   * const collector = channel.createMessageCollector(filter, { time: 15000 });\n   * collector.on('collect', m => console.log(`Collected ${m.content}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createMessageCollector(filter, options = {}) {\n    return new MessageCollector(this, filter, options);\n  }\n\n  /**\n   * An object containing the same properties as CollectorOptions, but a few more:\n   * @typedef {MessageCollectorOptions} AwaitMessagesOptions\n   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject\n   */\n\n  /**\n   * Similar to createMessageCollector but in promise form.\n   * Resolves with a collection of messages that pass the specified filter.\n   * @param {CollectorFilter} filter The filter function to use\n   * @param {AwaitMessagesOptions} [options={}] Optional options to pass to the internal collector\n   * @returns {Promise<Collection<Snowflake, Message>>}\n   * @example\n   * // Await !vote messages\n   * const filter = m => m.content.startsWith('!vote');\n   * // Errors: ['time'] treats ending because of the time limit as an error\n   * channel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n   *   .then(collected => console.log(collected.size))\n   *   .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));\n   */\n  awaitMessages(filter, options = {}) {\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageCollector(filter, options);\n      collector.once('end', (collection, reason) => {\n        if (options.errors && options.errors.includes(reason)) {\n          reject(collection);\n        } else {\n          resolve(collection);\n        }\n      });\n    });\n  }\n\n  /**\n   * Bulk deletes given messages that are newer than two weeks.\n   * @param {Collection<Snowflake, Message>|Message[]|Snowflake[]|number} messages\n   * Messages or number of messages to delete\n   * @param {boolean} [filterOld=false] Filter messages to remove those which are older than two weeks automatically\n   * @returns {Promise<Collection<Snowflake, Message>>} Deleted messages\n   * @example\n   * // Bulk delete messages\n   * channel.bulkDelete(5)\n   *   .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n   *   .catch(console.error);\n   */\n  async bulkDelete(messages, filterOld = false) {\n    if (Array.isArray(messages) || messages instanceof Collection) {\n      let messageIDs = messages instanceof Collection ? messages.keyArray() : messages.map(m => m.id || m);\n      if (filterOld) {\n        messageIDs = messageIDs.filter(id => Date.now() - Snowflake.deconstruct(id).date.getTime() < 1209600000);\n      }\n      if (messageIDs.length === 0) return new Collection();\n      if (messageIDs.length === 1) {\n        await this.client.api\n          .channels(this.id)\n          .messages(messageIDs[0])\n          .delete();\n        const message = this.client.actions.MessageDelete.getMessage(\n          {\n            message_id: messageIDs[0],\n          },\n          this,\n        );\n        return message ? new Collection([[message.id, message]]) : new Collection();\n      }\n      await this.client.api.channels[this.id].messages['bulk-delete'].post({ data: { messages: messageIDs } });\n      return messageIDs.reduce(\n        (col, id) =>\n          col.set(\n            id,\n            this.client.actions.MessageDeleteBulk.getMessage(\n              {\n                message_id: id,\n              },\n              this,\n            ),\n          ),\n        new Collection(),\n      );\n    }\n    if (!isNaN(messages)) {\n      const msgs = await this.messages.fetch({ limit: messages });\n      return this.bulkDelete(msgs, filterOld);\n    }\n    throw new TypeError('MESSAGE_BULK_DELETE_TYPE');\n  }\n\n  static applyToClass(structure, full = false, ignore = []) {\n    const props = ['send'];\n    if (full) {\n      props.push(\n        'lastMessage',\n        'lastPinAt',\n        'bulkDelete',\n        'startTyping',\n        'stopTyping',\n        'typing',\n        'typingCount',\n        'createMessageCollector',\n        'awaitMessages',\n      );\n    }\n    for (const prop of props) {\n      if (ignore.includes(prop)) continue;\n      Object.defineProperty(\n        structure.prototype,\n        prop,\n        Object.getOwnPropertyDescriptor(TextBasedChannel.prototype, prop),\n      );\n    }\n  }\n}\n\nmodule.exports = TextBasedChannel;\n\n// Fixes Circular\nconst MessageManager = __webpack_require__(/*! ../../managers/MessageManager */ \"./node_modules/discord.js/src/managers/MessageManager.js\");\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/ActivityFlags.js":
/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/util/ActivityFlags.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BitField = __webpack_require__(/*! ./BitField */ \"./node_modules/discord.js/src/util/BitField.js\");\n\n/**\n * Data structure that makes it easy to interact with an {@link Activity#flags} bitfield.\n * @extends {BitField}\n */\nclass ActivityFlags extends BitField {}\n\n/**\n * @name ActivityFlags\n * @kind constructor\n * @memberof ActivityFlags\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Numeric activity flags. All available properties:\n * * `INSTANCE`\n * * `JOIN`\n * * `SPECTATE`\n * * `JOIN_REQUEST`\n * * `SYNC`\n * * `PLAY`\n * @type {Object}\n * @see {@link https://discordapp.com/developers/docs/topics/gateway#activity-object-activity-flags}\n */\nActivityFlags.FLAGS = {\n  INSTANCE: 1 << 0,\n  JOIN: 1 << 1,\n  SPECTATE: 1 << 2,\n  JOIN_REQUEST: 1 << 3,\n  SYNC: 1 << 4,\n  PLAY: 1 << 5,\n};\n\nmodule.exports = ActivityFlags;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/ActivityFlags.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/BitField.js":
/*!******************************************************!*\
  !*** ./node_modules/discord.js/src/util/BitField.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { RangeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\n\n/**\n * Data structure that makes it easy to interact with a bitfield.\n */\nclass BitField {\n  /**\n   * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n   */\n  constructor(bits) {\n    /**\n     * Bitfield of the packed bits\n     * @type {number}\n     */\n    this.bitfield = this.constructor.resolve(bits);\n  }\n\n  /**\n   * Checks whether the bitfield has a bit, or any of multiple bits.\n   * @param {BitFieldResolvable} bit Bit(s) to check for\n   * @returns {boolean}\n   */\n  any(bit) {\n    return (this.bitfield & this.constructor.resolve(bit)) !== 0;\n  }\n\n  /**\n   * Checks if this bitfield equals another\n   * @param {BitFieldResolvable} bit Bit(s) to check for\n   * @returns {boolean}\n   */\n  equals(bit) {\n    return this.bitfield === this.constructor.resolve(bit);\n  }\n\n  /**\n   * Checks whether the bitfield has a bit, or multiple bits.\n   * @param {BitFieldResolvable} bit Bit(s) to check for\n   * @returns {boolean}\n   */\n  has(bit) {\n    if (Array.isArray(bit)) return bit.every(p => this.has(p));\n    bit = this.constructor.resolve(bit);\n    return (this.bitfield & bit) === bit;\n  }\n\n  /**\n   * Gets all given bits that are missing from the bitfield.\n   * @param {BitFieldResolvable} bits Bit(s) to check for\n   * @param {...*} hasParams Additional parameters for the has method, if any\n   * @returns {string[]}\n   */\n  missing(bits, ...hasParams) {\n    if (!Array.isArray(bits)) bits = new this.constructor(bits).toArray(false);\n    return bits.filter(p => !this.has(p, ...hasParams));\n  }\n\n  /**\n   * Freezes these bits, making them immutable.\n   * @returns {Readonly<BitField>} These bits\n   */\n  freeze() {\n    return Object.freeze(this);\n  }\n\n  /**\n   * Adds bits to these ones.\n   * @param {...BitFieldResolvable} [bits] Bits to add\n   * @returns {BitField} These bits or new BitField if the instance is frozen.\n   */\n  add(...bits) {\n    let total = 0;\n    for (const bit of bits) {\n      total |= this.constructor.resolve(bit);\n    }\n    if (Object.isFrozen(this)) return new this.constructor(this.bitfield | total);\n    this.bitfield |= total;\n    return this;\n  }\n\n  /**\n   * Removes bits from these.\n   * @param {...BitFieldResolvable} [bits] Bits to remove\n   * @returns {BitField} These bits or new BitField if the instance is frozen.\n   */\n  remove(...bits) {\n    let total = 0;\n    for (const bit of bits) {\n      total |= this.constructor.resolve(bit);\n    }\n    if (Object.isFrozen(this)) return new this.constructor(this.bitfield & ~total);\n    this.bitfield &= ~total;\n    return this;\n  }\n\n  /**\n   * Gets an object mapping field names to a {@link boolean} indicating whether the\n   * bit is available.\n   * @param {...*} hasParams Additional parameters for the has method, if any\n   * @returns {Object}\n   */\n  serialize(...hasParams) {\n    const serialized = {};\n    for (const [flag, bit] of Object.entries(this.constructor.FLAGS)) serialized[flag] = this.has(bit, ...hasParams);\n    return serialized;\n  }\n\n  /**\n   * Gets an {@link Array} of bitfield names based on the bits available.\n   * @param {...*} hasParams Additional parameters for the has method, if any\n   * @returns {string[]}\n   */\n  toArray(...hasParams) {\n    return Object.keys(this.constructor.FLAGS).filter(bit => this.has(bit, ...hasParams));\n  }\n\n  toJSON() {\n    return this.bitfield;\n  }\n\n  valueOf() {\n    return this.bitfield;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.toArray();\n  }\n\n  /**\n   * Data that can be resolved to give a bitfield. This can be:\n   * * A string (see {@link BitField.FLAGS})\n   * * A bit number\n   * * An instance of BitField\n   * * An Array of BitFieldResolvable\n   * @typedef {string|number|BitField|BitFieldResolvable[]} BitFieldResolvable\n   */\n\n  /**\n   * Resolves bitfields to their numeric form.\n   * @param {BitFieldResolvable} [bit=0] - bit(s) to resolve\n   * @returns {number}\n   */\n  static resolve(bit = 0) {\n    if (typeof bit === 'number' && bit >= 0) return bit;\n    if (bit instanceof BitField) return bit.bitfield;\n    if (Array.isArray(bit)) return bit.map(p => this.resolve(p)).reduce((prev, p) => prev | p, 0);\n    if (typeof bit === 'string' && typeof this.FLAGS[bit] !== 'undefined') return this.FLAGS[bit];\n    throw new RangeError('BITFIELD_INVALID');\n  }\n}\n\n/**\n * Numeric bitfield flags.\n * <info>Defined in extension classes</info>\n * @type {Object}\n * @abstract\n */\nBitField.FLAGS = {};\n\nmodule.exports = BitField;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/BitField.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/Collection.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/util/Collection.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BaseCollection = __webpack_require__(/*! @discordjs/collection */ \"./node_modules/@discordjs/collection/dist/index.js\");\nconst Util = __webpack_require__(/*! ./Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\nclass Collection extends BaseCollection {\n  toJSON() {\n    return this.map(e => (typeof e.toJSON === 'function' ? e.toJSON() : Util.flatten(e)));\n  }\n}\n\nmodule.exports = Collection;\n\n/**\n * @external Collection\n * @see {@link https://discord.js.org/#/docs/collection/master/class/Collection}\n */\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/Collection.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/Constants.js":
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/util/Constants.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Package = (exports.Package = __webpack_require__(/*! ../../package.json */ \"./node_modules/discord.js/package.json\"));\nconst { Error, RangeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst browser = (exports.browser = typeof window !== 'undefined');\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {number|number[]|string} [shards] ID of the shard to run, or an array of shard IDs. If not specified,\n * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\n * recommended amount of shards from Discord and spawn that amount\n * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot\n * (e.g. recommended shard count, shard count of the ShardingManager)\n * @property {number} [messageCacheMaxSize=200] Maximum number of messages to cache per channel\n * (-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\n * indefinitely)\n * @property {number} [messageCacheLifetime=0] How long a message should stay in the cache until it is considered\n * sweepable (in seconds, 0 for forever)\n * @property {number} [messageSweepInterval=0] How frequently to remove messages from the cache that are older than\n * the message cache lifetime (in seconds, 0 for never)\n * @property {boolean} [fetchAllMembers=false] Whether to cache all guild members and users upon startup, as well as\n * upon joining a guild (should be avoided whenever possible)\n * @property {DisableMentionType} [disableMentions='none'] Default value for {@link MessageOptions#disableMentions}\n * @property {MessageMentionOptions} [allowedMentions] Default value for {@link MessageOptions#allowedMentions}\n * @property {PartialType[]} [partials] Structures allowed to be partial. This means events can be emitted even when\n * they're missing all the data for a particular structure. See the \"Partials\" topic listed in the sidebar for some\n * important usage information, as partials require you to put checks in place when handling data.\n * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their\n * corresponding websocket events\n * @property {number} [restTimeOffset=500] Extra time in millseconds to wait before continuing to make REST\n * requests (higher values will reduce rate-limiting errors on bad connections)\n * @property {number} [restRequestTimeout=15000] Time to wait before cancelling a REST request, in milliseconds\n * @property {number} [restSweepInterval=60] How frequently to delete inactive request buckets, in seconds\n * (or 0 for never)\n * @property {number} [retryLimit=1] How many times to retry on 5XX errors (Infinity for indefinite amount of retries)\n * @property {PresenceData} [presence] Presence data to use upon login\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {HTTPOptions} [http] HTTP options\n */\nexports.DefaultOptions = {\n  shardCount: 1,\n  messageCacheMaxSize: 200,\n  messageCacheLifetime: 0,\n  messageSweepInterval: 0,\n  fetchAllMembers: false,\n  disableMentions: 'none',\n  partials: [],\n  restWsBridgeTimeout: 5000,\n  restRequestTimeout: 15000,\n  retryLimit: 1,\n  restTimeOffset: 500,\n  restSweepInterval: 60,\n  presence: {},\n\n  /**\n   * WebSocket options (these are left as snake_case to match the API)\n   * @typedef {Object} WebsocketOptions\n   * @property {number} [large_threshold=250] Number of members in a guild to be considered large\n   * @property {IntentsResolvable} [intents] Intents to enable for this connection\n   */\n  ws: {\n    large_threshold: 250,\n    compress: false,\n    properties: {\n      $os: browser ? 'browser' : process.platform,\n      $browser: 'discord.js',\n      $device: 'discord.js',\n    },\n    version: 6,\n  },\n\n  /**\n   * HTTP options\n   * @typedef {Object} HTTPOptions\n   * @property {number} [version=7] API version to use\n   * @property {string} [api='https://discordapp.com/api'] Base url of the API\n   * @property {string} [cdn='https://cdn.discordapp.com'] Base url of the CDN\n   * @property {string} [invite='https://discord.gg'] Base url of invites\n   */\n  http: {\n    version: 7,\n    api: 'https://discordapp.com/api',\n    cdn: 'https://cdn.discordapp.com',\n    invite: 'https://discord.gg',\n  },\n};\n\nexports.UserAgent = browser\n  ? null\n  : `DiscordBot (${Package.homepage.split('#')[0]}, ${Package.version}) Node.js/${process.version}`;\n\nexports.WSCodes = {\n  1000: 'WS_CLOSE_REQUESTED',\n  4004: 'TOKEN_INVALID',\n  4010: 'SHARDING_INVALID',\n  4011: 'SHARDING_REQUIRED',\n  4013: 'INVALID_INTENTS',\n  4014: 'DISALLOWED_INTENTS',\n};\n\nconst AllowedImageFormats = ['webp', 'png', 'jpg', 'jpeg', 'gif'];\n\nconst AllowedImageSizes = Array.from({ length: 9 }, (e, i) => 2 ** (i + 4));\n\nfunction makeImageUrl(root, { format = 'webp', size } = {}) {\n  if (format && !AllowedImageFormats.includes(format)) throw new Error('IMAGE_FORMAT', format);\n  if (size && !AllowedImageSizes.includes(size)) throw new RangeError('IMAGE_SIZE', size);\n  return `${root}.${format}${size ? `?size=${size}` : ''}`;\n}\n/**\n * Options for Image URLs.\n * @typedef {Object} ImageURLOptions\n * @property {string} [format] One of `webp`, `png`, `jpg`, `jpeg`, `gif`. If no format is provided,\n * defaults to `webp`.\n * @property {boolean} [dynamic] If true, the format will dynamically change to `gif` for\n * animated avatars; the default is false.\n * @property {number} [size] One of `16`, `32`, `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`\n */\n\nexports.Endpoints = {\n  CDN(root) {\n    return {\n      Emoji: (emojiID, format = 'png') => `${root}/emojis/${emojiID}.${format}`,\n      Asset: name => `${root}/assets/${name}`,\n      DefaultAvatar: discriminator => `${root}/embed/avatars/${discriminator}.png`,\n      Avatar: (userID, hash, format = 'webp', size, dynamic = false) => {\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/avatars/${userID}/${hash}`, { format, size });\n      },\n      Banner: (guildID, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/banners/${guildID}/${hash}`, { format, size }),\n      Icon: (guildID, hash, format = 'webp', size, dynamic = false) => {\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/icons/${guildID}/${hash}`, { format, size });\n      },\n      AppIcon: (clientID, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/app-icons/${clientID}/${hash}`, { size, format }),\n      AppAsset: (clientID, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/app-assets/${clientID}/${hash}`, { size, format }),\n      GDMIcon: (channelID, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/channel-icons/${channelID}/${hash}`, { size, format }),\n      Splash: (guildID, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/splashes/${guildID}/${hash}`, { size, format }),\n      DiscoverySplash: (guildID, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/discovery-splashes/${guildID}/${hash}`, { size, format }),\n      TeamIcon: (teamID, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/team-icons/${teamID}/${hash}`, { size, format }),\n    };\n  },\n  invite: (root, code) => `${root}/${code}`,\n  botGateway: '/gateway/bot',\n};\n\n/**\n * The current status of the client. Here are the available statuses:\n * * READY: 0\n * * CONNECTING: 1\n * * RECONNECTING: 2\n * * IDLE: 3\n * * NEARLY: 4\n * * DISCONNECTED: 5\n * * WAITING_FOR_GUILDS: 6\n * * IDENTIFYING: 7\n * * RESUMING: 8\n * @typedef {number} Status\n */\nexports.Status = {\n  READY: 0,\n  CONNECTING: 1,\n  RECONNECTING: 2,\n  IDLE: 3,\n  NEARLY: 4,\n  DISCONNECTED: 5,\n  WAITING_FOR_GUILDS: 6,\n  IDENTIFYING: 7,\n  RESUMING: 8,\n};\n\n/**\n * The current status of a voice connection. Here are the available statuses:\n * * CONNECTED: 0\n * * CONNECTING: 1\n * * AUTHENTICATING: 2\n * * RECONNECTING: 3\n * * DISCONNECTED: 4\n * @typedef {number} VoiceStatus\n */\nexports.VoiceStatus = {\n  CONNECTED: 0,\n  CONNECTING: 1,\n  AUTHENTICATING: 2,\n  RECONNECTING: 3,\n  DISCONNECTED: 4,\n};\n\nexports.OPCodes = {\n  DISPATCH: 0,\n  HEARTBEAT: 1,\n  IDENTIFY: 2,\n  STATUS_UPDATE: 3,\n  VOICE_STATE_UPDATE: 4,\n  VOICE_GUILD_PING: 5,\n  RESUME: 6,\n  RECONNECT: 7,\n  REQUEST_GUILD_MEMBERS: 8,\n  INVALID_SESSION: 9,\n  HELLO: 10,\n  HEARTBEAT_ACK: 11,\n};\n\nexports.VoiceOPCodes = {\n  IDENTIFY: 0,\n  SELECT_PROTOCOL: 1,\n  READY: 2,\n  HEARTBEAT: 3,\n  SESSION_DESCRIPTION: 4,\n  SPEAKING: 5,\n  HELLO: 8,\n  CLIENT_CONNECT: 12,\n  CLIENT_DISCONNECT: 13,\n};\n\nexports.Events = {\n  RATE_LIMIT: 'rateLimit',\n  CLIENT_READY: 'ready',\n  GUILD_CREATE: 'guildCreate',\n  GUILD_DELETE: 'guildDelete',\n  GUILD_UPDATE: 'guildUpdate',\n  GUILD_UNAVAILABLE: 'guildUnavailable',\n  GUILD_AVAILABLE: 'guildAvailable',\n  GUILD_MEMBER_ADD: 'guildMemberAdd',\n  GUILD_MEMBER_REMOVE: 'guildMemberRemove',\n  GUILD_MEMBER_UPDATE: 'guildMemberUpdate',\n  GUILD_MEMBER_AVAILABLE: 'guildMemberAvailable',\n  GUILD_MEMBER_SPEAKING: 'guildMemberSpeaking',\n  GUILD_MEMBERS_CHUNK: 'guildMembersChunk',\n  GUILD_INTEGRATIONS_UPDATE: 'guildIntegrationsUpdate',\n  GUILD_ROLE_CREATE: 'roleCreate',\n  GUILD_ROLE_DELETE: 'roleDelete',\n  INVITE_CREATE: 'inviteCreate',\n  INVITE_DELETE: 'inviteDelete',\n  GUILD_ROLE_UPDATE: 'roleUpdate',\n  GUILD_EMOJI_CREATE: 'emojiCreate',\n  GUILD_EMOJI_DELETE: 'emojiDelete',\n  GUILD_EMOJI_UPDATE: 'emojiUpdate',\n  GUILD_BAN_ADD: 'guildBanAdd',\n  GUILD_BAN_REMOVE: 'guildBanRemove',\n  CHANNEL_CREATE: 'channelCreate',\n  CHANNEL_DELETE: 'channelDelete',\n  CHANNEL_UPDATE: 'channelUpdate',\n  CHANNEL_PINS_UPDATE: 'channelPinsUpdate',\n  MESSAGE_CREATE: 'message',\n  MESSAGE_DELETE: 'messageDelete',\n  MESSAGE_UPDATE: 'messageUpdate',\n  MESSAGE_BULK_DELETE: 'messageDeleteBulk',\n  MESSAGE_REACTION_ADD: 'messageReactionAdd',\n  MESSAGE_REACTION_REMOVE: 'messageReactionRemove',\n  MESSAGE_REACTION_REMOVE_ALL: 'messageReactionRemoveAll',\n  MESSAGE_REACTION_REMOVE_EMOJI: 'messageReactionRemoveEmoji',\n  USER_UPDATE: 'userUpdate',\n  PRESENCE_UPDATE: 'presenceUpdate',\n  VOICE_SERVER_UPDATE: 'voiceServerUpdate',\n  VOICE_STATE_UPDATE: 'voiceStateUpdate',\n  VOICE_BROADCAST_SUBSCRIBE: 'subscribe',\n  VOICE_BROADCAST_UNSUBSCRIBE: 'unsubscribe',\n  TYPING_START: 'typingStart',\n  TYPING_STOP: 'typingStop',\n  WEBHOOKS_UPDATE: 'webhookUpdate',\n  ERROR: 'error',\n  WARN: 'warn',\n  DEBUG: 'debug',\n  SHARD_DISCONNECT: 'shardDisconnect',\n  SHARD_ERROR: 'shardError',\n  SHARD_RECONNECTING: 'shardReconnecting',\n  SHARD_READY: 'shardReady',\n  SHARD_RESUME: 'shardResume',\n  INVALIDATED: 'invalidated',\n  RAW: 'raw',\n};\n\nexports.ShardEvents = {\n  CLOSE: 'close',\n  DESTROYED: 'destroyed',\n  INVALID_SESSION: 'invalidSession',\n  READY: 'ready',\n  RESUMED: 'resumed',\n  ALL_READY: 'allReady',\n};\n\n/**\n * The type of Structure allowed to be a partial:\n * * USER\n * * CHANNEL (only affects DMChannels)\n * * GUILD_MEMBER\n * * MESSAGE\n * * REACTION\n * <warn>Partials require you to put checks in place when handling data, read the Partials topic listed in the\n * sidebar for more information.</warn>\n * @typedef {string} PartialType\n */\nexports.PartialTypes = keyMirror(['USER', 'CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION']);\n\n/**\n * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n * * READY\n * * RESUMED\n * * GUILD_CREATE\n * * GUILD_DELETE\n * * GUILD_UPDATE\n * * INVITE_CREATE\n * * INVITE_DELETE\n * * GUILD_MEMBER_ADD\n * * GUILD_MEMBER_REMOVE\n * * GUILD_MEMBER_UPDATE\n * * GUILD_MEMBERS_CHUNK\n * * GUILD_INTEGRATIONS_UPDATE\n * * GUILD_ROLE_CREATE\n * * GUILD_ROLE_DELETE\n * * GUILD_ROLE_UPDATE\n * * GUILD_BAN_ADD\n * * GUILD_BAN_REMOVE\n * * GUILD_EMOJIS_UPDATE\n * * CHANNEL_CREATE\n * * CHANNEL_DELETE\n * * CHANNEL_UPDATE\n * * CHANNEL_PINS_UPDATE\n * * MESSAGE_CREATE\n * * MESSAGE_DELETE\n * * MESSAGE_UPDATE\n * * MESSAGE_DELETE_BULK\n * * MESSAGE_REACTION_ADD\n * * MESSAGE_REACTION_REMOVE\n * * MESSAGE_REACTION_REMOVE_ALL\n * * MESSAGE_REACTION_REMOVE_EMOJI\n * * USER_UPDATE\n * * PRESENCE_UPDATE\n * * TYPING_START\n * * VOICE_STATE_UPDATE\n * * VOICE_SERVER_UPDATE\n * * WEBHOOKS_UPDATE\n * @typedef {string} WSEventType\n */\nexports.WSEvents = keyMirror([\n  'READY',\n  'RESUMED',\n  'GUILD_CREATE',\n  'GUILD_DELETE',\n  'GUILD_UPDATE',\n  'INVITE_CREATE',\n  'INVITE_DELETE',\n  'GUILD_MEMBER_ADD',\n  'GUILD_MEMBER_REMOVE',\n  'GUILD_MEMBER_UPDATE',\n  'GUILD_MEMBERS_CHUNK',\n  'GUILD_INTEGRATIONS_UPDATE',\n  'GUILD_ROLE_CREATE',\n  'GUILD_ROLE_DELETE',\n  'GUILD_ROLE_UPDATE',\n  'GUILD_BAN_ADD',\n  'GUILD_BAN_REMOVE',\n  'GUILD_EMOJIS_UPDATE',\n  'CHANNEL_CREATE',\n  'CHANNEL_DELETE',\n  'CHANNEL_UPDATE',\n  'CHANNEL_PINS_UPDATE',\n  'MESSAGE_CREATE',\n  'MESSAGE_DELETE',\n  'MESSAGE_UPDATE',\n  'MESSAGE_DELETE_BULK',\n  'MESSAGE_REACTION_ADD',\n  'MESSAGE_REACTION_REMOVE',\n  'MESSAGE_REACTION_REMOVE_ALL',\n  'MESSAGE_REACTION_REMOVE_EMOJI',\n  'USER_UPDATE',\n  'PRESENCE_UPDATE',\n  'TYPING_START',\n  'VOICE_STATE_UPDATE',\n  'VOICE_SERVER_UPDATE',\n  'WEBHOOKS_UPDATE',\n]);\n\n/**\n * The type of a message, e.g. `DEFAULT`. Here are the available types:\n * * DEFAULT\n * * RECIPIENT_ADD\n * * RECIPIENT_REMOVE\n * * CALL\n * * CHANNEL_NAME_CHANGE\n * * CHANNEL_ICON_CHANGE\n * * PINS_ADD\n * * GUILD_MEMBER_JOIN\n * * USER_PREMIUM_GUILD_SUBSCRIPTION\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\n * * CHANNEL_FOLLOW_ADD\n * * GUILD_DISCOVERY_DISQUALIFIED\n * * GUILD_DISCOVERY_REQUALIFIED\n * @typedef {string} MessageType\n */\nexports.MessageTypes = [\n  'DEFAULT',\n  'RECIPIENT_ADD',\n  'RECIPIENT_REMOVE',\n  'CALL',\n  'CHANNEL_NAME_CHANGE',\n  'CHANNEL_ICON_CHANGE',\n  'PINS_ADD',\n  'GUILD_MEMBER_JOIN',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3',\n  'CHANNEL_FOLLOW_ADD',\n  // 13 isn't yet documented\n  null,\n  'GUILD_DISCOVERY_DISQUALIFIED',\n  'GUILD_DISCOVERY_REQUALIFIED',\n];\n\n/**\n * <info>Bots cannot set a `CUSTOM_STATUS`, it is only for custom statuses received from users</info>\n * The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n * * PLAYING\n * * STREAMING\n * * LISTENING\n * * WATCHING\n * * CUSTOM_STATUS\n * @typedef {string} ActivityType\n */\nexports.ActivityTypes = ['PLAYING', 'STREAMING', 'LISTENING', 'WATCHING', 'CUSTOM_STATUS'];\n\nexports.ChannelTypes = {\n  TEXT: 0,\n  DM: 1,\n  VOICE: 2,\n  GROUP: 3,\n  CATEGORY: 4,\n  NEWS: 5,\n  STORE: 6,\n};\n\nexports.ClientApplicationAssetTypes = {\n  SMALL: 1,\n  BIG: 2,\n};\n\nexports.Colors = {\n  DEFAULT: 0x000000,\n  WHITE: 0xffffff,\n  AQUA: 0x1abc9c,\n  GREEN: 0x2ecc71,\n  BLUE: 0x3498db,\n  YELLOW: 0xffff00,\n  PURPLE: 0x9b59b6,\n  LUMINOUS_VIVID_PINK: 0xe91e63,\n  GOLD: 0xf1c40f,\n  ORANGE: 0xe67e22,\n  RED: 0xe74c3c,\n  GREY: 0x95a5a6,\n  NAVY: 0x34495e,\n  DARK_AQUA: 0x11806a,\n  DARK_GREEN: 0x1f8b4c,\n  DARK_BLUE: 0x206694,\n  DARK_PURPLE: 0x71368a,\n  DARK_VIVID_PINK: 0xad1457,\n  DARK_GOLD: 0xc27c0e,\n  DARK_ORANGE: 0xa84300,\n  DARK_RED: 0x992d22,\n  DARK_GREY: 0x979c9f,\n  DARKER_GREY: 0x7f8c8d,\n  LIGHT_GREY: 0xbcc0c0,\n  DARK_NAVY: 0x2c3e50,\n  BLURPLE: 0x7289da,\n  GREYPLE: 0x99aab5,\n  DARK_BUT_NOT_BLACK: 0x2c2f33,\n  NOT_QUITE_BLACK: 0x23272a,\n};\n\n/**\n * The value set for the explicit content filter levels for a guild:\n * * DISABLED\n * * MEMBERS_WITHOUT_ROLES\n * * ALL_MEMBERS\n * @typedef {string} ExplicitContentFilterLevel\n */\nexports.ExplicitContentFilterLevels = ['DISABLED', 'MEMBERS_WITHOUT_ROLES', 'ALL_MEMBERS'];\n\n/**\n * The value set for the verification levels for a guild:\n * * NONE\n * * LOW\n * * MEDIUM\n * * HIGH\n * * VERY_HIGH\n * @typedef {string} VerificationLevel\n */\nexports.VerificationLevels = ['NONE', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH'];\n\n/**\n * An error encountered while performing an API request. Here are the potential errors:\n * * UNKNOWN_ACCOUNT\n * * UNKNOWN_APPLICATION\n * * UNKNOWN_CHANNEL\n * * UNKNOWN_GUILD\n * * UNKNOWN_INTEGRATION\n * * UNKNOWN_INVITE\n * * UNKNOWN_MEMBER\n * * UNKNOWN_MESSAGE\n * * UNKNOWN_OVERWRITE\n * * UNKNOWN_PROVIDER\n * * UNKNOWN_ROLE\n * * UNKNOWN_TOKEN\n * * UNKNOWN_USER\n * * UNKNOWN_EMOJI\n * * UNKNOWN_WEBHOOK\n * * BOT_PROHIBITED_ENDPOINT\n * * BOT_ONLY_ENDPOINT\n * * MAXIMUM_GUILDS\n * * MAXIMUM_FRIENDS\n * * MAXIMUM_PINS\n * * MAXIMUM_ROLES\n * * MAXIMUM_REACTIONS\n * * MAXIMUM_CHANNELS\n * * MAXIMUM_INVITES\n * * UNAUTHORIZED\n * * USER_BANNED\n * * MISSING_ACCESS\n * * INVALID_ACCOUNT_TYPE\n * * CANNOT_EXECUTE_ON_DM\n * * EMBED_DISABLED\n * * CANNOT_EDIT_MESSAGE_BY_OTHER\n * * CANNOT_SEND_EMPTY_MESSAGE\n * * CANNOT_MESSAGE_USER\n * * CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n * * CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n * * OAUTH2_APPLICATION_BOT_ABSENT\n * * MAXIMUM_OAUTH2_APPLICATIONS\n * * INVALID_OAUTH_STATE\n * * MISSING_PERMISSIONS\n * * INVALID_AUTHENTICATION_TOKEN\n * * NOTE_TOO_LONG\n * * INVALID_BULK_DELETE_QUANTITY\n * * CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n * * INVALID_OR_TAKEN_INVITE_CODE\n * * CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n * * INVALID_OAUTH_TOKEN\n * * BULK_DELETE_MESSAGE_TOO_OLD\n * * INVALID_FORM_BODY\n * * INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n * * INVALID_API_VERSION\n * * REACTION_BLOCKED\n * * RESOURCE_OVERLOADED\n * @typedef {string} APIError\n */\nexports.APIErrors = {\n  UNKNOWN_ACCOUNT: 10001,\n  UNKNOWN_APPLICATION: 10002,\n  UNKNOWN_CHANNEL: 10003,\n  UNKNOWN_GUILD: 10004,\n  UNKNOWN_INTEGRATION: 10005,\n  UNKNOWN_INVITE: 10006,\n  UNKNOWN_MEMBER: 10007,\n  UNKNOWN_MESSAGE: 10008,\n  UNKNOWN_OVERWRITE: 10009,\n  UNKNOWN_PROVIDER: 10010,\n  UNKNOWN_ROLE: 10011,\n  UNKNOWN_TOKEN: 10012,\n  UNKNOWN_USER: 10013,\n  UNKNOWN_EMOJI: 10014,\n  UNKNOWN_WEBHOOK: 10015,\n  BOT_PROHIBITED_ENDPOINT: 20001,\n  BOT_ONLY_ENDPOINT: 20002,\n  MAXIMUM_GUILDS: 30001,\n  MAXIMUM_FRIENDS: 30002,\n  MAXIMUM_PINS: 30003,\n  MAXIMUM_ROLES: 30005,\n  MAXIMUM_REACTIONS: 30010,\n  MAXIMUM_CHANNELS: 30013,\n  MAXIMUM_INVITES: 30016,\n  UNAUTHORIZED: 40001,\n  USER_BANNED: 40007,\n  MISSING_ACCESS: 50001,\n  INVALID_ACCOUNT_TYPE: 50002,\n  CANNOT_EXECUTE_ON_DM: 50003,\n  EMBED_DISABLED: 50004,\n  CANNOT_EDIT_MESSAGE_BY_OTHER: 50005,\n  CANNOT_SEND_EMPTY_MESSAGE: 50006,\n  CANNOT_MESSAGE_USER: 50007,\n  CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL: 50008,\n  CHANNEL_VERIFICATION_LEVEL_TOO_HIGH: 50009,\n  OAUTH2_APPLICATION_BOT_ABSENT: 50010,\n  MAXIMUM_OAUTH2_APPLICATIONS: 50011,\n  INVALID_OAUTH_STATE: 50012,\n  MISSING_PERMISSIONS: 50013,\n  INVALID_AUTHENTICATION_TOKEN: 50014,\n  NOTE_TOO_LONG: 50015,\n  INVALID_BULK_DELETE_QUANTITY: 50016,\n  CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL: 50019,\n  INVALID_OR_TAKEN_INVITE_CODE: 50020,\n  CANNOT_EXECUTE_ON_SYSTEM_MESSAGE: 50021,\n  INVALID_OAUTH_TOKEN: 50025,\n  BULK_DELETE_MESSAGE_TOO_OLD: 50034,\n  INVALID_FORM_BODY: 50035,\n  INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT: 50036,\n  INVALID_API_VERSION: 50041,\n  REACTION_BLOCKED: 90001,\n  RESOURCE_OVERLOADED: 130000,\n};\n\n/**\n * The value set for a guild's default message notifications, e.g. `ALL`. Here are the available types:\n * * ALL\n * * MENTIONS\n * @typedef {string} DefaultMessageNotifications\n */\nexports.DefaultMessageNotifications = ['ALL', 'MENTIONS'];\n\n/**\n * The value set for a team members's membership state:\n * * INVITED\n * * ACCEPTED\n * @typedef {string} MembershipStates\n */\nexports.MembershipStates = [\n  // They start at 1\n  null,\n  'INVITED',\n  'ACCEPTED',\n];\n\n/**\n * The value set for a webhook's type:\n * * Incoming\n * * Channel Follower\n * @typedef {string} WebhookTypes\n */\nexports.WebhookTypes = [\n  // They start at 1\n  null,\n  'Incoming',\n  'Channel Follower',\n];\n\nfunction keyMirror(arr) {\n  let tmp = Object.create(null);\n  for (const value of arr) tmp[value] = value;\n  return tmp;\n}\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/Constants.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/DataResolver.js":
/*!**********************************************************!*\
  !*** ./node_modules/discord.js/src/util/DataResolver.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst fetch = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/lib/index.mjs\");\nconst { Error: DiscordError, TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst { browser } = __webpack_require__(/*! ../util/Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\nclass DataResolver {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  static resolveInviteCode(data) {\n    const inviteRegex = /discord(?:app\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/i;\n    const match = inviteRegex.exec(data);\n    if (match && match[1]) return match[1];\n    return data;\n  }\n\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n  static async resolveImage(image) {\n    if (!image) return null;\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n    const file = await this.resolveFileAsBuffer(image);\n    return DataResolver.resolveBase64(file);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer or a Stream.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer|Stream>}\n   */\n  static async resolveFile(resource) {\n    if (!browser && Buffer.isBuffer(resource)) return resource;\n    if (browser && resource instanceof ArrayBuffer) return Util.convertToBuffer(resource);\n    if (resource instanceof stream.Readable) return resource;\n\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return browser ? res.blob() : res.body;\n      } else if (!browser) {\n        return new Promise((resolve, reject) => {\n          const file = path.resolve(resource);\n          fs.stat(file, (err, stats) => {\n            if (err) return reject(err);\n            if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));\n            return resolve(fs.createReadStream(file));\n          });\n        });\n      }\n    }\n\n    throw new TypeError('REQ_RESOURCE_TYPE');\n  }\n\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer>}\n   */\n  static async resolveFileAsBuffer(resource) {\n    const file = await this.resolveFile(resource);\n    if (Buffer.isBuffer(file)) return file;\n\n    const buffers = [];\n    for await (const data of file) buffers.push(data);\n    return Buffer.concat(buffers);\n  }\n}\n\nmodule.exports = DataResolver;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/DataResolver.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/Intents.js":
/*!*****************************************************!*\
  !*** ./node_modules/discord.js/src/util/Intents.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst BitField = __webpack_require__(/*! ./BitField */ \"./node_modules/discord.js/src/util/BitField.js\");\n\n/**\n * Data structure that makes it easy to calculate intents.\n * @extends {BitField}\n */\nclass Intents extends BitField {}\n\n/**\n * @name Intents\n * @kind constructor\n * @memberof Intents\n * @param {IntentsResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Data that can be resolved to give a permission number. This can be:\n * * A string (see {@link Intents.FLAGS})\n * * An intents flag\n * * An instance of Intents\n * * An array of IntentsResolvable\n * @typedef {string|number|Intents|IntentsResolvable[]} IntentsResolvable\n */\n\n/**\n * Numeric websocket intents. All available properties:\n * * `GUILDS`\n * * `GUILD_MEMBERS`\n * * `GUILD_BANS`\n * * `GUILD_EMOJIS`\n * * `GUILD_INTEGRATIONS`\n * * `GUILD_WEBHOOKS`\n * * `GUILD_INVITES`\n * * `GUILD_VOICE_STATES`\n * * `GUILD_PRESENCES`\n * * `GUILD_MESSAGES`\n * * `GUILD_MESSAGE_REACTIONS`\n * * `GUILD_MESSAGE_TYPING`\n * * `DIRECT_MESSAGES`\n * * `DIRECT_MESSAGE_REACTIONS`\n * * `DIRECT_MESSAGE_TYPING`\n * @type {Object}\n * @see {@link https://discordapp.com/developers/docs/topics/gateway#list-of-intents}\n */\nIntents.FLAGS = {\n  GUILDS: 1 << 0,\n  GUILD_MEMBERS: 1 << 1,\n  GUILD_BANS: 1 << 2,\n  GUILD_EMOJIS: 1 << 3,\n  GUILD_INTEGRATIONS: 1 << 4,\n  GUILD_WEBHOOKS: 1 << 5,\n  GUILD_INVITES: 1 << 6,\n  GUILD_VOICE_STATES: 1 << 7,\n  GUILD_PRESENCES: 1 << 8,\n  GUILD_MESSAGES: 1 << 9,\n  GUILD_MESSAGE_REACTIONS: 1 << 10,\n  GUILD_MESSAGE_TYPING: 1 << 11,\n  DIRECT_MESSAGES: 1 << 12,\n  DIRECT_MESSAGE_REACTIONS: 1 << 13,\n  DIRECT_MESSAGE_TYPING: 1 << 14,\n};\n\n/**\n * Bitfield representing all privileged intents\n * @type {number}\n * @see {@link https://discordapp.com/developers/docs/topics/gateway#privileged-intents}\n */\nIntents.PRIVILEGED = Intents.FLAGS.GUILD_MEMBERS | Intents.FLAGS.GUILD_PRESENCES;\n\n/**\n * Bitfield representing all intents combined\n * @type {number}\n */\nIntents.ALL = Object.values(Intents.FLAGS).reduce((acc, p) => acc | p, 0);\n\n/**\n * Bitfield representing all non-privileged intents\n * @type {number}\n */\nIntents.NON_PRIVILEGED = Intents.ALL & ~Intents.PRIVILEGED;\n\nmodule.exports = Intents;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/Intents.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/LimitedCollection.js":
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/util/LimitedCollection.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Collection = __webpack_require__(/*! ./Collection.js */ \"./node_modules/discord.js/src/util/Collection.js\");\n\n/**\n * A Collection which holds a max amount of entries. The first key is deleted if the Collection has\n * reached max size.\n * @extends {Collection}\n * @param {number} [maxSize=0] The maximum size of the Collection\n * @param {Iterable} [iterable=null] Optional entries passed to the Map constructor.\n * @private\n */\nclass LimitedCollection extends Collection {\n  constructor(maxSize = 0, iterable = null) {\n    super(iterable);\n    /**\n     * The max size of the Collection.\n     * @type {number}\n     */\n    this.maxSize = maxSize;\n  }\n\n  set(key, value) {\n    if (this.maxSize === 0) return this;\n    if (this.size >= this.maxSize && !this.has(key)) this.delete(this.firstKey());\n    return super.set(key, value);\n  }\n\n  static get [Symbol.species]() {\n    return Collection;\n  }\n}\n\nmodule.exports = LimitedCollection;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/LimitedCollection.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/MessageFlags.js":
/*!**********************************************************!*\
  !*** ./node_modules/discord.js/src/util/MessageFlags.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BitField = __webpack_require__(/*! ./BitField */ \"./node_modules/discord.js/src/util/BitField.js\");\n\n/**\n * Data structure that makes it easy to interact with an {@link Message#flags} bitfield.\n * @extends {BitField}\n */\nclass MessageFlags extends BitField {}\n\n/**\n * @name MessageFlags\n * @kind constructor\n * @memberof MessageFlags\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Numeric message flags. All available properties:\n * * `CROSSPOSTED`\n * * `IS_CROSSPOST`\n * * `SUPPRESS_EMBEDS`\n * * `SOURCE_MESSAGE_DELETED`\n * * `URGENT`\n * @type {Object}\n * @see {@link https://discordapp.com/developers/docs/resources/channel#message-object-message-flags}\n */\nMessageFlags.FLAGS = {\n  CROSSPOSTED: 1 << 0,\n  IS_CROSSPOST: 1 << 1,\n  SUPPRESS_EMBEDS: 1 << 2,\n  SOURCE_MESSAGE_DELETED: 1 << 3,\n  URGENT: 1 << 4,\n};\n\nmodule.exports = MessageFlags;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/MessageFlags.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/Permissions.js":
/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/util/Permissions.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BitField = __webpack_require__(/*! ./BitField */ \"./node_modules/discord.js/src/util/BitField.js\");\n\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n * @extends {BitField}\n */\nclass Permissions extends BitField {\n  /**\n   * @name Permissions\n   * @kind constructor\n   * @memberof Permissions\n   * @param {PermissionResolvable} [bits=0] Bit(s) to read from\n   */\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link Permissions.FLAGS})\n   * * A permission number\n   * * An instance of Permissions\n   * * An Array of PermissionResolvable\n   * @typedef {string|number|Permissions|PermissionResolvable[]} PermissionResolvable\n   */\n\n  /**\n   * Checks whether the bitfield has a permission, or any of multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  any(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR)) || super.any(permission);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  has(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR)) || super.has(permission);\n  }\n}\n\n/**\n * Numeric permission flags. All available properties:\n * * `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n * * `CREATE_INSTANT_INVITE` (create invitations to the guild)\n * * `KICK_MEMBERS`\n * * `BAN_MEMBERS`\n * * `MANAGE_CHANNELS` (edit and reorder channels)\n * * `MANAGE_GUILD` (edit the guild information, region, etc.)\n * * `ADD_REACTIONS` (add new reactions to messages)\n * * `VIEW_AUDIT_LOG`\n * * `PRIORITY_SPEAKER`\n * * `STREAM`\n * * `VIEW_CHANNEL`\n * * `SEND_MESSAGES`\n * * `SEND_TTS_MESSAGES`\n * * `MANAGE_MESSAGES` (delete messages and reactions)\n * * `EMBED_LINKS` (links posted will have a preview embedded)\n * * `ATTACH_FILES`\n * * `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n * * `MENTION_EVERYONE`\n * * `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n * * `VIEW_GUILD_INSIGHTS`\n * * `CONNECT` (connect to a voice channel)\n * * `SPEAK` (speak in a voice channel)\n * * `MUTE_MEMBERS` (mute members across all voice channels)\n * * `DEAFEN_MEMBERS` (deafen members across all voice channels)\n * * `MOVE_MEMBERS` (move members between voice channels)\n * * `USE_VAD` (use voice activity detection)\n * * `CHANGE_NICKNAME`\n * * `MANAGE_NICKNAMES` (change other members' nicknames)\n * * `MANAGE_ROLES`\n * * `MANAGE_WEBHOOKS`\n * * `MANAGE_EMOJIS`\n * @type {Object}\n * @see {@link https://discordapp.com/developers/docs/topics/permissions}\n */\nPermissions.FLAGS = {\n  CREATE_INSTANT_INVITE: 1 << 0,\n  KICK_MEMBERS: 1 << 1,\n  BAN_MEMBERS: 1 << 2,\n  ADMINISTRATOR: 1 << 3,\n  MANAGE_CHANNELS: 1 << 4,\n  MANAGE_GUILD: 1 << 5,\n  ADD_REACTIONS: 1 << 6,\n  VIEW_AUDIT_LOG: 1 << 7,\n  PRIORITY_SPEAKER: 1 << 8,\n  STREAM: 1 << 9,\n  VIEW_CHANNEL: 1 << 10,\n  SEND_MESSAGES: 1 << 11,\n  SEND_TTS_MESSAGES: 1 << 12,\n  MANAGE_MESSAGES: 1 << 13,\n  EMBED_LINKS: 1 << 14,\n  ATTACH_FILES: 1 << 15,\n  READ_MESSAGE_HISTORY: 1 << 16,\n  MENTION_EVERYONE: 1 << 17,\n  USE_EXTERNAL_EMOJIS: 1 << 18,\n  VIEW_GUILD_INSIGHTS: 1 << 19,\n  CONNECT: 1 << 20,\n  SPEAK: 1 << 21,\n  MUTE_MEMBERS: 1 << 22,\n  DEAFEN_MEMBERS: 1 << 23,\n  MOVE_MEMBERS: 1 << 24,\n  USE_VAD: 1 << 25,\n  CHANGE_NICKNAME: 1 << 26,\n  MANAGE_NICKNAMES: 1 << 27,\n  MANAGE_ROLES: 1 << 28,\n  MANAGE_WEBHOOKS: 1 << 29,\n  MANAGE_EMOJIS: 1 << 30,\n};\n\n/**\n * Bitfield representing every permission combined\n * @type {number}\n */\nPermissions.ALL = Object.values(Permissions.FLAGS).reduce((all, p) => all | p, 0);\n\n/**\n * Bitfield representing the default permissions for users\n * @type {number}\n */\nPermissions.DEFAULT = 104324673;\n\nmodule.exports = Permissions;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/Permissions.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/Snowflake.js":
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/util/Snowflake.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Util = __webpack_require__(/*! ../util/Util */ \"./node_modules/discord.js/src/util/Util.js\");\n\n// Discord epoch (2015-01-01T00:00:00.000Z)\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n\n/**\n * A container for useful snowflake-related methods.\n */\nclass SnowflakeUtil {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n   * ```\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   *\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(\n        `\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`,\n      );\n    }\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    // eslint-disable-next-line max-len\n    const BINARY = `${(timestamp - EPOCH).toString(2).padStart(42, '0')}0000100000${(INCREMENT++)\n      .toString(2)\n      .padStart(12, '0')}`;\n    return Util.binaryToID(BINARY);\n  }\n\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerID Worker ID in the snowflake\n   * @property {number} processID Process ID in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake} Deconstructed snowflake\n   */\n  static deconstruct(snowflake) {\n    const BINARY = Util.idToBinary(snowflake)\n      .toString(2)\n      .padStart(64, '0');\n    const res = {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n      workerID: parseInt(BINARY.substring(42, 47), 2),\n      processID: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY,\n    };\n    Object.defineProperty(res, 'date', {\n      get: function get() {\n        return new Date(this.timestamp);\n      },\n      enumerable: true,\n    });\n    return res;\n  }\n}\n\nmodule.exports = SnowflakeUtil;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/Snowflake.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/Speaking.js":
/*!******************************************************!*\
  !*** ./node_modules/discord.js/src/util/Speaking.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BitField = __webpack_require__(/*! ./BitField */ \"./node_modules/discord.js/src/util/BitField.js\");\n\n/**\n * Data structure that makes it easy to interact with a {@link VoiceConnection#speaking}\n * and {@link guildMemberSpeaking} event bitfields.\n * @extends {BitField}\n */\nclass Speaking extends BitField {}\n\n/**\n * @name Speaking\n * @kind constructor\n * @memberof Speaking\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Numeric speaking flags. All available properties:\n * * `SPEAKING`\n * * `SOUNDSHARE`\n * * `PRIORITY_SPEAKING`\n * @type {Object}\n * @see {@link https://discordapp.com/developers/docs/topics/voice-connections#speaking}\n */\nSpeaking.FLAGS = {\n  SPEAKING: 1 << 0,\n  SOUNDSHARE: 1 << 1,\n  PRIORITY_SPEAKING: 1 << 2,\n};\n\nmodule.exports = Speaking;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/Speaking.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/Structures.js":
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/util/Structures.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * An extendable structure:\n * * **`GuildEmoji`**\n * * **`DMChannel`**\n * * **`TextChannel`**\n * * **`VoiceChannel`**\n * * **`CategoryChannel`**\n * * **`NewsChannel`**\n * * **`StoreChannel`**\n * * **`GuildMember`**\n * * **`Guild`**\n * * **`Message`**\n * * **`MessageReaction`**\n * * **`Presence`**\n * * **`ClientPresence`**\n * * **`VoiceState`**\n * * **`Role`**\n * * **`User`**\n * @typedef {string} ExtendableStructure\n */\n\n/**\n * Allows for the extension of built-in Discord.js structures that are instantiated by {@link BaseManager Managers}.\n */\nclass Structures {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Retrieves a structure class.\n   * @param {string} structure Name of the structure to retrieve\n   * @returns {Function}\n   */\n  static get(structure) {\n    if (typeof structure === 'string') return structures[structure];\n    throw new TypeError(`\"structure\" argument must be a string (received ${typeof structure})`);\n  }\n\n  /**\n   * Extends a structure.\n   * <warn> Make sure to extend all structures before instantiating your client.\n   * Extending after doing so may not work as expected. </warn>\n   * @param {ExtendableStructure} structure Name of the structure class to extend\n   * @param {Function} extender Function that takes the base class to extend as its only parameter and returns the\n   * extended class/prototype\n   * @returns {Function} Extended class/prototype returned from the extender\n   * @example\n   * const { Structures } = require('discord.js');\n   *\n   * Structures.extend('Guild', Guild => {\n   *   class CoolGuild extends Guild {\n   *     constructor(client, data) {\n   *       super(client, data);\n   *       this.cool = true;\n   *     }\n   *   }\n   *\n   *   return CoolGuild;\n   * });\n   */\n  static extend(structure, extender) {\n    if (!structures[structure]) throw new RangeError(`\"${structure}\" is not a valid extensible structure.`);\n    if (typeof extender !== 'function') {\n      const received = `(received ${typeof extender})`;\n      throw new TypeError(\n        `\"extender\" argument must be a function that returns the extended structure class/prototype ${received}.`,\n      );\n    }\n\n    const extended = extender(structures[structure]);\n    if (typeof extended !== 'function') {\n      const received = `(received ${typeof extended})`;\n      throw new TypeError(`The extender function must return the extended structure class/prototype ${received}.`);\n    }\n\n    if (!(extended.prototype instanceof structures[structure])) {\n      const prototype = Object.getPrototypeOf(extended);\n      const received = `${extended.name || 'unnamed'}${prototype.name ? ` extends ${prototype.name}` : ''}`;\n      throw new Error(\n        'The class/prototype returned from the extender function must extend the existing structure class/prototype' +\n          ` (received function ${received}; expected extension of ${structures[structure].name}).`,\n      );\n    }\n\n    structures[structure] = extended;\n    return extended;\n  }\n}\n\nconst structures = {\n  GuildEmoji: __webpack_require__(/*! ../structures/GuildEmoji */ \"./node_modules/discord.js/src/structures/GuildEmoji.js\"),\n  DMChannel: __webpack_require__(/*! ../structures/DMChannel */ \"./node_modules/discord.js/src/structures/DMChannel.js\"),\n  TextChannel: __webpack_require__(/*! ../structures/TextChannel */ \"./node_modules/discord.js/src/structures/TextChannel.js\"),\n  VoiceChannel: __webpack_require__(/*! ../structures/VoiceChannel */ \"./node_modules/discord.js/src/structures/VoiceChannel.js\"),\n  CategoryChannel: __webpack_require__(/*! ../structures/CategoryChannel */ \"./node_modules/discord.js/src/structures/CategoryChannel.js\"),\n  NewsChannel: __webpack_require__(/*! ../structures/NewsChannel */ \"./node_modules/discord.js/src/structures/NewsChannel.js\"),\n  StoreChannel: __webpack_require__(/*! ../structures/StoreChannel */ \"./node_modules/discord.js/src/structures/StoreChannel.js\"),\n  GuildMember: __webpack_require__(/*! ../structures/GuildMember */ \"./node_modules/discord.js/src/structures/GuildMember.js\"),\n  Guild: __webpack_require__(/*! ../structures/Guild */ \"./node_modules/discord.js/src/structures/Guild.js\"),\n  Message: __webpack_require__(/*! ../structures/Message */ \"./node_modules/discord.js/src/structures/Message.js\"),\n  MessageReaction: __webpack_require__(/*! ../structures/MessageReaction */ \"./node_modules/discord.js/src/structures/MessageReaction.js\"),\n  Presence: __webpack_require__(/*! ../structures/Presence */ \"./node_modules/discord.js/src/structures/Presence.js\").Presence,\n  ClientPresence: __webpack_require__(/*! ../structures/ClientPresence */ \"./node_modules/discord.js/src/structures/ClientPresence.js\"),\n  VoiceState: __webpack_require__(/*! ../structures/VoiceState */ \"./node_modules/discord.js/src/structures/VoiceState.js\"),\n  Role: __webpack_require__(/*! ../structures/Role */ \"./node_modules/discord.js/src/structures/Role.js\"),\n  User: __webpack_require__(/*! ../structures/User */ \"./node_modules/discord.js/src/structures/User.js\"),\n};\n\nmodule.exports = Structures;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/Structures.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/SystemChannelFlags.js":
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/util/SystemChannelFlags.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst BitField = __webpack_require__(/*! ./BitField */ \"./node_modules/discord.js/src/util/BitField.js\");\n\n/**\n * Data structure that makes it easy to interact with a {@link Guild#systemChannelFlags} bitfield.\n * <info>Note that all event message types are enabled by default,\n * and by setting their corresponding flags you are disabling them</info>\n * @extends {BitField}\n */\nclass SystemChannelFlags extends BitField {}\n\n/**\n * @name SystemChannelFlags\n * @kind constructor\n * @memberof SystemChannelFlags\n * @param {SystemChannelFlagsResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Data that can be resolved to give a sytem channel flag bitfield. This can be:\n * * A string (see {@link SystemChannelFlags.FLAGS})\n * * A sytem channel flag\n * * An instance of SystemChannelFlags\n * * An Array of SystemChannelFlagsResolvable\n * @typedef {string|number|SystemChannelFlags|SystemChannelFlagsResolvable[]} SystemChannelFlagsResolvable\n */\n\n/**\n * Numeric system channel flags. All available properties:\n * * `WELCOME_MESSAGE_DISABLED`\n * * `BOOST_MESSAGE_DISABLED`\n * @type {Object}\n */\nSystemChannelFlags.FLAGS = {\n  WELCOME_MESSAGE_DISABLED: 1 << 0,\n  BOOST_MESSAGE_DISABLED: 1 << 1,\n};\n\nmodule.exports = SystemChannelFlags;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/SystemChannelFlags.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/UserFlags.js":
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/util/UserFlags.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nconst BitField = __webpack_require__(/*! ./BitField */ \"./node_modules/discord.js/src/util/BitField.js\");\n\n/**\n * Data structure that makes it easy to interact with a {@link User#flags} bitfield.\n * @extends {BitField}\n */\nclass UserFlags extends BitField {}\n\n/**\n * @name UserFlags\n * @kind constructor\n * @memberof UserFlags\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Numeric user flags. All available properties:\n * * `DISCORD_EMPLOYEE`\n * * `DISCORD_PARTNER`\n * * `HYPESQUAD_EVENTS`\n * * `BUGHUNTER_LEVEL_1`\n * * `HOUSE_BRAVERY`\n * * `HOUSE_BRILLIANCE`\n * * `HOUSE_BALANCE`\n * * `EARLY_SUPPORTER`\n * * `TEAM_USER`\n * * `SYSTEM`\n * * `BUGHUNTER_LEVEL_2`\n * * `VERIFIED_BOT`\n * * `VERIFIED_DEVELOPER`\n * @type {Object}\n * @see {@link https://discordapp.com/developers/docs/resources/user#user-object-user-flags}\n */\nUserFlags.FLAGS = {\n  DISCORD_EMPLOYEE: 1 << 0,\n  DISCORD_PARTNER: 1 << 1,\n  HYPESQUAD_EVENTS: 1 << 2,\n  BUGHUNTER_LEVEL_1: 1 << 3,\n  HOUSE_BRAVERY: 1 << 6,\n  HOUSE_BRILLIANCE: 1 << 7,\n  HOUSE_BALANCE: 1 << 8,\n  EARLY_SUPPORTER: 1 << 9,\n  TEAM_USER: 1 << 10,\n  SYSTEM: 1 << 12,\n  BUGHUNTER_LEVEL_2: 1 << 14,\n  VERIFIED_BOT: 1 << 16,\n  VERIFIED_DEVELOPER: 1 << 17,\n};\n\nmodule.exports = UserFlags;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/UserFlags.js?");

/***/ }),

/***/ "./node_modules/discord.js/src/util/Util.js":
/*!**************************************************!*\
  !*** ./node_modules/discord.js/src/util/Util.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst { parse } = __webpack_require__(/*! path */ \"path\");\nconst fetch = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/lib/index.mjs\");\nconst { Colors, DefaultOptions, Endpoints } = __webpack_require__(/*! ./Constants */ \"./node_modules/discord.js/src/util/Constants.js\");\nconst { Error: DiscordError, RangeError, TypeError } = __webpack_require__(/*! ../errors */ \"./node_modules/discord.js/src/errors/index.js\");\nconst has = (o, k) => Object.prototype.hasOwnProperty.call(o, k);\nconst isObject = d => typeof d === 'object' && d !== null;\n\n/**\n * Contains various general-purpose utility methods. These functions are also available on the base `Discord` object.\n */\nclass Util {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Flatten an object. Any properties that are collections will get converted to an array of keys.\n   * @param {Object} obj The object to flatten.\n   * @param {...Object<string, boolean|string>} [props] Specific properties to include/exclude.\n   * @returns {Object}\n   */\n  static flatten(obj, ...props) {\n    if (!isObject(obj)) return obj;\n\n    props = Object.assign(\n      ...Object.keys(obj)\n        .filter(k => !k.startsWith('_'))\n        .map(k => ({ [k]: true })),\n      ...props,\n    );\n\n    const out = {};\n\n    for (let [prop, newProp] of Object.entries(props)) {\n      if (!newProp) continue;\n      newProp = newProp === true ? prop : newProp;\n\n      const element = obj[prop];\n      const elemIsObj = isObject(element);\n      const valueOf = elemIsObj && typeof element.valueOf === 'function' ? element.valueOf() : null;\n\n      // If it's a Collection, make the array of keys\n      if (element instanceof __webpack_require__(/*! ./Collection */ \"./node_modules/discord.js/src/util/Collection.js\")) out[newProp] = Array.from(element.keys());\n      // If the valueOf is a Collection, use its array of keys\n      else if (valueOf instanceof __webpack_require__(/*! ./Collection */ \"./node_modules/discord.js/src/util/Collection.js\")) out[newProp] = Array.from(valueOf.keys());\n      // If it's an array, flatten each element\n      else if (Array.isArray(element)) out[newProp] = element.map(e => Util.flatten(e));\n      // If it's an object with a primitive `valueOf`, use that value\n      else if (typeof valueOf !== 'object') out[newProp] = valueOf;\n      // If it's a primitive\n      else if (!elemIsObj) out[newProp] = element;\n    }\n\n    return out;\n  }\n\n  /**\n   * Splits a string into multiple chunks at a designated character that do not exceed a specific length.\n   * @param {StringResolvable} text Content to split\n   * @param {SplitOptions} [options] Options controlling the behavior of the split\n   * @returns {string[]}\n   */\n  static splitMessage(text, { maxLength = 2000, char = '\\n', prepend = '', append = '' } = {}) {\n    text = Util.resolveString(text);\n    if (text.length <= maxLength) return [text];\n    const splitText = text.split(char);\n    if (splitText.some(chunk => chunk.length > maxLength)) throw new RangeError('SPLIT_MAX_LEN');\n    const messages = [];\n    let msg = '';\n    for (const chunk of splitText) {\n      if (msg && (msg + char + chunk + append).length > maxLength) {\n        messages.push(msg + append);\n        msg = prepend;\n      }\n      msg += (msg && msg !== prepend ? char : '') + chunk;\n    }\n    return messages.concat(msg).filter(m => m);\n  }\n\n  /**\n   * Escapes any Discord-flavour markdown in a string.\n   * @param {string} text Content to escape\n   * @param {Object} [options={}] What types of markdown to escape\n   * @param {boolean} [options.codeBlock=true] Whether to escape code blocks or not\n   * @param {boolean} [options.inlineCode=true] Whether to escape inline code or not\n   * @param {boolean} [options.bold=true] Whether to escape bolds or not\n   * @param {boolean} [options.italic=true] Whether to escape italics or not\n   * @param {boolean} [options.underline=true] Whether to escape underlines or not\n   * @param {boolean} [options.strikethrough=true] Whether to escape strikethroughs or not\n   * @param {boolean} [options.spoiler=true] Whether to escape spoilers or not\n   * @param {boolean} [options.codeBlockContent=true] Whether to escape text inside code blocks or not\n   * @param {boolean} [options.inlineCodeContent=true] Whether to escape text inside inline code or not\n   * @returns {string}\n   */\n  static escapeMarkdown(\n    text,\n    {\n      codeBlock = true,\n      inlineCode = true,\n      bold = true,\n      italic = true,\n      underline = true,\n      strikethrough = true,\n      spoiler = true,\n      codeBlockContent = true,\n      inlineCodeContent = true,\n    } = {},\n  ) {\n    if (!codeBlockContent) {\n      return text\n        .split('```')\n        .map((subString, index, array) => {\n          if (index % 2 && index !== array.length - 1) return subString;\n          return Util.escapeMarkdown(subString, {\n            inlineCode,\n            bold,\n            italic,\n            underline,\n            strikethrough,\n            spoiler,\n            inlineCodeContent,\n          });\n        })\n        .join(codeBlock ? '\\\\`\\\\`\\\\`' : '```');\n    }\n    if (!inlineCodeContent) {\n      return text\n        .split(/(?<=^|[^`])`(?=[^`]|$)/g)\n        .map((subString, index, array) => {\n          if (index % 2 && index !== array.length - 1) return subString;\n          return Util.escapeMarkdown(subString, {\n            codeBlock,\n            bold,\n            italic,\n            underline,\n            strikethrough,\n            spoiler,\n          });\n        })\n        .join(inlineCode ? '\\\\`' : '`');\n    }\n    if (inlineCode) text = Util.escapeInlineCode(text);\n    if (codeBlock) text = Util.escapeCodeBlock(text);\n    if (italic) text = Util.escapeItalic(text);\n    if (bold) text = Util.escapeBold(text);\n    if (underline) text = Util.escapeUnderline(text);\n    if (strikethrough) text = Util.escapeStrikethrough(text);\n    if (spoiler) text = Util.escapeSpoiler(text);\n    return text;\n  }\n\n  /**\n   * Escapes code block markdown in a string.\n   * @param {string} text Content to escape\n   * @returns {string}\n   */\n  static escapeCodeBlock(text) {\n    return text.replace(/```/g, '\\\\`\\\\`\\\\`');\n  }\n\n  /**\n   * Escapes inline code markdown in a string.\n   * @param {string} text Content to escape\n   * @returns {string}\n   */\n  static escapeInlineCode(text) {\n    return text.replace(/(?<=^|[^`])`(?=[^`]|$)/g, '\\\\`');\n  }\n\n  /**\n   * Escapes italic markdown in a string.\n   * @param {string} text Content to escape\n   * @returns {string}\n   */\n  static escapeItalic(text) {\n    let i = 0;\n    text = text.replace(/(?<=^|[^*])\\*([^*]|\\*\\*|$)/g, (_, match) => {\n      if (match === '**') return ++i % 2 ? `\\\\*${match}` : `${match}\\\\*`;\n      return `\\\\*${match}`;\n    });\n    i = 0;\n    return text.replace(/(?<=^|[^_])_([^_]|__|$)/g, (_, match) => {\n      if (match === '__') return ++i % 2 ? `\\\\_${match}` : `${match}\\\\_`;\n      return `\\\\_${match}`;\n    });\n  }\n\n  /**\n   * Escapes bold markdown in a string.\n   * @param {string} text Content to escape\n   * @returns {string}\n   */\n  static escapeBold(text) {\n    let i = 0;\n    return text.replace(/\\*\\*(\\*)?/g, (_, match) => {\n      if (match) return ++i % 2 ? `${match}\\\\*\\\\*` : `\\\\*\\\\*${match}`;\n      return '\\\\*\\\\*';\n    });\n  }\n\n  /**\n   * Escapes underline markdown in a string.\n   * @param {string} text Content to escape\n   * @returns {string}\n   */\n  static escapeUnderline(text) {\n    let i = 0;\n    return text.replace(/__(_)?/g, (_, match) => {\n      if (match) return ++i % 2 ? `${match}\\\\_\\\\_` : `\\\\_\\\\_${match}`;\n      return '\\\\_\\\\_';\n    });\n  }\n\n  /**\n   * Escapes strikethrough markdown in a string.\n   * @param {string} text Content to escape\n   * @returns {string}\n   */\n  static escapeStrikethrough(text) {\n    return text.replace(/~~/g, '\\\\~\\\\~');\n  }\n\n  /**\n   * Escapes spoiler markdown in a string.\n   * @param {string} text Content to escape\n   * @returns {string}\n   */\n  static escapeSpoiler(text) {\n    return text.replace(/\\|\\|/g, '\\\\|\\\\|');\n  }\n\n  /**\n   * Gets the recommended shard count from Discord.\n   * @param {string} token Discord auth token\n   * @param {number} [guildsPerShard=1000] Number of guilds per shard\n   * @returns {Promise<number>} The recommended number of shards\n   */\n  static fetchRecommendedShards(token, guildsPerShard = 1000) {\n    if (!token) throw new DiscordError('TOKEN_MISSING');\n    return fetch(`${DefaultOptions.http.api}/v${DefaultOptions.http.version}${Endpoints.botGateway}`, {\n      method: 'GET',\n      headers: { Authorization: `Bot ${token.replace(/^Bot\\s*/i, '')}` },\n    })\n      .then(res => {\n        if (res.ok) return res.json();\n        throw res;\n      })\n      .then(data => data.shards * (1000 / guildsPerShard));\n  }\n\n  /**\n   * Parses emoji info out of a string. The string must be one of:\n   * * A UTF-8 emoji (no ID)\n   * * A URL-encoded UTF-8 emoji (no ID)\n   * * A Discord custom emoji (`<:name:id>` or `<a:name:id>`)\n   * @param {string} text Emoji string to parse\n   * @returns {Object} Object with `animated`, `name`, and `id` properties\n   * @private\n   */\n  static parseEmoji(text) {\n    if (text.includes('%')) text = decodeURIComponent(text);\n    if (!text.includes(':')) return { animated: false, name: text, id: null };\n    const m = text.match(/<?(?:(a):)?(\\w{2,32}):(\\d{17,19})?>?/);\n    if (!m) return null;\n    return { animated: Boolean(m[1]), name: m[2], id: m[3] || null };\n  }\n\n  /**\n   * Shallow-copies an object with its class/prototype intact.\n   * @param {Object} obj Object to clone\n   * @returns {Object}\n   * @private\n   */\n  static cloneObject(obj) {\n    return Object.assign(Object.create(obj), obj);\n  }\n\n  /**\n   * Sets default properties on an object that aren't already specified.\n   * @param {Object} def Default properties\n   * @param {Object} given Object to assign defaults to\n   * @returns {Object}\n   * @private\n   */\n  static mergeDefault(def, given) {\n    if (!given) return def;\n    for (const key in def) {\n      if (!has(given, key) || given[key] === undefined) {\n        given[key] = def[key];\n      } else if (given[key] === Object(given[key])) {\n        given[key] = Util.mergeDefault(def[key], given[key]);\n      }\n    }\n\n    return given;\n  }\n\n  /**\n   * Converts an ArrayBuffer or string to a Buffer.\n   * @param {ArrayBuffer|string} ab ArrayBuffer to convert\n   * @returns {Buffer}\n   * @private\n   */\n  static convertToBuffer(ab) {\n    if (typeof ab === 'string') ab = Util.str2ab(ab);\n    return Buffer.from(ab);\n  }\n\n  /**\n   * Converts a string to an ArrayBuffer.\n   * @param {string} str String to convert\n   * @returns {ArrayBuffer}\n   * @private\n   */\n  static str2ab(str) {\n    const buffer = new ArrayBuffer(str.length * 2);\n    const view = new Uint16Array(buffer);\n    for (var i = 0, strLen = str.length; i < strLen; i++) view[i] = str.charCodeAt(i);\n    return buffer;\n  }\n\n  /**\n   * Makes an Error from a plain info object.\n   * @param {Object} obj Error info\n   * @param {string} obj.name Error type\n   * @param {string} obj.message Message for the error\n   * @param {string} obj.stack Stack for the error\n   * @returns {Error}\n   * @private\n   */\n  static makeError(obj) {\n    const err = new Error(obj.message);\n    err.name = obj.name;\n    err.stack = obj.stack;\n    return err;\n  }\n\n  /**\n   * Makes a plain error info object from an Error.\n   * @param {Error} err Error to get info from\n   * @returns {Object}\n   * @private\n   */\n  static makePlainError(err) {\n    return {\n      name: err.name,\n      message: err.message,\n      stack: err.stack,\n    };\n  }\n\n  /**\n   * Moves an element in an array *in place*.\n   * @param {Array<*>} array Array to modify\n   * @param {*} element Element to move\n   * @param {number} newIndex Index or offset to move the element to\n   * @param {boolean} [offset=false] Move the element by an offset amount rather than to a set index\n   * @returns {number}\n   * @private\n   */\n  static moveElementInArray(array, element, newIndex, offset = false) {\n    const index = array.indexOf(element);\n    newIndex = (offset ? index : 0) + newIndex;\n    if (newIndex > -1 && newIndex < array.length) {\n      const removedElement = array.splice(index, 1)[0];\n      array.splice(newIndex, 0, removedElement);\n    }\n    return array.indexOf(element);\n  }\n\n  /**\n   * Data that can be resolved to give a string. This can be:\n   * * A string\n   * * An array (joined with a new line delimiter to give a string)\n   * * Any value\n   * @typedef {string|Array|*} StringResolvable\n   */\n\n  /**\n   * Resolves a StringResolvable to a string.\n   * @param {StringResolvable} data The string resolvable to resolve\n   * @returns {string}\n   */\n  static resolveString(data) {\n    if (typeof data === 'string') return data;\n    if (Array.isArray(data)) return data.join('\\n');\n    return String(data);\n  }\n\n  /**\n   * Can be a number, hex string, an RGB array like:\n   * ```js\n   * [255, 0, 255] // purple\n   * ```\n   * or one of the following strings:\n   * - `DEFAULT`\n   * - `WHITE`\n   * - `AQUA`\n   * - `GREEN`\n   * - `BLUE`\n   * - `YELLOW`\n   * - `PURPLE`\n   * - `LUMINOUS_VIVID_PINK`\n   * - `GOLD`\n   * - `ORANGE`\n   * - `RED`\n   * - `GREY`\n   * - `DARKER_GREY`\n   * - `NAVY`\n   * - `DARK_AQUA`\n   * - `DARK_GREEN`\n   * - `DARK_BLUE`\n   * - `DARK_PURPLE`\n   * - `DARK_VIVID_PINK`\n   * - `DARK_GOLD`\n   * - `DARK_ORANGE`\n   * - `DARK_RED`\n   * - `DARK_GREY`\n   * - `LIGHT_GREY`\n   * - `DARK_NAVY`\n   * - `RANDOM`\n   * @typedef {string|number|number[]} ColorResolvable\n   */\n\n  /**\n   * Resolves a ColorResolvable into a color number.\n   * @param {ColorResolvable} color Color to resolve\n   * @returns {number} A color\n   */\n  static resolveColor(color) {\n    if (typeof color === 'string') {\n      if (color === 'RANDOM') return Math.floor(Math.random() * (0xffffff + 1));\n      if (color === 'DEFAULT') return 0;\n      color = Colors[color] || parseInt(color.replace('#', ''), 16);\n    } else if (Array.isArray(color)) {\n      color = (color[0] << 16) + (color[1] << 8) + color[2];\n    }\n\n    if (color < 0 || color > 0xffffff) throw new RangeError('COLOR_RANGE');\n    else if (color && isNaN(color)) throw new TypeError('COLOR_CONVERT');\n\n    return color;\n  }\n\n  /**\n   * Sorts by Discord's position and ID.\n   * @param  {Collection} collection Collection of objects to sort\n   * @returns {Collection}\n   */\n  static discordSort(collection) {\n    return collection.sorted(\n      (a, b) =>\n        a.rawPosition - b.rawPosition ||\n        parseInt(b.id.slice(0, -10)) - parseInt(a.id.slice(0, -10)) ||\n        parseInt(b.id.slice(10)) - parseInt(a.id.slice(10)),\n    );\n  }\n\n  /**\n   * Sets the position of a Channel or Role.\n   * @param {Channel|Role} item Object to set the position of\n   * @param {number} position New position for the object\n   * @param {boolean} relative Whether `position` is relative to its current position\n   * @param {Collection<string, Channel|Role>} sorted A collection of the objects sorted properly\n   * @param {APIRouter} route Route to call PATCH on\n   * @param {string} [reason] Reason for the change\n   * @returns {Promise<Object[]>} Updated item list, with `id` and `position` properties\n   * @private\n   */\n  static setPosition(item, position, relative, sorted, route, reason) {\n    let updatedItems = sorted.array();\n    Util.moveElementInArray(updatedItems, item, position, relative);\n    updatedItems = updatedItems.map((r, i) => ({ id: r.id, position: i }));\n    return route.patch({ data: updatedItems, reason }).then(() => updatedItems);\n  }\n\n  /**\n   * Alternative to Node's `path.basename`, removing query string after the extension if it exists.\n   * @param {string} path Path to get the basename of\n   * @param {string} [ext] File extension to remove\n   * @returns {string} Basename of the path\n   * @private\n   */\n  static basename(path, ext) {\n    let res = parse(path);\n    return ext && res.ext.startsWith(ext) ? res.name : res.base.split('?')[0];\n  }\n\n  /**\n   * Transforms a snowflake from a decimal string to a bit string.\n   * @param  {Snowflake} num Snowflake to be transformed\n   * @returns {string}\n   * @private\n   */\n  static idToBinary(num) {\n    let bin = '';\n    let high = parseInt(num.slice(0, -10)) || 0;\n    let low = parseInt(num.slice(-10));\n    while (low > 0 || high > 0) {\n      bin = String(low & 1) + bin;\n      low = Math.floor(low / 2);\n      if (high > 0) {\n        low += 5000000000 * (high % 2);\n        high = Math.floor(high / 2);\n      }\n    }\n    return bin;\n  }\n\n  /**\n   * Transforms a snowflake from a bit string to a decimal string.\n   * @param  {string} num Bit string to be transformed\n   * @returns {Snowflake}\n   * @private\n   */\n  static binaryToID(num) {\n    let dec = '';\n\n    while (num.length > 50) {\n      const high = parseInt(num.slice(0, -32), 2);\n      const low = parseInt((high % 10).toString(2) + num.slice(-32), 2);\n\n      dec = (low % 10).toString() + dec;\n      num =\n        Math.floor(high / 10).toString(2) +\n        Math.floor(low / 10)\n          .toString(2)\n          .padStart(32, '0');\n    }\n\n    num = parseInt(num, 2);\n    while (num > 0) {\n      dec = (num % 10).toString() + dec;\n      num = Math.floor(num / 10);\n    }\n\n    return dec;\n  }\n\n  /**\n   * Breaks user, role and everyone/here mentions by adding a zero width space after every @ character\n   * @param {string} str The string to sanitize\n   * @returns {string}\n   */\n  static removeMentions(str) {\n    return str.replace(/@/g, '@\\u200b');\n  }\n\n  /**\n   * The content to have all mentions replaced by the equivalent text.\n   * @param {string} str The string to be converted\n   * @param {Message} message The message object to reference\n   * @returns {string}\n   */\n  static cleanContent(str, message) {\n    str = str\n      .replace(/<@!?[0-9]+>/g, input => {\n        const id = input.replace(/<|!|>|@/g, '');\n        if (message.channel.type === 'dm') {\n          const user = message.client.users.cache.get(id);\n          return user ? `@${user.username}` : input;\n        }\n\n        const member = message.channel.guild.members.cache.get(id);\n        if (member) {\n          return `@${member.displayName}`;\n        } else {\n          const user = message.client.users.cache.get(id);\n          return user ? `@${user.username}` : input;\n        }\n      })\n      .replace(/<#[0-9]+>/g, input => {\n        const channel = message.client.channels.cache.get(input.replace(/<|#|>/g, ''));\n        return channel ? `#${channel.name}` : input;\n      })\n      .replace(/<@&[0-9]+>/g, input => {\n        if (message.channel.type === 'dm') return input;\n        const role = message.guild.roles.cache.get(input.replace(/<|@|>|&/g, ''));\n        return role ? `@${role.name}` : input;\n      });\n    if (message.client.options.disableMentions === 'everyone') {\n      str = str.replace(/@([^<>@ ]*)/gmsu, (match, target) => {\n        if (target.match(/^[&!]?\\d+$/)) {\n          return `@${target}`;\n        } else {\n          return `@\\u200b${target}`;\n        }\n      });\n    }\n    if (message.client.options.disableMentions === 'all') {\n      return Util.removeMentions(str);\n    } else {\n      return str;\n    }\n  }\n\n  /**\n   * The content to put in a codeblock with all codeblock fences replaced by the equivalent backticks.\n   * @param {string} text The string to be converted\n   * @returns {string}\n   */\n  static cleanCodeBlockContent(text) {\n    return text.replace(/```/g, '`\\u200b``');\n  }\n\n  /**\n   * Creates a Promise that resolves after a specified duration.\n   * @param {number} ms How long to wait before resolving (in milliseconds)\n   * @returns {Promise<void>}\n   * @private\n   */\n  static delayFor(ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n}\n\nmodule.exports = Util;\n\n\n//# sourceURL=webpack:///./node_modules/discord.js/src/util/Util.js?");

/***/ }),

/***/ "./node_modules/event-target-shim/dist/event-target-shim.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/event-target-shim/dist/event-target-shim.mjs ***!
  \*******************************************************************/
/*! exports provided: default, defineEventAttribute, EventTarget */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defineEventAttribute\", function() { return defineEventAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventTarget\", function() { return EventTarget; });\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap();\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap();\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event);\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    );\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            );\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true;\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault();\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    });\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true });\n\n    // Define accessors\n    const keys = Object.keys(event);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key));\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget;\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation();\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this);\n\n        data.stopped = true;\n        data.immediateStopped = true;\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation();\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this));\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this);\n\n        data.stopped = true;\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true;\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this));\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype);\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event);\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value;\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event;\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto);\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event);\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    });\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n            const isFunc = typeof descriptor.value === \"function\";\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            );\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n        wrappers.set(proto, wrapper);\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nfunction wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nfunction isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nfunction setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase;\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nfunction setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget;\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nfunction setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener;\n}\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap();\n\n// Listener types\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget);\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this);\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next;\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null; // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this);\n\n            // Traverse to the tail while removing old value.\n            let prev = null;\n            let node = listeners.get(eventName);\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next;\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next);\n                    } else {\n                        listeners.delete(eventName);\n                    }\n                } else {\n                    prev = node;\n                }\n\n                node = node.next;\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                };\n                if (prev === null) {\n                    listeners.set(eventName, newNode);\n                } else {\n                    prev.next = newNode;\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    );\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this);\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    });\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map());\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length);\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i];\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this);\n        const optionsIsObj = isObject(options);\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        };\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName);\n        if (node === undefined) {\n            listeners.set(eventName, newNode);\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null;\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node;\n            node = node.next;\n        }\n\n        // Add it.\n        prev.next = newNode;\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this);\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n\n        let prev = null;\n        let node = listeners.get(eventName);\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n                return\n            }\n\n            prev = node;\n            node = node.next;\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this);\n        const eventName = event.type;\n        let node = listeners.get(eventName);\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event);\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null;\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n            } else {\n                prev = node;\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            );\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent);\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err);\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent);\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next;\n        }\n        setPassiveListener(wrappedEvent, null);\n        setEventPhase(wrappedEvent, 0);\n        setCurrentTarget(wrappedEvent, null);\n\n        return !wrappedEvent.defaultPrevented\n    },\n};\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n});\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (EventTarget);\n\n//# sourceMappingURL=event-target-shim.mjs.map\n\n\n//# sourceURL=webpack:///./node_modules/event-target-shim/dist/event-target-shim.mjs?");

/***/ }),

/***/ "./node_modules/mime-db/db.json":
/*!**************************************!*\
  !*** ./node_modules/mime-db/db.json ***!
  \**************************************/
/*! exports provided: application/1d-interleaved-parityfec, application/3gpdash-qoe-report+xml, application/3gpp-ims+xml, application/a2l, application/activemessage, application/activity+json, application/alto-costmap+json, application/alto-costmapfilter+json, application/alto-directory+json, application/alto-endpointcost+json, application/alto-endpointcostparams+json, application/alto-endpointprop+json, application/alto-endpointpropparams+json, application/alto-error+json, application/alto-networkmap+json, application/alto-networkmapfilter+json, application/alto-updatestreamcontrol+json, application/alto-updatestreamparams+json, application/aml, application/andrew-inset, application/applefile, application/applixware, application/atf, application/atfx, application/atom+xml, application/atomcat+xml, application/atomdeleted+xml, application/atomicmail, application/atomsvc+xml, application/atsc-dwd+xml, application/atsc-dynamic-event-message, application/atsc-held+xml, application/atsc-rdt+json, application/atsc-rsat+xml, application/atxml, application/auth-policy+xml, application/bacnet-xdd+zip, application/batch-smtp, application/bdoc, application/beep+xml, application/calendar+json, application/calendar+xml, application/call-completion, application/cals-1840, application/cap+xml, application/cbor, application/cbor-seq, application/cccex, application/ccmp+xml, application/ccxml+xml, application/cdfx+xml, application/cdmi-capability, application/cdmi-container, application/cdmi-domain, application/cdmi-object, application/cdmi-queue, application/cdni, application/cea, application/cea-2018+xml, application/cellml+xml, application/cfw, application/clue+xml, application/clue_info+xml, application/cms, application/cnrp+xml, application/coap-group+json, application/coap-payload, application/commonground, application/conference-info+xml, application/cose, application/cose-key, application/cose-key-set, application/cpl+xml, application/csrattrs, application/csta+xml, application/cstadata+xml, application/csvm+json, application/cu-seeme, application/cwt, application/cybercash, application/dart, application/dash+xml, application/dashdelta, application/davmount+xml, application/dca-rft, application/dcd, application/dec-dx, application/dialog-info+xml, application/dicom, application/dicom+json, application/dicom+xml, application/dii, application/dit, application/dns, application/dns+json, application/dns-message, application/docbook+xml, application/dots+cbor, application/dskpp+xml, application/dssc+der, application/dssc+xml, application/dvcs, application/ecmascript, application/edi-consent, application/edi-x12, application/edifact, application/efi, application/emergencycalldata.comment+xml, application/emergencycalldata.control+xml, application/emergencycalldata.deviceinfo+xml, application/emergencycalldata.ecall.msd, application/emergencycalldata.providerinfo+xml, application/emergencycalldata.serviceinfo+xml, application/emergencycalldata.subscriberinfo+xml, application/emergencycalldata.veds+xml, application/emma+xml, application/emotionml+xml, application/encaprtp, application/epp+xml, application/epub+zip, application/eshop, application/exi, application/expect-ct-report+json, application/fastinfoset, application/fastsoap, application/fdt+xml, application/fhir+json, application/fhir+xml, application/fido.trusted-apps+json, application/fits, application/flexfec, application/font-sfnt, application/font-tdpfr, application/font-woff, application/framework-attributes+xml, application/geo+json, application/geo+json-seq, application/geopackage+sqlite3, application/geoxacml+xml, application/gltf-buffer, application/gml+xml, application/gpx+xml, application/gxf, application/gzip, application/h224, application/held+xml, application/hjson, application/http, application/hyperstudio, application/ibe-key-request+xml, application/ibe-pkg-reply+xml, application/ibe-pp-data, application/iges, application/im-iscomposing+xml, application/index, application/index.cmd, application/index.obj, application/index.response, application/index.vnd, application/inkml+xml, application/iotp, application/ipfix, application/ipp, application/isup, application/its+xml, application/java-archive, application/java-serialized-object, application/java-vm, application/javascript, application/jf2feed+json, application/jose, application/jose+json, application/jrd+json, application/json, application/json-patch+json, application/json-seq, application/json5, application/jsonml+json, application/jwk+json, application/jwk-set+json, application/jwt, application/kpml-request+xml, application/kpml-response+xml, application/ld+json, application/lgr+xml, application/link-format, application/load-control+xml, application/lost+xml, application/lostsync+xml, application/lpf+zip, application/lxf, application/mac-binhex40, application/mac-compactpro, application/macwriteii, application/mads+xml, application/manifest+json, application/marc, application/marcxml+xml, application/mathematica, application/mathml+xml, application/mathml-content+xml, application/mathml-presentation+xml, application/mbms-associated-procedure-description+xml, application/mbms-deregister+xml, application/mbms-envelope+xml, application/mbms-msk+xml, application/mbms-msk-response+xml, application/mbms-protection-description+xml, application/mbms-reception-report+xml, application/mbms-register+xml, application/mbms-register-response+xml, application/mbms-schedule+xml, application/mbms-user-service-description+xml, application/mbox, application/media-policy-dataset+xml, application/media_control+xml, application/mediaservercontrol+xml, application/merge-patch+json, application/metalink+xml, application/metalink4+xml, application/mets+xml, application/mf4, application/mikey, application/mipc, application/mmt-aei+xml, application/mmt-usd+xml, application/mods+xml, application/moss-keys, application/moss-signature, application/mosskey-data, application/mosskey-request, application/mp21, application/mp4, application/mpeg4-generic, application/mpeg4-iod, application/mpeg4-iod-xmt, application/mrb-consumer+xml, application/mrb-publish+xml, application/msc-ivr+xml, application/msc-mixer+xml, application/msword, application/mud+json, application/multipart-core, application/mxf, application/n-quads, application/n-triples, application/nasdata, application/news-checkgroups, application/news-groupinfo, application/news-transmission, application/nlsml+xml, application/node, application/nss, application/ocsp-request, application/ocsp-response, application/octet-stream, application/oda, application/odm+xml, application/odx, application/oebps-package+xml, application/ogg, application/omdoc+xml, application/onenote, application/oscore, application/oxps, application/p2p-overlay+xml, application/parityfec, application/passport, application/patch-ops-error+xml, application/pdf, application/pdx, application/pem-certificate-chain, application/pgp-encrypted, application/pgp-keys, application/pgp-signature, application/pics-rules, application/pidf+xml, application/pidf-diff+xml, application/pkcs10, application/pkcs12, application/pkcs7-mime, application/pkcs7-signature, application/pkcs8, application/pkcs8-encrypted, application/pkix-attr-cert, application/pkix-cert, application/pkix-crl, application/pkix-pkipath, application/pkixcmp, application/pls+xml, application/poc-settings+xml, application/postscript, application/ppsp-tracker+json, application/problem+json, application/problem+xml, application/provenance+xml, application/prs.alvestrand.titrax-sheet, application/prs.cww, application/prs.hpub+zip, application/prs.nprend, application/prs.plucker, application/prs.rdf-xml-crypt, application/prs.xsf+xml, application/pskc+xml, application/pvd+json, application/qsig, application/raml+yaml, application/raptorfec, application/rdap+json, application/rdf+xml, application/reginfo+xml, application/relax-ng-compact-syntax, application/remote-printing, application/reputon+json, application/resource-lists+xml, application/resource-lists-diff+xml, application/rfc+xml, application/riscos, application/rlmi+xml, application/rls-services+xml, application/route-apd+xml, application/route-s-tsid+xml, application/route-usd+xml, application/rpki-ghostbusters, application/rpki-manifest, application/rpki-publication, application/rpki-roa, application/rpki-updown, application/rsd+xml, application/rss+xml, application/rtf, application/rtploopback, application/rtx, application/samlassertion+xml, application/samlmetadata+xml, application/sbe, application/sbml+xml, application/scaip+xml, application/scim+json, application/scvp-cv-request, application/scvp-cv-response, application/scvp-vp-request, application/scvp-vp-response, application/sdp, application/secevent+jwt, application/senml+cbor, application/senml+json, application/senml+xml, application/senml-etch+cbor, application/senml-etch+json, application/senml-exi, application/sensml+cbor, application/sensml+json, application/sensml+xml, application/sensml-exi, application/sep+xml, application/sep-exi, application/session-info, application/set-payment, application/set-payment-initiation, application/set-registration, application/set-registration-initiation, application/sgml, application/sgml-open-catalog, application/shf+xml, application/sieve, application/simple-filter+xml, application/simple-message-summary, application/simplesymbolcontainer, application/sipc, application/slate, application/smil, application/smil+xml, application/smpte336m, application/soap+fastinfoset, application/soap+xml, application/sparql-query, application/sparql-results+xml, application/spirits-event+xml, application/sql, application/srgs, application/srgs+xml, application/sru+xml, application/ssdl+xml, application/ssml+xml, application/stix+json, application/swid+xml, application/tamp-apex-update, application/tamp-apex-update-confirm, application/tamp-community-update, application/tamp-community-update-confirm, application/tamp-error, application/tamp-sequence-adjust, application/tamp-sequence-adjust-confirm, application/tamp-status-query, application/tamp-status-response, application/tamp-update, application/tamp-update-confirm, application/tar, application/taxii+json, application/td+json, application/tei+xml, application/tetra_isi, application/thraud+xml, application/timestamp-query, application/timestamp-reply, application/timestamped-data, application/tlsrpt+gzip, application/tlsrpt+json, application/tnauthlist, application/toml, application/trickle-ice-sdpfrag, application/trig, application/ttml+xml, application/tve-trigger, application/tzif, application/tzif-leap, application/ulpfec, application/urc-grpsheet+xml, application/urc-ressheet+xml, application/urc-targetdesc+xml, application/urc-uisocketdesc+xml, application/vcard+json, application/vcard+xml, application/vemmi, application/vividence.scriptfile, application/vnd.1000minds.decision-model+xml, application/vnd.3gpp-prose+xml, application/vnd.3gpp-prose-pc3ch+xml, application/vnd.3gpp-v2x-local-service-information, application/vnd.3gpp.access-transfer-events+xml, application/vnd.3gpp.bsf+xml, application/vnd.3gpp.gmop+xml, application/vnd.3gpp.mc-signalling-ear, application/vnd.3gpp.mcdata-affiliation-command+xml, application/vnd.3gpp.mcdata-info+xml, application/vnd.3gpp.mcdata-payload, application/vnd.3gpp.mcdata-service-config+xml, application/vnd.3gpp.mcdata-signalling, application/vnd.3gpp.mcdata-ue-config+xml, application/vnd.3gpp.mcdata-user-profile+xml, application/vnd.3gpp.mcptt-affiliation-command+xml, application/vnd.3gpp.mcptt-floor-request+xml, application/vnd.3gpp.mcptt-info+xml, application/vnd.3gpp.mcptt-location-info+xml, application/vnd.3gpp.mcptt-mbms-usage-info+xml, application/vnd.3gpp.mcptt-service-config+xml, application/vnd.3gpp.mcptt-signed+xml, application/vnd.3gpp.mcptt-ue-config+xml, application/vnd.3gpp.mcptt-ue-init-config+xml, application/vnd.3gpp.mcptt-user-profile+xml, application/vnd.3gpp.mcvideo-affiliation-command+xml, application/vnd.3gpp.mcvideo-affiliation-info+xml, application/vnd.3gpp.mcvideo-info+xml, application/vnd.3gpp.mcvideo-location-info+xml, application/vnd.3gpp.mcvideo-mbms-usage-info+xml, application/vnd.3gpp.mcvideo-service-config+xml, application/vnd.3gpp.mcvideo-transmission-request+xml, application/vnd.3gpp.mcvideo-ue-config+xml, application/vnd.3gpp.mcvideo-user-profile+xml, application/vnd.3gpp.mid-call+xml, application/vnd.3gpp.pic-bw-large, application/vnd.3gpp.pic-bw-small, application/vnd.3gpp.pic-bw-var, application/vnd.3gpp.sms, application/vnd.3gpp.sms+xml, application/vnd.3gpp.srvcc-ext+xml, application/vnd.3gpp.srvcc-info+xml, application/vnd.3gpp.state-and-event-info+xml, application/vnd.3gpp.ussd+xml, application/vnd.3gpp2.bcmcsinfo+xml, application/vnd.3gpp2.sms, application/vnd.3gpp2.tcap, application/vnd.3lightssoftware.imagescal, application/vnd.3m.post-it-notes, application/vnd.accpac.simply.aso, application/vnd.accpac.simply.imp, application/vnd.acucobol, application/vnd.acucorp, application/vnd.adobe.air-application-installer-package+zip, application/vnd.adobe.flash.movie, application/vnd.adobe.formscentral.fcdt, application/vnd.adobe.fxp, application/vnd.adobe.partial-upload, application/vnd.adobe.xdp+xml, application/vnd.adobe.xfdf, application/vnd.aether.imp, application/vnd.afpc.afplinedata, application/vnd.afpc.afplinedata-pagedef, application/vnd.afpc.foca-charset, application/vnd.afpc.foca-codedfont, application/vnd.afpc.foca-codepage, application/vnd.afpc.modca, application/vnd.afpc.modca-formdef, application/vnd.afpc.modca-mediummap, application/vnd.afpc.modca-objectcontainer, application/vnd.afpc.modca-overlay, application/vnd.afpc.modca-pagesegment, application/vnd.ah-barcode, application/vnd.ahead.space, application/vnd.airzip.filesecure.azf, application/vnd.airzip.filesecure.azs, application/vnd.amadeus+json, application/vnd.amazon.ebook, application/vnd.amazon.mobi8-ebook, application/vnd.americandynamics.acc, application/vnd.amiga.ami, application/vnd.amundsen.maze+xml, application/vnd.android.ota, application/vnd.android.package-archive, application/vnd.anki, application/vnd.anser-web-certificate-issue-initiation, application/vnd.anser-web-funds-transfer-initiation, application/vnd.antix.game-component, application/vnd.apache.thrift.binary, application/vnd.apache.thrift.compact, application/vnd.apache.thrift.json, application/vnd.api+json, application/vnd.aplextor.warrp+json, application/vnd.apothekende.reservation+json, application/vnd.apple.installer+xml, application/vnd.apple.keynote, application/vnd.apple.mpegurl, application/vnd.apple.numbers, application/vnd.apple.pages, application/vnd.apple.pkpass, application/vnd.arastra.swi, application/vnd.aristanetworks.swi, application/vnd.artisan+json, application/vnd.artsquare, application/vnd.astraea-software.iota, application/vnd.audiograph, application/vnd.autopackage, application/vnd.avalon+json, application/vnd.avistar+xml, application/vnd.balsamiq.bmml+xml, application/vnd.balsamiq.bmpr, application/vnd.banana-accounting, application/vnd.bbf.usp.error, application/vnd.bbf.usp.msg, application/vnd.bbf.usp.msg+json, application/vnd.bekitzur-stech+json, application/vnd.bint.med-content, application/vnd.biopax.rdf+xml, application/vnd.blink-idb-value-wrapper, application/vnd.blueice.multipass, application/vnd.bluetooth.ep.oob, application/vnd.bluetooth.le.oob, application/vnd.bmi, application/vnd.bpf, application/vnd.bpf3, application/vnd.businessobjects, application/vnd.byu.uapi+json, application/vnd.cab-jscript, application/vnd.canon-cpdl, application/vnd.canon-lips, application/vnd.capasystems-pg+json, application/vnd.cendio.thinlinc.clientconf, application/vnd.century-systems.tcp_stream, application/vnd.chemdraw+xml, application/vnd.chess-pgn, application/vnd.chipnuts.karaoke-mmd, application/vnd.ciedi, application/vnd.cinderella, application/vnd.cirpack.isdn-ext, application/vnd.citationstyles.style+xml, application/vnd.claymore, application/vnd.cloanto.rp9, application/vnd.clonk.c4group, application/vnd.cluetrust.cartomobile-config, application/vnd.cluetrust.cartomobile-config-pkg, application/vnd.coffeescript, application/vnd.collabio.xodocuments.document, application/vnd.collabio.xodocuments.document-template, application/vnd.collabio.xodocuments.presentation, application/vnd.collabio.xodocuments.presentation-template, application/vnd.collabio.xodocuments.spreadsheet, application/vnd.collabio.xodocuments.spreadsheet-template, application/vnd.collection+json, application/vnd.collection.doc+json, application/vnd.collection.next+json, application/vnd.comicbook+zip, application/vnd.comicbook-rar, application/vnd.commerce-battelle, application/vnd.commonspace, application/vnd.contact.cmsg, application/vnd.coreos.ignition+json, application/vnd.cosmocaller, application/vnd.crick.clicker, application/vnd.crick.clicker.keyboard, application/vnd.crick.clicker.palette, application/vnd.crick.clicker.template, application/vnd.crick.clicker.wordbank, application/vnd.criticaltools.wbs+xml, application/vnd.cryptii.pipe+json, application/vnd.crypto-shade-file, application/vnd.ctc-posml, application/vnd.ctct.ws+xml, application/vnd.cups-pdf, application/vnd.cups-postscript, application/vnd.cups-ppd, application/vnd.cups-raster, application/vnd.cups-raw, application/vnd.curl, application/vnd.curl.car, application/vnd.curl.pcurl, application/vnd.cyan.dean.root+xml, application/vnd.cybank, application/vnd.d2l.coursepackage1p0+zip, application/vnd.dart, application/vnd.data-vision.rdz, application/vnd.datapackage+json, application/vnd.dataresource+json, application/vnd.dbf, application/vnd.debian.binary-package, application/vnd.dece.data, application/vnd.dece.ttml+xml, application/vnd.dece.unspecified, application/vnd.dece.zip, application/vnd.denovo.fcselayout-link, application/vnd.desmume.movie, application/vnd.dir-bi.plate-dl-nosuffix, application/vnd.dm.delegation+xml, application/vnd.dna, application/vnd.document+json, application/vnd.dolby.mlp, application/vnd.dolby.mobile.1, application/vnd.dolby.mobile.2, application/vnd.doremir.scorecloud-binary-document, application/vnd.dpgraph, application/vnd.dreamfactory, application/vnd.drive+json, application/vnd.ds-keypoint, application/vnd.dtg.local, application/vnd.dtg.local.flash, application/vnd.dtg.local.html, application/vnd.dvb.ait, application/vnd.dvb.dvbisl+xml, application/vnd.dvb.dvbj, application/vnd.dvb.esgcontainer, application/vnd.dvb.ipdcdftnotifaccess, application/vnd.dvb.ipdcesgaccess, application/vnd.dvb.ipdcesgaccess2, application/vnd.dvb.ipdcesgpdd, application/vnd.dvb.ipdcroaming, application/vnd.dvb.iptv.alfec-base, application/vnd.dvb.iptv.alfec-enhancement, application/vnd.dvb.notif-aggregate-root+xml, application/vnd.dvb.notif-container+xml, application/vnd.dvb.notif-generic+xml, application/vnd.dvb.notif-ia-msglist+xml, application/vnd.dvb.notif-ia-registration-request+xml, application/vnd.dvb.notif-ia-registration-response+xml, application/vnd.dvb.notif-init+xml, application/vnd.dvb.pfr, application/vnd.dvb.service, application/vnd.dxr, application/vnd.dynageo, application/vnd.dzr, application/vnd.easykaraoke.cdgdownload, application/vnd.ecdis-update, application/vnd.ecip.rlp, application/vnd.ecowin.chart, application/vnd.ecowin.filerequest, application/vnd.ecowin.fileupdate, application/vnd.ecowin.series, application/vnd.ecowin.seriesrequest, application/vnd.ecowin.seriesupdate, application/vnd.efi.img, application/vnd.efi.iso, application/vnd.emclient.accessrequest+xml, application/vnd.enliven, application/vnd.enphase.envoy, application/vnd.eprints.data+xml, application/vnd.epson.esf, application/vnd.epson.msf, application/vnd.epson.quickanime, application/vnd.epson.salt, application/vnd.epson.ssf, application/vnd.ericsson.quickcall, application/vnd.espass-espass+zip, application/vnd.eszigno3+xml, application/vnd.etsi.aoc+xml, application/vnd.etsi.asic-e+zip, application/vnd.etsi.asic-s+zip, application/vnd.etsi.cug+xml, application/vnd.etsi.iptvcommand+xml, application/vnd.etsi.iptvdiscovery+xml, application/vnd.etsi.iptvprofile+xml, application/vnd.etsi.iptvsad-bc+xml, application/vnd.etsi.iptvsad-cod+xml, application/vnd.etsi.iptvsad-npvr+xml, application/vnd.etsi.iptvservice+xml, application/vnd.etsi.iptvsync+xml, application/vnd.etsi.iptvueprofile+xml, application/vnd.etsi.mcid+xml, application/vnd.etsi.mheg5, application/vnd.etsi.overload-control-policy-dataset+xml, application/vnd.etsi.pstn+xml, application/vnd.etsi.sci+xml, application/vnd.etsi.simservs+xml, application/vnd.etsi.timestamp-token, application/vnd.etsi.tsl+xml, application/vnd.etsi.tsl.der, application/vnd.eudora.data, application/vnd.evolv.ecig.profile, application/vnd.evolv.ecig.settings, application/vnd.evolv.ecig.theme, application/vnd.exstream-empower+zip, application/vnd.exstream-package, application/vnd.ezpix-album, application/vnd.ezpix-package, application/vnd.f-secure.mobile, application/vnd.fastcopy-disk-image, application/vnd.fdf, application/vnd.fdsn.mseed, application/vnd.fdsn.seed, application/vnd.ffsns, application/vnd.ficlab.flb+zip, application/vnd.filmit.zfc, application/vnd.fints, application/vnd.firemonkeys.cloudcell, application/vnd.flographit, application/vnd.fluxtime.clip, application/vnd.font-fontforge-sfd, application/vnd.framemaker, application/vnd.frogans.fnc, application/vnd.frogans.ltf, application/vnd.fsc.weblaunch, application/vnd.fujitsu.oasys, application/vnd.fujitsu.oasys2, application/vnd.fujitsu.oasys3, application/vnd.fujitsu.oasysgp, application/vnd.fujitsu.oasysprs, application/vnd.fujixerox.art-ex, application/vnd.fujixerox.art4, application/vnd.fujixerox.ddd, application/vnd.fujixerox.docuworks, application/vnd.fujixerox.docuworks.binder, application/vnd.fujixerox.docuworks.container, application/vnd.fujixerox.hbpl, application/vnd.fut-misnet, application/vnd.futoin+cbor, application/vnd.futoin+json, application/vnd.fuzzysheet, application/vnd.genomatix.tuxedo, application/vnd.gentics.grd+json, application/vnd.geo+json, application/vnd.geocube+xml, application/vnd.geogebra.file, application/vnd.geogebra.tool, application/vnd.geometry-explorer, application/vnd.geonext, application/vnd.geoplan, application/vnd.geospace, application/vnd.gerber, application/vnd.globalplatform.card-content-mgt, application/vnd.globalplatform.card-content-mgt-response, application/vnd.gmx, application/vnd.google-apps.document, application/vnd.google-apps.presentation, application/vnd.google-apps.spreadsheet, application/vnd.google-earth.kml+xml, application/vnd.google-earth.kmz, application/vnd.gov.sk.e-form+xml, application/vnd.gov.sk.e-form+zip, application/vnd.gov.sk.xmldatacontainer+xml, application/vnd.grafeq, application/vnd.gridmp, application/vnd.groove-account, application/vnd.groove-help, application/vnd.groove-identity-message, application/vnd.groove-injector, application/vnd.groove-tool-message, application/vnd.groove-tool-template, application/vnd.groove-vcard, application/vnd.hal+json, application/vnd.hal+xml, application/vnd.handheld-entertainment+xml, application/vnd.hbci, application/vnd.hc+json, application/vnd.hcl-bireports, application/vnd.hdt, application/vnd.heroku+json, application/vnd.hhe.lesson-player, application/vnd.hp-hpgl, application/vnd.hp-hpid, application/vnd.hp-hps, application/vnd.hp-jlyt, application/vnd.hp-pcl, application/vnd.hp-pclxl, application/vnd.httphone, application/vnd.hydrostatix.sof-data, application/vnd.hyper+json, application/vnd.hyper-item+json, application/vnd.hyperdrive+json, application/vnd.hzn-3d-crossword, application/vnd.ibm.afplinedata, application/vnd.ibm.electronic-media, application/vnd.ibm.minipay, application/vnd.ibm.modcap, application/vnd.ibm.rights-management, application/vnd.ibm.secure-container, application/vnd.iccprofile, application/vnd.ieee.1905, application/vnd.igloader, application/vnd.imagemeter.folder+zip, application/vnd.imagemeter.image+zip, application/vnd.immervision-ivp, application/vnd.immervision-ivu, application/vnd.ims.imsccv1p1, application/vnd.ims.imsccv1p2, application/vnd.ims.imsccv1p3, application/vnd.ims.lis.v2.result+json, application/vnd.ims.lti.v2.toolconsumerprofile+json, application/vnd.ims.lti.v2.toolproxy+json, application/vnd.ims.lti.v2.toolproxy.id+json, application/vnd.ims.lti.v2.toolsettings+json, application/vnd.ims.lti.v2.toolsettings.simple+json, application/vnd.informedcontrol.rms+xml, application/vnd.informix-visionary, application/vnd.infotech.project, application/vnd.infotech.project+xml, application/vnd.innopath.wamp.notification, application/vnd.insors.igm, application/vnd.intercon.formnet, application/vnd.intergeo, application/vnd.intertrust.digibox, application/vnd.intertrust.nncp, application/vnd.intu.qbo, application/vnd.intu.qfx, application/vnd.iptc.g2.catalogitem+xml, application/vnd.iptc.g2.conceptitem+xml, application/vnd.iptc.g2.knowledgeitem+xml, application/vnd.iptc.g2.newsitem+xml, application/vnd.iptc.g2.newsmessage+xml, application/vnd.iptc.g2.packageitem+xml, application/vnd.iptc.g2.planningitem+xml, application/vnd.ipunplugged.rcprofile, application/vnd.irepository.package+xml, application/vnd.is-xpr, application/vnd.isac.fcs, application/vnd.iso11783-10+zip, application/vnd.jam, application/vnd.japannet-directory-service, application/vnd.japannet-jpnstore-wakeup, application/vnd.japannet-payment-wakeup, application/vnd.japannet-registration, application/vnd.japannet-registration-wakeup, application/vnd.japannet-setstore-wakeup, application/vnd.japannet-verification, application/vnd.japannet-verification-wakeup, application/vnd.jcp.javame.midlet-rms, application/vnd.jisp, application/vnd.joost.joda-archive, application/vnd.jsk.isdn-ngn, application/vnd.kahootz, application/vnd.kde.karbon, application/vnd.kde.kchart, application/vnd.kde.kformula, application/vnd.kde.kivio, application/vnd.kde.kontour, application/vnd.kde.kpresenter, application/vnd.kde.kspread, application/vnd.kde.kword, application/vnd.kenameaapp, application/vnd.kidspiration, application/vnd.kinar, application/vnd.koan, application/vnd.kodak-descriptor, application/vnd.las, application/vnd.las.las+json, application/vnd.las.las+xml, application/vnd.laszip, application/vnd.leap+json, application/vnd.liberty-request+xml, application/vnd.llamagraphics.life-balance.desktop, application/vnd.llamagraphics.life-balance.exchange+xml, application/vnd.logipipe.circuit+zip, application/vnd.loom, application/vnd.lotus-1-2-3, application/vnd.lotus-approach, application/vnd.lotus-freelance, application/vnd.lotus-notes, application/vnd.lotus-organizer, application/vnd.lotus-screencam, application/vnd.lotus-wordpro, application/vnd.macports.portpkg, application/vnd.mapbox-vector-tile, application/vnd.marlin.drm.actiontoken+xml, application/vnd.marlin.drm.conftoken+xml, application/vnd.marlin.drm.license+xml, application/vnd.marlin.drm.mdcf, application/vnd.mason+json, application/vnd.maxmind.maxmind-db, application/vnd.mcd, application/vnd.medcalcdata, application/vnd.mediastation.cdkey, application/vnd.meridian-slingshot, application/vnd.mfer, application/vnd.mfmp, application/vnd.micro+json, application/vnd.micrografx.flo, application/vnd.micrografx.igx, application/vnd.microsoft.portable-executable, application/vnd.microsoft.windows.thumbnail-cache, application/vnd.miele+json, application/vnd.mif, application/vnd.minisoft-hp3000-save, application/vnd.mitsubishi.misty-guard.trustweb, application/vnd.mobius.daf, application/vnd.mobius.dis, application/vnd.mobius.mbk, application/vnd.mobius.mqy, application/vnd.mobius.msl, application/vnd.mobius.plc, application/vnd.mobius.txf, application/vnd.mophun.application, application/vnd.mophun.certificate, application/vnd.motorola.flexsuite, application/vnd.motorola.flexsuite.adsi, application/vnd.motorola.flexsuite.fis, application/vnd.motorola.flexsuite.gotap, application/vnd.motorola.flexsuite.kmr, application/vnd.motorola.flexsuite.ttc, application/vnd.motorola.flexsuite.wem, application/vnd.motorola.iprm, application/vnd.mozilla.xul+xml, application/vnd.ms-3mfdocument, application/vnd.ms-artgalry, application/vnd.ms-asf, application/vnd.ms-cab-compressed, application/vnd.ms-color.iccprofile, application/vnd.ms-excel, application/vnd.ms-excel.addin.macroenabled.12, application/vnd.ms-excel.sheet.binary.macroenabled.12, application/vnd.ms-excel.sheet.macroenabled.12, application/vnd.ms-excel.template.macroenabled.12, application/vnd.ms-fontobject, application/vnd.ms-htmlhelp, application/vnd.ms-ims, application/vnd.ms-lrm, application/vnd.ms-office.activex+xml, application/vnd.ms-officetheme, application/vnd.ms-opentype, application/vnd.ms-outlook, application/vnd.ms-package.obfuscated-opentype, application/vnd.ms-pki.seccat, application/vnd.ms-pki.stl, application/vnd.ms-playready.initiator+xml, application/vnd.ms-powerpoint, application/vnd.ms-powerpoint.addin.macroenabled.12, application/vnd.ms-powerpoint.presentation.macroenabled.12, application/vnd.ms-powerpoint.slide.macroenabled.12, application/vnd.ms-powerpoint.slideshow.macroenabled.12, application/vnd.ms-powerpoint.template.macroenabled.12, application/vnd.ms-printdevicecapabilities+xml, application/vnd.ms-printing.printticket+xml, application/vnd.ms-printschematicket+xml, application/vnd.ms-project, application/vnd.ms-tnef, application/vnd.ms-windows.devicepairing, application/vnd.ms-windows.nwprinting.oob, application/vnd.ms-windows.printerpairing, application/vnd.ms-windows.wsd.oob, application/vnd.ms-wmdrm.lic-chlg-req, application/vnd.ms-wmdrm.lic-resp, application/vnd.ms-wmdrm.meter-chlg-req, application/vnd.ms-wmdrm.meter-resp, application/vnd.ms-word.document.macroenabled.12, application/vnd.ms-word.template.macroenabled.12, application/vnd.ms-works, application/vnd.ms-wpl, application/vnd.ms-xpsdocument, application/vnd.msa-disk-image, application/vnd.mseq, application/vnd.msign, application/vnd.multiad.creator, application/vnd.multiad.creator.cif, application/vnd.music-niff, application/vnd.musician, application/vnd.muvee.style, application/vnd.mynfc, application/vnd.ncd.control, application/vnd.ncd.reference, application/vnd.nearst.inv+json, application/vnd.nervana, application/vnd.netfpx, application/vnd.neurolanguage.nlu, application/vnd.nimn, application/vnd.nintendo.nitro.rom, application/vnd.nintendo.snes.rom, application/vnd.nitf, application/vnd.noblenet-directory, application/vnd.noblenet-sealer, application/vnd.noblenet-web, application/vnd.nokia.catalogs, application/vnd.nokia.conml+wbxml, application/vnd.nokia.conml+xml, application/vnd.nokia.iptv.config+xml, application/vnd.nokia.isds-radio-presets, application/vnd.nokia.landmark+wbxml, application/vnd.nokia.landmark+xml, application/vnd.nokia.landmarkcollection+xml, application/vnd.nokia.n-gage.ac+xml, application/vnd.nokia.n-gage.data, application/vnd.nokia.n-gage.symbian.install, application/vnd.nokia.ncd, application/vnd.nokia.pcd+wbxml, application/vnd.nokia.pcd+xml, application/vnd.nokia.radio-preset, application/vnd.nokia.radio-presets, application/vnd.novadigm.edm, application/vnd.novadigm.edx, application/vnd.novadigm.ext, application/vnd.ntt-local.content-share, application/vnd.ntt-local.file-transfer, application/vnd.ntt-local.ogw_remote-access, application/vnd.ntt-local.sip-ta_remote, application/vnd.ntt-local.sip-ta_tcp_stream, application/vnd.oasis.opendocument.chart, application/vnd.oasis.opendocument.chart-template, application/vnd.oasis.opendocument.database, application/vnd.oasis.opendocument.formula, application/vnd.oasis.opendocument.formula-template, application/vnd.oasis.opendocument.graphics, application/vnd.oasis.opendocument.graphics-template, application/vnd.oasis.opendocument.image, application/vnd.oasis.opendocument.image-template, application/vnd.oasis.opendocument.presentation, application/vnd.oasis.opendocument.presentation-template, application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.spreadsheet-template, application/vnd.oasis.opendocument.text, application/vnd.oasis.opendocument.text-master, application/vnd.oasis.opendocument.text-template, application/vnd.oasis.opendocument.text-web, application/vnd.obn, application/vnd.ocf+cbor, application/vnd.oci.image.manifest.v1+json, application/vnd.oftn.l10n+json, application/vnd.oipf.contentaccessdownload+xml, application/vnd.oipf.contentaccessstreaming+xml, application/vnd.oipf.cspg-hexbinary, application/vnd.oipf.dae.svg+xml, application/vnd.oipf.dae.xhtml+xml, application/vnd.oipf.mippvcontrolmessage+xml, application/vnd.oipf.pae.gem, application/vnd.oipf.spdiscovery+xml, application/vnd.oipf.spdlist+xml, application/vnd.oipf.ueprofile+xml, application/vnd.oipf.userprofile+xml, application/vnd.olpc-sugar, application/vnd.oma-scws-config, application/vnd.oma-scws-http-request, application/vnd.oma-scws-http-response, application/vnd.oma.bcast.associated-procedure-parameter+xml, application/vnd.oma.bcast.drm-trigger+xml, application/vnd.oma.bcast.imd+xml, application/vnd.oma.bcast.ltkm, application/vnd.oma.bcast.notification+xml, application/vnd.oma.bcast.provisioningtrigger, application/vnd.oma.bcast.sgboot, application/vnd.oma.bcast.sgdd+xml, application/vnd.oma.bcast.sgdu, application/vnd.oma.bcast.simple-symbol-container, application/vnd.oma.bcast.smartcard-trigger+xml, application/vnd.oma.bcast.sprov+xml, application/vnd.oma.bcast.stkm, application/vnd.oma.cab-address-book+xml, application/vnd.oma.cab-feature-handler+xml, application/vnd.oma.cab-pcc+xml, application/vnd.oma.cab-subs-invite+xml, application/vnd.oma.cab-user-prefs+xml, application/vnd.oma.dcd, application/vnd.oma.dcdc, application/vnd.oma.dd2+xml, application/vnd.oma.drm.risd+xml, application/vnd.oma.group-usage-list+xml, application/vnd.oma.lwm2m+json, application/vnd.oma.lwm2m+tlv, application/vnd.oma.pal+xml, application/vnd.oma.poc.detailed-progress-report+xml, application/vnd.oma.poc.final-report+xml, application/vnd.oma.poc.groups+xml, application/vnd.oma.poc.invocation-descriptor+xml, application/vnd.oma.poc.optimized-progress-report+xml, application/vnd.oma.push, application/vnd.oma.scidm.messages+xml, application/vnd.oma.xcap-directory+xml, application/vnd.omads-email+xml, application/vnd.omads-file+xml, application/vnd.omads-folder+xml, application/vnd.omaloc-supl-init, application/vnd.onepager, application/vnd.onepagertamp, application/vnd.onepagertamx, application/vnd.onepagertat, application/vnd.onepagertatp, application/vnd.onepagertatx, application/vnd.openblox.game+xml, application/vnd.openblox.game-binary, application/vnd.openeye.oeb, application/vnd.openofficeorg.extension, application/vnd.openstreetmap.data+xml, application/vnd.openxmlformats-officedocument.custom-properties+xml, application/vnd.openxmlformats-officedocument.customxmlproperties+xml, application/vnd.openxmlformats-officedocument.drawing+xml, application/vnd.openxmlformats-officedocument.drawingml.chart+xml, application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml, application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml, application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml, application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml, application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml, application/vnd.openxmlformats-officedocument.extended-properties+xml, application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml, application/vnd.openxmlformats-officedocument.presentationml.comments+xml, application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml, application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml, application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml, application/vnd.openxmlformats-officedocument.presentationml.presentation, application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml, application/vnd.openxmlformats-officedocument.presentationml.presprops+xml, application/vnd.openxmlformats-officedocument.presentationml.slide, application/vnd.openxmlformats-officedocument.presentationml.slide+xml, application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml, application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml, application/vnd.openxmlformats-officedocument.presentationml.slideshow, application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml, application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml, application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml, application/vnd.openxmlformats-officedocument.presentationml.tags+xml, application/vnd.openxmlformats-officedocument.presentationml.template, application/vnd.openxmlformats-officedocument.presentationml.template.main+xml, application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.template, application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml, application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml, application/vnd.openxmlformats-officedocument.theme+xml, application/vnd.openxmlformats-officedocument.themeoverride+xml, application/vnd.openxmlformats-officedocument.vmldrawing, application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.template, application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml, application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml, application/vnd.openxmlformats-package.core-properties+xml, application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml, application/vnd.openxmlformats-package.relationships+xml, application/vnd.oracle.resource+json, application/vnd.orange.indata, application/vnd.osa.netdeploy, application/vnd.osgeo.mapguide.package, application/vnd.osgi.bundle, application/vnd.osgi.dp, application/vnd.osgi.subsystem, application/vnd.otps.ct-kip+xml, application/vnd.oxli.countgraph, application/vnd.pagerduty+json, application/vnd.palm, application/vnd.panoply, application/vnd.paos.xml, application/vnd.patentdive, application/vnd.patientecommsdoc, application/vnd.pawaafile, application/vnd.pcos, application/vnd.pg.format, application/vnd.pg.osasli, application/vnd.piaccess.application-licence, application/vnd.picsel, application/vnd.pmi.widget, application/vnd.poc.group-advertisement+xml, application/vnd.pocketlearn, application/vnd.powerbuilder6, application/vnd.powerbuilder6-s, application/vnd.powerbuilder7, application/vnd.powerbuilder7-s, application/vnd.powerbuilder75, application/vnd.powerbuilder75-s, application/vnd.preminet, application/vnd.previewsystems.box, application/vnd.proteus.magazine, application/vnd.psfs, application/vnd.publishare-delta-tree, application/vnd.pvi.ptid1, application/vnd.pwg-multiplexed, application/vnd.pwg-xhtml-print+xml, application/vnd.qualcomm.brew-app-res, application/vnd.quarantainenet, application/vnd.quark.quarkxpress, application/vnd.quobject-quoxdocument, application/vnd.radisys.moml+xml, application/vnd.radisys.msml+xml, application/vnd.radisys.msml-audit+xml, application/vnd.radisys.msml-audit-conf+xml, application/vnd.radisys.msml-audit-conn+xml, application/vnd.radisys.msml-audit-dialog+xml, application/vnd.radisys.msml-audit-stream+xml, application/vnd.radisys.msml-conf+xml, application/vnd.radisys.msml-dialog+xml, application/vnd.radisys.msml-dialog-base+xml, application/vnd.radisys.msml-dialog-fax-detect+xml, application/vnd.radisys.msml-dialog-fax-sendrecv+xml, application/vnd.radisys.msml-dialog-group+xml, application/vnd.radisys.msml-dialog-speech+xml, application/vnd.radisys.msml-dialog-transform+xml, application/vnd.rainstor.data, application/vnd.rapid, application/vnd.rar, application/vnd.realvnc.bed, application/vnd.recordare.musicxml, application/vnd.recordare.musicxml+xml, application/vnd.renlearn.rlprint, application/vnd.restful+json, application/vnd.rig.cryptonote, application/vnd.rim.cod, application/vnd.rn-realmedia, application/vnd.rn-realmedia-vbr, application/vnd.route66.link66+xml, application/vnd.rs-274x, application/vnd.ruckus.download, application/vnd.s3sms, application/vnd.sailingtracker.track, application/vnd.sar, application/vnd.sbm.cid, application/vnd.sbm.mid2, application/vnd.scribus, application/vnd.sealed.3df, application/vnd.sealed.csf, application/vnd.sealed.doc, application/vnd.sealed.eml, application/vnd.sealed.mht, application/vnd.sealed.net, application/vnd.sealed.ppt, application/vnd.sealed.tiff, application/vnd.sealed.xls, application/vnd.sealedmedia.softseal.html, application/vnd.sealedmedia.softseal.pdf, application/vnd.seemail, application/vnd.sema, application/vnd.semd, application/vnd.semf, application/vnd.shade-save-file, application/vnd.shana.informed.formdata, application/vnd.shana.informed.formtemplate, application/vnd.shana.informed.interchange, application/vnd.shana.informed.package, application/vnd.shootproof+json, application/vnd.shopkick+json, application/vnd.shp, application/vnd.shx, application/vnd.sigrok.session, application/vnd.simtech-mindmapper, application/vnd.siren+json, application/vnd.smaf, application/vnd.smart.notebook, application/vnd.smart.teacher, application/vnd.snesdev-page-table, application/vnd.software602.filler.form+xml, application/vnd.software602.filler.form-xml-zip, application/vnd.solent.sdkm+xml, application/vnd.spotfire.dxp, application/vnd.spotfire.sfs, application/vnd.sqlite3, application/vnd.sss-cod, application/vnd.sss-dtf, application/vnd.sss-ntf, application/vnd.stardivision.calc, application/vnd.stardivision.draw, application/vnd.stardivision.impress, application/vnd.stardivision.math, application/vnd.stardivision.writer, application/vnd.stardivision.writer-global, application/vnd.stepmania.package, application/vnd.stepmania.stepchart, application/vnd.street-stream, application/vnd.sun.wadl+xml, application/vnd.sun.xml.calc, application/vnd.sun.xml.calc.template, application/vnd.sun.xml.draw, application/vnd.sun.xml.draw.template, application/vnd.sun.xml.impress, application/vnd.sun.xml.impress.template, application/vnd.sun.xml.math, application/vnd.sun.xml.writer, application/vnd.sun.xml.writer.global, application/vnd.sun.xml.writer.template, application/vnd.sus-calendar, application/vnd.svd, application/vnd.swiftview-ics, application/vnd.symbian.install, application/vnd.syncml+xml, application/vnd.syncml.dm+wbxml, application/vnd.syncml.dm+xml, application/vnd.syncml.dm.notification, application/vnd.syncml.dmddf+wbxml, application/vnd.syncml.dmddf+xml, application/vnd.syncml.dmtnds+wbxml, application/vnd.syncml.dmtnds+xml, application/vnd.syncml.ds.notification, application/vnd.tableschema+json, application/vnd.tao.intent-module-archive, application/vnd.tcpdump.pcap, application/vnd.think-cell.ppttc+json, application/vnd.tmd.mediaflex.api+xml, application/vnd.tml, application/vnd.tmobile-livetv, application/vnd.tri.onesource, application/vnd.trid.tpt, application/vnd.triscape.mxs, application/vnd.trueapp, application/vnd.truedoc, application/vnd.ubisoft.webplayer, application/vnd.ufdl, application/vnd.uiq.theme, application/vnd.umajin, application/vnd.unity, application/vnd.uoml+xml, application/vnd.uplanet.alert, application/vnd.uplanet.alert-wbxml, application/vnd.uplanet.bearer-choice, application/vnd.uplanet.bearer-choice-wbxml, application/vnd.uplanet.cacheop, application/vnd.uplanet.cacheop-wbxml, application/vnd.uplanet.channel, application/vnd.uplanet.channel-wbxml, application/vnd.uplanet.list, application/vnd.uplanet.list-wbxml, application/vnd.uplanet.listcmd, application/vnd.uplanet.listcmd-wbxml, application/vnd.uplanet.signal, application/vnd.uri-map, application/vnd.valve.source.material, application/vnd.vcx, application/vnd.vd-study, application/vnd.vectorworks, application/vnd.vel+json, application/vnd.verimatrix.vcas, application/vnd.veryant.thin, application/vnd.ves.encrypted, application/vnd.vidsoft.vidconference, application/vnd.visio, application/vnd.visionary, application/vnd.vividence.scriptfile, application/vnd.vsf, application/vnd.wap.sic, application/vnd.wap.slc, application/vnd.wap.wbxml, application/vnd.wap.wmlc, application/vnd.wap.wmlscriptc, application/vnd.webturbo, application/vnd.wfa.p2p, application/vnd.wfa.wsc, application/vnd.windows.devicepairing, application/vnd.wmc, application/vnd.wmf.bootstrap, application/vnd.wolfram.mathematica, application/vnd.wolfram.mathematica.package, application/vnd.wolfram.player, application/vnd.wordperfect, application/vnd.wqd, application/vnd.wrq-hp3000-labelled, application/vnd.wt.stf, application/vnd.wv.csp+wbxml, application/vnd.wv.csp+xml, application/vnd.wv.ssp+xml, application/vnd.xacml+json, application/vnd.xara, application/vnd.xfdl, application/vnd.xfdl.webform, application/vnd.xmi+xml, application/vnd.xmpie.cpkg, application/vnd.xmpie.dpkg, application/vnd.xmpie.plan, application/vnd.xmpie.ppkg, application/vnd.xmpie.xlim, application/vnd.yamaha.hv-dic, application/vnd.yamaha.hv-script, application/vnd.yamaha.hv-voice, application/vnd.yamaha.openscoreformat, application/vnd.yamaha.openscoreformat.osfpvg+xml, application/vnd.yamaha.remote-setup, application/vnd.yamaha.smaf-audio, application/vnd.yamaha.smaf-phrase, application/vnd.yamaha.through-ngn, application/vnd.yamaha.tunnel-udpencap, application/vnd.yaoweme, application/vnd.yellowriver-custom-menu, application/vnd.youtube.yt, application/vnd.zul, application/vnd.zzazz.deck+xml, application/voicexml+xml, application/voucher-cms+json, application/vq-rtcpxr, application/wasm, application/watcherinfo+xml, application/webpush-options+json, application/whoispp-query, application/whoispp-response, application/widget, application/winhlp, application/wita, application/wordperfect5.1, application/wsdl+xml, application/wspolicy+xml, application/x-7z-compressed, application/x-abiword, application/x-ace-compressed, application/x-amf, application/x-apple-diskimage, application/x-arj, application/x-authorware-bin, application/x-authorware-map, application/x-authorware-seg, application/x-bcpio, application/x-bdoc, application/x-bittorrent, application/x-blorb, application/x-bzip, application/x-bzip2, application/x-cbr, application/x-cdlink, application/x-cfs-compressed, application/x-chat, application/x-chess-pgn, application/x-chrome-extension, application/x-cocoa, application/x-compress, application/x-conference, application/x-cpio, application/x-csh, application/x-deb, application/x-debian-package, application/x-dgc-compressed, application/x-director, application/x-doom, application/x-dtbncx+xml, application/x-dtbook+xml, application/x-dtbresource+xml, application/x-dvi, application/x-envoy, application/x-eva, application/x-font-bdf, application/x-font-dos, application/x-font-framemaker, application/x-font-ghostscript, application/x-font-libgrx, application/x-font-linux-psf, application/x-font-pcf, application/x-font-snf, application/x-font-speedo, application/x-font-sunos-news, application/x-font-type1, application/x-font-vfont, application/x-freearc, application/x-futuresplash, application/x-gca-compressed, application/x-glulx, application/x-gnumeric, application/x-gramps-xml, application/x-gtar, application/x-gzip, application/x-hdf, application/x-httpd-php, application/x-install-instructions, application/x-iso9660-image, application/x-java-archive-diff, application/x-java-jnlp-file, application/x-javascript, application/x-keepass2, application/x-latex, application/x-lua-bytecode, application/x-lzh-compressed, application/x-makeself, application/x-mie, application/x-mobipocket-ebook, application/x-mpegurl, application/x-ms-application, application/x-ms-shortcut, application/x-ms-wmd, application/x-ms-wmz, application/x-ms-xbap, application/x-msaccess, application/x-msbinder, application/x-mscardfile, application/x-msclip, application/x-msdos-program, application/x-msdownload, application/x-msmediaview, application/x-msmetafile, application/x-msmoney, application/x-mspublisher, application/x-msschedule, application/x-msterminal, application/x-mswrite, application/x-netcdf, application/x-ns-proxy-autoconfig, application/x-nzb, application/x-perl, application/x-pilot, application/x-pkcs12, application/x-pkcs7-certificates, application/x-pkcs7-certreqresp, application/x-pki-message, application/x-rar-compressed, application/x-redhat-package-manager, application/x-research-info-systems, application/x-sea, application/x-sh, application/x-shar, application/x-shockwave-flash, application/x-silverlight-app, application/x-sql, application/x-stuffit, application/x-stuffitx, application/x-subrip, application/x-sv4cpio, application/x-sv4crc, application/x-t3vm-image, application/x-tads, application/x-tar, application/x-tcl, application/x-tex, application/x-tex-tfm, application/x-texinfo, application/x-tgif, application/x-ustar, application/x-virtualbox-hdd, application/x-virtualbox-ova, application/x-virtualbox-ovf, application/x-virtualbox-vbox, application/x-virtualbox-vbox-extpack, application/x-virtualbox-vdi, application/x-virtualbox-vhd, application/x-virtualbox-vmdk, application/x-wais-source, application/x-web-app-manifest+json, application/x-www-form-urlencoded, application/x-x509-ca-cert, application/x-x509-ca-ra-cert, application/x-x509-next-ca-cert, application/x-xfig, application/x-xliff+xml, application/x-xpinstall, application/x-xz, application/x-zmachine, application/x400-bp, application/xacml+xml, application/xaml+xml, application/xcap-att+xml, application/xcap-caps+xml, application/xcap-diff+xml, application/xcap-el+xml, application/xcap-error+xml, application/xcap-ns+xml, application/xcon-conference-info+xml, application/xcon-conference-info-diff+xml, application/xenc+xml, application/xhtml+xml, application/xhtml-voice+xml, application/xliff+xml, application/xml, application/xml-dtd, application/xml-external-parsed-entity, application/xml-patch+xml, application/xmpp+xml, application/xop+xml, application/xproc+xml, application/xslt+xml, application/xspf+xml, application/xv+xml, application/yang, application/yang-data+json, application/yang-data+xml, application/yang-patch+json, application/yang-patch+xml, application/yin+xml, application/zip, application/zlib, application/zstd, audio/1d-interleaved-parityfec, audio/32kadpcm, audio/3gpp, audio/3gpp2, audio/aac, audio/ac3, audio/adpcm, audio/amr, audio/amr-wb, audio/amr-wb+, audio/aptx, audio/asc, audio/atrac-advanced-lossless, audio/atrac-x, audio/atrac3, audio/basic, audio/bv16, audio/bv32, audio/clearmode, audio/cn, audio/dat12, audio/dls, audio/dsr-es201108, audio/dsr-es202050, audio/dsr-es202211, audio/dsr-es202212, audio/dv, audio/dvi4, audio/eac3, audio/encaprtp, audio/evrc, audio/evrc-qcp, audio/evrc0, audio/evrc1, audio/evrcb, audio/evrcb0, audio/evrcb1, audio/evrcnw, audio/evrcnw0, audio/evrcnw1, audio/evrcwb, audio/evrcwb0, audio/evrcwb1, audio/evs, audio/flexfec, audio/fwdred, audio/g711-0, audio/g719, audio/g722, audio/g7221, audio/g723, audio/g726-16, audio/g726-24, audio/g726-32, audio/g726-40, audio/g728, audio/g729, audio/g7291, audio/g729d, audio/g729e, audio/gsm, audio/gsm-efr, audio/gsm-hr-08, audio/ilbc, audio/ip-mr_v2.5, audio/isac, audio/l16, audio/l20, audio/l24, audio/l8, audio/lpc, audio/melp, audio/melp1200, audio/melp2400, audio/melp600, audio/mhas, audio/midi, audio/mobile-xmf, audio/mp3, audio/mp4, audio/mp4a-latm, audio/mpa, audio/mpa-robust, audio/mpeg, audio/mpeg4-generic, audio/musepack, audio/ogg, audio/opus, audio/parityfec, audio/pcma, audio/pcma-wb, audio/pcmu, audio/pcmu-wb, audio/prs.sid, audio/qcelp, audio/raptorfec, audio/red, audio/rtp-enc-aescm128, audio/rtp-midi, audio/rtploopback, audio/rtx, audio/s3m, audio/silk, audio/smv, audio/smv-qcp, audio/smv0, audio/sp-midi, audio/speex, audio/t140c, audio/t38, audio/telephone-event, audio/tetra_acelp, audio/tetra_acelp_bb, audio/tone, audio/uemclip, audio/ulpfec, audio/usac, audio/vdvi, audio/vmr-wb, audio/vnd.3gpp.iufp, audio/vnd.4sb, audio/vnd.audiokoz, audio/vnd.celp, audio/vnd.cisco.nse, audio/vnd.cmles.radio-events, audio/vnd.cns.anp1, audio/vnd.cns.inf1, audio/vnd.dece.audio, audio/vnd.digital-winds, audio/vnd.dlna.adts, audio/vnd.dolby.heaac.1, audio/vnd.dolby.heaac.2, audio/vnd.dolby.mlp, audio/vnd.dolby.mps, audio/vnd.dolby.pl2, audio/vnd.dolby.pl2x, audio/vnd.dolby.pl2z, audio/vnd.dolby.pulse.1, audio/vnd.dra, audio/vnd.dts, audio/vnd.dts.hd, audio/vnd.dts.uhd, audio/vnd.dvb.file, audio/vnd.everad.plj, audio/vnd.hns.audio, audio/vnd.lucent.voice, audio/vnd.ms-playready.media.pya, audio/vnd.nokia.mobile-xmf, audio/vnd.nortel.vbk, audio/vnd.nuera.ecelp4800, audio/vnd.nuera.ecelp7470, audio/vnd.nuera.ecelp9600, audio/vnd.octel.sbc, audio/vnd.presonus.multitrack, audio/vnd.qcelp, audio/vnd.rhetorex.32kadpcm, audio/vnd.rip, audio/vnd.rn-realaudio, audio/vnd.sealedmedia.softseal.mpeg, audio/vnd.vmx.cvsd, audio/vnd.wave, audio/vorbis, audio/vorbis-config, audio/wav, audio/wave, audio/webm, audio/x-aac, audio/x-aiff, audio/x-caf, audio/x-flac, audio/x-m4a, audio/x-matroska, audio/x-mpegurl, audio/x-ms-wax, audio/x-ms-wma, audio/x-pn-realaudio, audio/x-pn-realaudio-plugin, audio/x-realaudio, audio/x-tta, audio/x-wav, audio/xm, chemical/x-cdx, chemical/x-cif, chemical/x-cmdf, chemical/x-cml, chemical/x-csml, chemical/x-pdb, chemical/x-xyz, font/collection, font/otf, font/sfnt, font/ttf, font/woff, font/woff2, image/aces, image/apng, image/avci, image/avcs, image/bmp, image/cgm, image/dicom-rle, image/emf, image/fits, image/g3fax, image/gif, image/heic, image/heic-sequence, image/heif, image/heif-sequence, image/hej2k, image/hsj2, image/ief, image/jls, image/jp2, image/jpeg, image/jph, image/jphc, image/jpm, image/jpx, image/jxr, image/jxra, image/jxrs, image/jxs, image/jxsc, image/jxsi, image/jxss, image/ktx, image/naplps, image/pjpeg, image/png, image/prs.btif, image/prs.pti, image/pwg-raster, image/sgi, image/svg+xml, image/t38, image/tiff, image/tiff-fx, image/vnd.adobe.photoshop, image/vnd.airzip.accelerator.azv, image/vnd.cns.inf2, image/vnd.dece.graphic, image/vnd.djvu, image/vnd.dvb.subtitle, image/vnd.dwg, image/vnd.dxf, image/vnd.fastbidsheet, image/vnd.fpx, image/vnd.fst, image/vnd.fujixerox.edmics-mmr, image/vnd.fujixerox.edmics-rlc, image/vnd.globalgraphics.pgb, image/vnd.microsoft.icon, image/vnd.mix, image/vnd.mozilla.apng, image/vnd.ms-dds, image/vnd.ms-modi, image/vnd.ms-photo, image/vnd.net-fpx, image/vnd.radiance, image/vnd.sealed.png, image/vnd.sealedmedia.softseal.gif, image/vnd.sealedmedia.softseal.jpg, image/vnd.svf, image/vnd.tencent.tap, image/vnd.valve.source.texture, image/vnd.wap.wbmp, image/vnd.xiff, image/vnd.zbrush.pcx, image/webp, image/wmf, image/x-3ds, image/x-cmu-raster, image/x-cmx, image/x-freehand, image/x-icon, image/x-jng, image/x-mrsid-image, image/x-ms-bmp, image/x-pcx, image/x-pict, image/x-portable-anymap, image/x-portable-bitmap, image/x-portable-graymap, image/x-portable-pixmap, image/x-rgb, image/x-tga, image/x-xbitmap, image/x-xcf, image/x-xpixmap, image/x-xwindowdump, message/cpim, message/delivery-status, message/disposition-notification, message/external-body, message/feedback-report, message/global, message/global-delivery-status, message/global-disposition-notification, message/global-headers, message/http, message/imdn+xml, message/news, message/partial, message/rfc822, message/s-http, message/sip, message/sipfrag, message/tracking-status, message/vnd.si.simp, message/vnd.wfa.wsc, model/3mf, model/gltf+json, model/gltf-binary, model/iges, model/mesh, model/mtl, model/obj, model/stl, model/vnd.collada+xml, model/vnd.dwf, model/vnd.flatland.3dml, model/vnd.gdl, model/vnd.gs-gdl, model/vnd.gs.gdl, model/vnd.gtw, model/vnd.moml+xml, model/vnd.mts, model/vnd.opengex, model/vnd.parasolid.transmit.binary, model/vnd.parasolid.transmit.text, model/vnd.rosette.annotated-data-model, model/vnd.usdz+zip, model/vnd.valve.source.compiled-map, model/vnd.vtu, model/vrml, model/x3d+binary, model/x3d+fastinfoset, model/x3d+vrml, model/x3d+xml, model/x3d-vrml, multipart/alternative, multipart/appledouble, multipart/byteranges, multipart/digest, multipart/encrypted, multipart/form-data, multipart/header-set, multipart/mixed, multipart/multilingual, multipart/parallel, multipart/related, multipart/report, multipart/signed, multipart/vnd.bint.med-plus, multipart/voice-message, multipart/x-mixed-replace, text/1d-interleaved-parityfec, text/cache-manifest, text/calendar, text/calender, text/cmd, text/coffeescript, text/css, text/csv, text/csv-schema, text/directory, text/dns, text/ecmascript, text/encaprtp, text/enriched, text/flexfec, text/fwdred, text/grammar-ref-list, text/html, text/jade, text/javascript, text/jcr-cnd, text/jsx, text/less, text/markdown, text/mathml, text/mdx, text/mizar, text/n3, text/parameters, text/parityfec, text/plain, text/provenance-notation, text/prs.fallenstein.rst, text/prs.lines.tag, text/prs.prop.logic, text/raptorfec, text/red, text/rfc822-headers, text/richtext, text/rtf, text/rtp-enc-aescm128, text/rtploopback, text/rtx, text/sgml, text/shex, text/slim, text/strings, text/stylus, text/t140, text/tab-separated-values, text/troff, text/turtle, text/ulpfec, text/uri-list, text/vcard, text/vnd.a, text/vnd.abc, text/vnd.ascii-art, text/vnd.curl, text/vnd.curl.dcurl, text/vnd.curl.mcurl, text/vnd.curl.scurl, text/vnd.debian.copyright, text/vnd.dmclientscript, text/vnd.dvb.subtitle, text/vnd.esmertec.theme-descriptor, text/vnd.ficlab.flt, text/vnd.fly, text/vnd.fmi.flexstor, text/vnd.gml, text/vnd.graphviz, text/vnd.hgl, text/vnd.in3d.3dml, text/vnd.in3d.spot, text/vnd.iptc.newsml, text/vnd.iptc.nitf, text/vnd.latex-z, text/vnd.motorola.reflex, text/vnd.ms-mediapackage, text/vnd.net2phone.commcenter.command, text/vnd.radisys.msml-basic-layout, text/vnd.senx.warpscript, text/vnd.si.uricatalogue, text/vnd.sosi, text/vnd.sun.j2me.app-descriptor, text/vnd.trolltech.linguist, text/vnd.wap.si, text/vnd.wap.sl, text/vnd.wap.wml, text/vnd.wap.wmlscript, text/vtt, text/x-asm, text/x-c, text/x-component, text/x-fortran, text/x-gwt-rpc, text/x-handlebars-template, text/x-java-source, text/x-jquery-tmpl, text/x-lua, text/x-markdown, text/x-nfo, text/x-opml, text/x-org, text/x-pascal, text/x-processing, text/x-sass, text/x-scss, text/x-setext, text/x-sfv, text/x-suse-ymp, text/x-uuencode, text/x-vcalendar, text/x-vcard, text/xml, text/xml-external-parsed-entity, text/yaml, video/1d-interleaved-parityfec, video/3gpp, video/3gpp-tt, video/3gpp2, video/bmpeg, video/bt656, video/celb, video/dv, video/encaprtp, video/flexfec, video/h261, video/h263, video/h263-1998, video/h263-2000, video/h264, video/h264-rcdo, video/h264-svc, video/h265, video/iso.segment, video/jpeg, video/jpeg2000, video/jpm, video/mj2, video/mp1s, video/mp2p, video/mp2t, video/mp4, video/mp4v-es, video/mpeg, video/mpeg4-generic, video/mpv, video/nv, video/ogg, video/parityfec, video/pointer, video/quicktime, video/raptorfec, video/raw, video/rtp-enc-aescm128, video/rtploopback, video/rtx, video/smpte291, video/smpte292m, video/ulpfec, video/vc1, video/vc2, video/vnd.cctv, video/vnd.dece.hd, video/vnd.dece.mobile, video/vnd.dece.mp4, video/vnd.dece.pd, video/vnd.dece.sd, video/vnd.dece.video, video/vnd.directv.mpeg, video/vnd.directv.mpeg-tts, video/vnd.dlna.mpeg-tts, video/vnd.dvb.file, video/vnd.fvt, video/vnd.hns.video, video/vnd.iptvforum.1dparityfec-1010, video/vnd.iptvforum.1dparityfec-2005, video/vnd.iptvforum.2dparityfec-1010, video/vnd.iptvforum.2dparityfec-2005, video/vnd.iptvforum.ttsavc, video/vnd.iptvforum.ttsmpeg2, video/vnd.motorola.video, video/vnd.motorola.videop, video/vnd.mpegurl, video/vnd.ms-playready.media.pyv, video/vnd.nokia.interleaved-multimedia, video/vnd.nokia.mp4vr, video/vnd.nokia.videovoip, video/vnd.objectvideo, video/vnd.radgamettools.bink, video/vnd.radgamettools.smacker, video/vnd.sealed.mpeg1, video/vnd.sealed.mpeg4, video/vnd.sealed.swf, video/vnd.sealedmedia.softseal.mov, video/vnd.uvvu.mp4, video/vnd.vivo, video/vnd.youtube.yt, video/vp8, video/webm, video/x-f4v, video/x-fli, video/x-flv, video/x-m4v, video/x-matroska, video/x-mng, video/x-ms-asf, video/x-ms-vob, video/x-ms-wm, video/x-ms-wmv, video/x-ms-wmx, video/x-ms-wvx, video/x-msvideo, video/x-sgi-movie, video/x-smv, x-conference/x-cooltalk, x-shader/x-fragment, x-shader/x-vertex, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"application/1d-interleaved-parityfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/3gpdash-qoe-report+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/3gpp-ims+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/a2l\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/activemessage\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/activity+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-costmap+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-costmapfilter+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-directory+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-endpointcost+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-endpointcostparams+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-endpointprop+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-endpointpropparams+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-error+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-networkmap+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-networkmapfilter+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-updatestreamcontrol+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/alto-updatestreamparams+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/aml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/andrew-inset\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ez\\\"]},\\\"application/applefile\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/applixware\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"aw\\\"]},\\\"application/atf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/atfx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/atom+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"atom\\\"]},\\\"application/atomcat+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"atomcat\\\"]},\\\"application/atomdeleted+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"atomdeleted\\\"]},\\\"application/atomicmail\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/atomsvc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"atomsvc\\\"]},\\\"application/atsc-dwd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"dwd\\\"]},\\\"application/atsc-dynamic-event-message\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/atsc-held+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"held\\\"]},\\\"application/atsc-rdt+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/atsc-rsat+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rsat\\\"]},\\\"application/atxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/auth-policy+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/bacnet-xdd+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/batch-smtp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/bdoc\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"bdoc\\\"]},\\\"application/beep+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/calendar+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/calendar+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xcs\\\"]},\\\"application/call-completion\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cals-1840\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cap+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/cbor\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cbor-seq\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cccex\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/ccmp+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/ccxml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ccxml\\\"]},\\\"application/cdfx+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"cdfx\\\"]},\\\"application/cdmi-capability\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cdmia\\\"]},\\\"application/cdmi-container\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cdmic\\\"]},\\\"application/cdmi-domain\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cdmid\\\"]},\\\"application/cdmi-object\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cdmio\\\"]},\\\"application/cdmi-queue\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cdmiq\\\"]},\\\"application/cdni\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cea\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cea-2018+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/cellml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/cfw\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/clue+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/clue_info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/cms\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cnrp+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/coap-group+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/coap-payload\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/commonground\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/conference-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/cose\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cose-key\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cose-key-set\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cpl+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/csrattrs\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/csta+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/cstadata+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/csvm+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/cu-seeme\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cu\\\"]},\\\"application/cwt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/cybercash\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dart\\\":{\\\"compressible\\\":true},\\\"application/dash+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mpd\\\"]},\\\"application/dashdelta\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/davmount+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"davmount\\\"]},\\\"application/dca-rft\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dcd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dec-dx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dialog-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/dicom\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dicom+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/dicom+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/dii\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dit\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dns\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dns+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/dns-message\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/docbook+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"dbk\\\"]},\\\"application/dots+cbor\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/dskpp+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/dssc+der\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dssc\\\"]},\\\"application/dssc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xdssc\\\"]},\\\"application/dvcs\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/ecmascript\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ecma\\\",\\\"es\\\"]},\\\"application/edi-consent\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/edi-x12\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/edifact\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/efi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/emergencycalldata.comment+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/emergencycalldata.control+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/emergencycalldata.deviceinfo+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/emergencycalldata.ecall.msd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/emergencycalldata.providerinfo+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/emergencycalldata.serviceinfo+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/emergencycalldata.subscriberinfo+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/emergencycalldata.veds+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/emma+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"emma\\\"]},\\\"application/emotionml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"emotionml\\\"]},\\\"application/encaprtp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/epp+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/epub+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"epub\\\"]},\\\"application/eshop\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/exi\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"exi\\\"]},\\\"application/expect-ct-report+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/fastinfoset\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/fastsoap\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/fdt+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"fdt\\\"]},\\\"application/fhir+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/fhir+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/fido.trusted-apps+json\\\":{\\\"compressible\\\":true},\\\"application/fits\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/flexfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/font-sfnt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/font-tdpfr\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pfr\\\"]},\\\"application/font-woff\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/framework-attributes+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/geo+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"geojson\\\"]},\\\"application/geo+json-seq\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/geopackage+sqlite3\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/geoxacml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/gltf-buffer\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/gml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"gml\\\"]},\\\"application/gpx+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"gpx\\\"]},\\\"application/gxf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"gxf\\\"]},\\\"application/gzip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"gz\\\"]},\\\"application/h224\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/held+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/hjson\\\":{\\\"extensions\\\":[\\\"hjson\\\"]},\\\"application/http\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/hyperstudio\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"stk\\\"]},\\\"application/ibe-key-request+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/ibe-pkg-reply+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/ibe-pp-data\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/iges\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/im-iscomposing+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/index\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/index.cmd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/index.obj\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/index.response\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/index.vnd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/inkml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ink\\\",\\\"inkml\\\"]},\\\"application/iotp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/ipfix\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ipfix\\\"]},\\\"application/ipp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/isup\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/its+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"its\\\"]},\\\"application/java-archive\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"jar\\\",\\\"war\\\",\\\"ear\\\"]},\\\"application/java-serialized-object\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"ser\\\"]},\\\"application/java-vm\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"class\\\"]},\\\"application/javascript\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"js\\\",\\\"mjs\\\"]},\\\"application/jf2feed+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/jose\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/jose+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/jrd+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/json\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"json\\\",\\\"map\\\"]},\\\"application/json-patch+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/json-seq\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/json5\\\":{\\\"extensions\\\":[\\\"json5\\\"]},\\\"application/jsonml+json\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"jsonml\\\"]},\\\"application/jwk+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/jwk-set+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/jwt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/kpml-request+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/kpml-response+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/ld+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"jsonld\\\"]},\\\"application/lgr+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"lgr\\\"]},\\\"application/link-format\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/load-control+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/lost+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"lostxml\\\"]},\\\"application/lostsync+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/lpf+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/lxf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mac-binhex40\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hqx\\\"]},\\\"application/mac-compactpro\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cpt\\\"]},\\\"application/macwriteii\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mads+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mads\\\"]},\\\"application/manifest+json\\\":{\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"webmanifest\\\"]},\\\"application/marc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mrc\\\"]},\\\"application/marcxml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mrcx\\\"]},\\\"application/mathematica\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ma\\\",\\\"nb\\\",\\\"mb\\\"]},\\\"application/mathml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mathml\\\"]},\\\"application/mathml-content+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mathml-presentation+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-associated-procedure-description+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-deregister+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-envelope+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-msk+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-msk-response+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-protection-description+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-reception-report+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-register+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-register-response+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-schedule+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbms-user-service-description+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mbox\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mbox\\\"]},\\\"application/media-policy-dataset+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/media_control+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/mediaservercontrol+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mscml\\\"]},\\\"application/merge-patch+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/metalink+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"metalink\\\"]},\\\"application/metalink4+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"meta4\\\"]},\\\"application/mets+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mets\\\"]},\\\"application/mf4\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mikey\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mipc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mmt-aei+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"maei\\\"]},\\\"application/mmt-usd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"musd\\\"]},\\\"application/mods+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mods\\\"]},\\\"application/moss-keys\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/moss-signature\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mosskey-data\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mosskey-request\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mp21\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"m21\\\",\\\"mp21\\\"]},\\\"application/mp4\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mp4s\\\",\\\"m4p\\\"]},\\\"application/mpeg4-generic\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mpeg4-iod\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mpeg4-iod-xmt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mrb-consumer+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xdf\\\"]},\\\"application/mrb-publish+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xdf\\\"]},\\\"application/msc-ivr+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/msc-mixer+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/msword\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"doc\\\",\\\"dot\\\"]},\\\"application/mud+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/multipart-core\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/mxf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mxf\\\"]},\\\"application/n-quads\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nq\\\"]},\\\"application/n-triples\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nt\\\"]},\\\"application/nasdata\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/news-checkgroups\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"US-ASCII\\\"},\\\"application/news-groupinfo\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"US-ASCII\\\"},\\\"application/news-transmission\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/nlsml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/node\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cjs\\\"]},\\\"application/nss\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/ocsp-request\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/ocsp-response\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/octet-stream\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"bin\\\",\\\"dms\\\",\\\"lrf\\\",\\\"mar\\\",\\\"so\\\",\\\"dist\\\",\\\"distz\\\",\\\"pkg\\\",\\\"bpk\\\",\\\"dump\\\",\\\"elc\\\",\\\"deploy\\\",\\\"exe\\\",\\\"dll\\\",\\\"deb\\\",\\\"dmg\\\",\\\"iso\\\",\\\"img\\\",\\\"msi\\\",\\\"msp\\\",\\\"msm\\\",\\\"buffer\\\"]},\\\"application/oda\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"oda\\\"]},\\\"application/odm+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/odx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/oebps-package+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"opf\\\"]},\\\"application/ogg\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"ogx\\\"]},\\\"application/omdoc+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"omdoc\\\"]},\\\"application/onenote\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"onetoc\\\",\\\"onetoc2\\\",\\\"onetmp\\\",\\\"onepkg\\\"]},\\\"application/oscore\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/oxps\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"oxps\\\"]},\\\"application/p2p-overlay+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"relo\\\"]},\\\"application/parityfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/passport\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/patch-ops-error+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xer\\\"]},\\\"application/pdf\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"pdf\\\"]},\\\"application/pdx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/pem-certificate-chain\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/pgp-encrypted\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"pgp\\\"]},\\\"application/pgp-keys\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/pgp-signature\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"asc\\\",\\\"sig\\\"]},\\\"application/pics-rules\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"prf\\\"]},\\\"application/pidf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/pidf-diff+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/pkcs10\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"p10\\\"]},\\\"application/pkcs12\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/pkcs7-mime\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"p7m\\\",\\\"p7c\\\"]},\\\"application/pkcs7-signature\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"p7s\\\"]},\\\"application/pkcs8\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"p8\\\"]},\\\"application/pkcs8-encrypted\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/pkix-attr-cert\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ac\\\"]},\\\"application/pkix-cert\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cer\\\"]},\\\"application/pkix-crl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"crl\\\"]},\\\"application/pkix-pkipath\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pkipath\\\"]},\\\"application/pkixcmp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pki\\\"]},\\\"application/pls+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"pls\\\"]},\\\"application/poc-settings+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/postscript\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ai\\\",\\\"eps\\\",\\\"ps\\\"]},\\\"application/ppsp-tracker+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/problem+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/problem+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/provenance+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"provx\\\"]},\\\"application/prs.alvestrand.titrax-sheet\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/prs.cww\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cww\\\"]},\\\"application/prs.hpub+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/prs.nprend\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/prs.plucker\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/prs.rdf-xml-crypt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/prs.xsf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/pskc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"pskcxml\\\"]},\\\"application/pvd+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/qsig\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/raml+yaml\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"raml\\\"]},\\\"application/raptorfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/rdap+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/rdf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rdf\\\",\\\"owl\\\"]},\\\"application/reginfo+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rif\\\"]},\\\"application/relax-ng-compact-syntax\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rnc\\\"]},\\\"application/remote-printing\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/reputon+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/resource-lists+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rl\\\"]},\\\"application/resource-lists-diff+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rld\\\"]},\\\"application/rfc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/riscos\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/rlmi+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/rls-services+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rs\\\"]},\\\"application/route-apd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rapd\\\"]},\\\"application/route-s-tsid+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"sls\\\"]},\\\"application/route-usd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rusd\\\"]},\\\"application/rpki-ghostbusters\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gbr\\\"]},\\\"application/rpki-manifest\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mft\\\"]},\\\"application/rpki-publication\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/rpki-roa\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"roa\\\"]},\\\"application/rpki-updown\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/rsd+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rsd\\\"]},\\\"application/rss+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rss\\\"]},\\\"application/rtf\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rtf\\\"]},\\\"application/rtploopback\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/rtx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/samlassertion+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/samlmetadata+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/sbe\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/sbml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"sbml\\\"]},\\\"application/scaip+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/scim+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/scvp-cv-request\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"scq\\\"]},\\\"application/scvp-cv-response\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"scs\\\"]},\\\"application/scvp-vp-request\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"spq\\\"]},\\\"application/scvp-vp-response\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"spp\\\"]},\\\"application/sdp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sdp\\\"]},\\\"application/secevent+jwt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/senml+cbor\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/senml+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/senml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"senmlx\\\"]},\\\"application/senml-etch+cbor\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/senml-etch+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/senml-exi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/sensml+cbor\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/sensml+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/sensml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"sensmlx\\\"]},\\\"application/sensml-exi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/sep+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/sep-exi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/session-info\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/set-payment\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/set-payment-initiation\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"setpay\\\"]},\\\"application/set-registration\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/set-registration-initiation\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"setreg\\\"]},\\\"application/sgml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/sgml-open-catalog\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/shf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"shf\\\"]},\\\"application/sieve\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"siv\\\",\\\"sieve\\\"]},\\\"application/simple-filter+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/simple-message-summary\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/simplesymbolcontainer\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/sipc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/slate\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/smil\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/smil+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"smi\\\",\\\"smil\\\"]},\\\"application/smpte336m\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/soap+fastinfoset\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/soap+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/sparql-query\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rq\\\"]},\\\"application/sparql-results+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"srx\\\"]},\\\"application/spirits-event+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/sql\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/srgs\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gram\\\"]},\\\"application/srgs+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"grxml\\\"]},\\\"application/sru+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"sru\\\"]},\\\"application/ssdl+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ssdl\\\"]},\\\"application/ssml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ssml\\\"]},\\\"application/stix+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/swid+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"swidtag\\\"]},\\\"application/tamp-apex-update\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-apex-update-confirm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-community-update\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-community-update-confirm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-error\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-sequence-adjust\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-sequence-adjust-confirm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-status-query\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-status-response\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-update\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tamp-update-confirm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tar\\\":{\\\"compressible\\\":true},\\\"application/taxii+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/td+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/tei+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"tei\\\",\\\"teicorpus\\\"]},\\\"application/tetra_isi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/thraud+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"tfi\\\"]},\\\"application/timestamp-query\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/timestamp-reply\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/timestamped-data\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tsd\\\"]},\\\"application/tlsrpt+gzip\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tlsrpt+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/tnauthlist\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/toml\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"toml\\\"]},\\\"application/trickle-ice-sdpfrag\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/trig\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/ttml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ttml\\\"]},\\\"application/tve-trigger\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tzif\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/tzif-leap\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/ulpfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/urc-grpsheet+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/urc-ressheet+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rsheet\\\"]},\\\"application/urc-targetdesc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/urc-uisocketdesc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vcard+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vcard+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vemmi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vividence.scriptfile\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/vnd.1000minds.decision-model+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"1km\\\"]},\\\"application/vnd.3gpp-prose+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp-prose-pc3ch+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp-v2x-local-service-information\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.3gpp.access-transfer-events+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.bsf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.gmop+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mc-signalling-ear\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.3gpp.mcdata-affiliation-command+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcdata-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcdata-payload\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.3gpp.mcdata-service-config+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcdata-signalling\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.3gpp.mcdata-ue-config+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcdata-user-profile+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-affiliation-command+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-floor-request+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-location-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-mbms-usage-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-service-config+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-signed+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-ue-config+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-ue-init-config+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcptt-user-profile+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-affiliation-command+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-affiliation-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-location-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-service-config+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-transmission-request+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-ue-config+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mcvideo-user-profile+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.mid-call+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.pic-bw-large\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"plb\\\"]},\\\"application/vnd.3gpp.pic-bw-small\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"psb\\\"]},\\\"application/vnd.3gpp.pic-bw-var\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pvb\\\"]},\\\"application/vnd.3gpp.sms\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.3gpp.sms+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.srvcc-ext+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.srvcc-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.state-and-event-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp.ussd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp2.bcmcsinfo+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.3gpp2.sms\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.3gpp2.tcap\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tcap\\\"]},\\\"application/vnd.3lightssoftware.imagescal\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.3m.post-it-notes\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pwn\\\"]},\\\"application/vnd.accpac.simply.aso\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"aso\\\"]},\\\"application/vnd.accpac.simply.imp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"imp\\\"]},\\\"application/vnd.acucobol\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"acu\\\"]},\\\"application/vnd.acucorp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"atc\\\",\\\"acutc\\\"]},\\\"application/vnd.adobe.air-application-installer-package+zip\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"air\\\"]},\\\"application/vnd.adobe.flash.movie\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.adobe.formscentral.fcdt\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fcdt\\\"]},\\\"application/vnd.adobe.fxp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fxp\\\",\\\"fxpl\\\"]},\\\"application/vnd.adobe.partial-upload\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.adobe.xdp+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xdp\\\"]},\\\"application/vnd.adobe.xfdf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xfdf\\\"]},\\\"application/vnd.aether.imp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.afplinedata\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.afplinedata-pagedef\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.foca-charset\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.foca-codedfont\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.foca-codepage\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.modca\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.modca-formdef\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.modca-mediummap\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.modca-objectcontainer\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.modca-overlay\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.afpc.modca-pagesegment\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ah-barcode\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ahead.space\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ahead\\\"]},\\\"application/vnd.airzip.filesecure.azf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"azf\\\"]},\\\"application/vnd.airzip.filesecure.azs\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"azs\\\"]},\\\"application/vnd.amadeus+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.amazon.ebook\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"azw\\\"]},\\\"application/vnd.amazon.mobi8-ebook\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.americandynamics.acc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"acc\\\"]},\\\"application/vnd.amiga.ami\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ami\\\"]},\\\"application/vnd.amundsen.maze+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.android.ota\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.android.package-archive\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"apk\\\"]},\\\"application/vnd.anki\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.anser-web-certificate-issue-initiation\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cii\\\"]},\\\"application/vnd.anser-web-funds-transfer-initiation\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"fti\\\"]},\\\"application/vnd.antix.game-component\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"atx\\\"]},\\\"application/vnd.apache.thrift.binary\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.apache.thrift.compact\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.apache.thrift.json\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.api+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.aplextor.warrp+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.apothekende.reservation+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.apple.installer+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mpkg\\\"]},\\\"application/vnd.apple.keynote\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"keynote\\\"]},\\\"application/vnd.apple.mpegurl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"m3u8\\\"]},\\\"application/vnd.apple.numbers\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"numbers\\\"]},\\\"application/vnd.apple.pages\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pages\\\"]},\\\"application/vnd.apple.pkpass\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"pkpass\\\"]},\\\"application/vnd.arastra.swi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.aristanetworks.swi\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"swi\\\"]},\\\"application/vnd.artisan+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.artsquare\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.astraea-software.iota\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"iota\\\"]},\\\"application/vnd.audiograph\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"aep\\\"]},\\\"application/vnd.autopackage\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.avalon+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.avistar+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.balsamiq.bmml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"bmml\\\"]},\\\"application/vnd.balsamiq.bmpr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.banana-accounting\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.bbf.usp.error\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.bbf.usp.msg\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.bbf.usp.msg+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.bekitzur-stech+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.bint.med-content\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.biopax.rdf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.blink-idb-value-wrapper\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.blueice.multipass\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mpm\\\"]},\\\"application/vnd.bluetooth.ep.oob\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.bluetooth.le.oob\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.bmi\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"bmi\\\"]},\\\"application/vnd.bpf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.bpf3\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.businessobjects\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rep\\\"]},\\\"application/vnd.byu.uapi+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.cab-jscript\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.canon-cpdl\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.canon-lips\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.capasystems-pg+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.cendio.thinlinc.clientconf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.century-systems.tcp_stream\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.chemdraw+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"cdxml\\\"]},\\\"application/vnd.chess-pgn\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.chipnuts.karaoke-mmd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mmd\\\"]},\\\"application/vnd.ciedi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.cinderella\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cdy\\\"]},\\\"application/vnd.cirpack.isdn-ext\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.citationstyles.style+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"csl\\\"]},\\\"application/vnd.claymore\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cla\\\"]},\\\"application/vnd.cloanto.rp9\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rp9\\\"]},\\\"application/vnd.clonk.c4group\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"c4g\\\",\\\"c4d\\\",\\\"c4f\\\",\\\"c4p\\\",\\\"c4u\\\"]},\\\"application/vnd.cluetrust.cartomobile-config\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"c11amc\\\"]},\\\"application/vnd.cluetrust.cartomobile-config-pkg\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"c11amz\\\"]},\\\"application/vnd.coffeescript\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.collabio.xodocuments.document\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.collabio.xodocuments.document-template\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.collabio.xodocuments.presentation\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.collabio.xodocuments.presentation-template\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.collabio.xodocuments.spreadsheet\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.collabio.xodocuments.spreadsheet-template\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.collection+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.collection.doc+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.collection.next+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.comicbook+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.comicbook-rar\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.commerce-battelle\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.commonspace\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"csp\\\"]},\\\"application/vnd.contact.cmsg\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cdbcmsg\\\"]},\\\"application/vnd.coreos.ignition+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.cosmocaller\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cmc\\\"]},\\\"application/vnd.crick.clicker\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"clkx\\\"]},\\\"application/vnd.crick.clicker.keyboard\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"clkk\\\"]},\\\"application/vnd.crick.clicker.palette\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"clkp\\\"]},\\\"application/vnd.crick.clicker.template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"clkt\\\"]},\\\"application/vnd.crick.clicker.wordbank\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"clkw\\\"]},\\\"application/vnd.criticaltools.wbs+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"wbs\\\"]},\\\"application/vnd.cryptii.pipe+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.crypto-shade-file\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ctc-posml\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pml\\\"]},\\\"application/vnd.ctct.ws+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.cups-pdf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.cups-postscript\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.cups-ppd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ppd\\\"]},\\\"application/vnd.cups-raster\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.cups-raw\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.curl\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.curl.car\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"car\\\"]},\\\"application/vnd.curl.pcurl\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pcurl\\\"]},\\\"application/vnd.cyan.dean.root+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.cybank\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.d2l.coursepackage1p0+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.dart\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"dart\\\"]},\\\"application/vnd.data-vision.rdz\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rdz\\\"]},\\\"application/vnd.datapackage+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dataresource+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dbf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.debian.binary-package\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dece.data\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvf\\\",\\\"uvvf\\\",\\\"uvd\\\",\\\"uvvd\\\"]},\\\"application/vnd.dece.ttml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"uvt\\\",\\\"uvvt\\\"]},\\\"application/vnd.dece.unspecified\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvx\\\",\\\"uvvx\\\"]},\\\"application/vnd.dece.zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvz\\\",\\\"uvvz\\\"]},\\\"application/vnd.denovo.fcselayout-link\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fe_launch\\\"]},\\\"application/vnd.desmume.movie\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dir-bi.plate-dl-nosuffix\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dm.delegation+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dna\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dna\\\"]},\\\"application/vnd.document+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dolby.mlp\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mlp\\\"]},\\\"application/vnd.dolby.mobile.1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dolby.mobile.2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.doremir.scorecloud-binary-document\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dpgraph\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dpg\\\"]},\\\"application/vnd.dreamfactory\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dfac\\\"]},\\\"application/vnd.drive+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ds-keypoint\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"kpxx\\\"]},\\\"application/vnd.dtg.local\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dtg.local.flash\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dtg.local.html\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.ait\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ait\\\"]},\\\"application/vnd.dvb.dvbisl+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dvb.dvbj\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.esgcontainer\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.ipdcdftnotifaccess\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.ipdcesgaccess\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.ipdcesgaccess2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.ipdcesgpdd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.ipdcroaming\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.iptv.alfec-base\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.iptv.alfec-enhancement\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.notif-aggregate-root+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dvb.notif-container+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dvb.notif-generic+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dvb.notif-ia-msglist+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dvb.notif-ia-registration-request+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dvb.notif-ia-registration-response+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dvb.notif-init+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.dvb.pfr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dvb.service\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"svc\\\"]},\\\"application/vnd.dxr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.dynageo\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"geo\\\"]},\\\"application/vnd.dzr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.easykaraoke.cdgdownload\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ecdis-update\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ecip.rlp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ecowin.chart\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mag\\\"]},\\\"application/vnd.ecowin.filerequest\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ecowin.fileupdate\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ecowin.series\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ecowin.seriesrequest\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ecowin.seriesupdate\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.efi.img\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.efi.iso\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.emclient.accessrequest+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.enliven\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nml\\\"]},\\\"application/vnd.enphase.envoy\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.eprints.data+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.epson.esf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"esf\\\"]},\\\"application/vnd.epson.msf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"msf\\\"]},\\\"application/vnd.epson.quickanime\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"qam\\\"]},\\\"application/vnd.epson.salt\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"slt\\\"]},\\\"application/vnd.epson.ssf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ssf\\\"]},\\\"application/vnd.ericsson.quickcall\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.espass-espass+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.eszigno3+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"es3\\\",\\\"et3\\\"]},\\\"application/vnd.etsi.aoc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.asic-e+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.etsi.asic-s+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.etsi.cug+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvcommand+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvdiscovery+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvprofile+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvsad-bc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvsad-cod+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvsad-npvr+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvservice+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvsync+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.iptvueprofile+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.mcid+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.mheg5\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.etsi.overload-control-policy-dataset+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.pstn+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.sci+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.simservs+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.timestamp-token\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.etsi.tsl+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.etsi.tsl.der\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.eudora.data\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.evolv.ecig.profile\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.evolv.ecig.settings\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.evolv.ecig.theme\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.exstream-empower+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.exstream-package\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ezpix-album\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ez2\\\"]},\\\"application/vnd.ezpix-package\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ez3\\\"]},\\\"application/vnd.f-secure.mobile\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.fastcopy-disk-image\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.fdf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fdf\\\"]},\\\"application/vnd.fdsn.mseed\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mseed\\\"]},\\\"application/vnd.fdsn.seed\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"seed\\\",\\\"dataless\\\"]},\\\"application/vnd.ffsns\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ficlab.flb+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.filmit.zfc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.fints\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.firemonkeys.cloudcell\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.flographit\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gph\\\"]},\\\"application/vnd.fluxtime.clip\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ftc\\\"]},\\\"application/vnd.font-fontforge-sfd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.framemaker\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fm\\\",\\\"frame\\\",\\\"maker\\\",\\\"book\\\"]},\\\"application/vnd.frogans.fnc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fnc\\\"]},\\\"application/vnd.frogans.ltf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ltf\\\"]},\\\"application/vnd.fsc.weblaunch\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fsc\\\"]},\\\"application/vnd.fujitsu.oasys\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"oas\\\"]},\\\"application/vnd.fujitsu.oasys2\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"oa2\\\"]},\\\"application/vnd.fujitsu.oasys3\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"oa3\\\"]},\\\"application/vnd.fujitsu.oasysgp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fg5\\\"]},\\\"application/vnd.fujitsu.oasysprs\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"bh2\\\"]},\\\"application/vnd.fujixerox.art-ex\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.fujixerox.art4\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.fujixerox.ddd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ddd\\\"]},\\\"application/vnd.fujixerox.docuworks\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xdw\\\"]},\\\"application/vnd.fujixerox.docuworks.binder\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xbd\\\"]},\\\"application/vnd.fujixerox.docuworks.container\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.fujixerox.hbpl\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.fut-misnet\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.futoin+cbor\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.futoin+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.fuzzysheet\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fzs\\\"]},\\\"application/vnd.genomatix.tuxedo\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"txd\\\"]},\\\"application/vnd.gentics.grd+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.geo+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.geocube+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.geogebra.file\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ggb\\\"]},\\\"application/vnd.geogebra.tool\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ggt\\\"]},\\\"application/vnd.geometry-explorer\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gex\\\",\\\"gre\\\"]},\\\"application/vnd.geonext\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gxt\\\"]},\\\"application/vnd.geoplan\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"g2w\\\"]},\\\"application/vnd.geospace\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"g3w\\\"]},\\\"application/vnd.gerber\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.globalplatform.card-content-mgt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.globalplatform.card-content-mgt-response\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.gmx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gmx\\\"]},\\\"application/vnd.google-apps.document\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"gdoc\\\"]},\\\"application/vnd.google-apps.presentation\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"gslides\\\"]},\\\"application/vnd.google-apps.spreadsheet\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"gsheet\\\"]},\\\"application/vnd.google-earth.kml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"kml\\\"]},\\\"application/vnd.google-earth.kmz\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"kmz\\\"]},\\\"application/vnd.gov.sk.e-form+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.gov.sk.e-form+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.gov.sk.xmldatacontainer+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.grafeq\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gqf\\\",\\\"gqs\\\"]},\\\"application/vnd.gridmp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.groove-account\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gac\\\"]},\\\"application/vnd.groove-help\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ghf\\\"]},\\\"application/vnd.groove-identity-message\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gim\\\"]},\\\"application/vnd.groove-injector\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"grv\\\"]},\\\"application/vnd.groove-tool-message\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gtm\\\"]},\\\"application/vnd.groove-tool-template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tpl\\\"]},\\\"application/vnd.groove-vcard\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"vcg\\\"]},\\\"application/vnd.hal+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.hal+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"hal\\\"]},\\\"application/vnd.handheld-entertainment+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"zmm\\\"]},\\\"application/vnd.hbci\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hbci\\\"]},\\\"application/vnd.hc+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.hcl-bireports\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.hdt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.heroku+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.hhe.lesson-player\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"les\\\"]},\\\"application/vnd.hp-hpgl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hpgl\\\"]},\\\"application/vnd.hp-hpid\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hpid\\\"]},\\\"application/vnd.hp-hps\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hps\\\"]},\\\"application/vnd.hp-jlyt\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jlt\\\"]},\\\"application/vnd.hp-pcl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pcl\\\"]},\\\"application/vnd.hp-pclxl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pclxl\\\"]},\\\"application/vnd.httphone\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.hydrostatix.sof-data\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sfd-hdstx\\\"]},\\\"application/vnd.hyper+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.hyper-item+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.hyperdrive+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.hzn-3d-crossword\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ibm.afplinedata\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ibm.electronic-media\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ibm.minipay\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mpy\\\"]},\\\"application/vnd.ibm.modcap\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"afp\\\",\\\"listafp\\\",\\\"list3820\\\"]},\\\"application/vnd.ibm.rights-management\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"irm\\\"]},\\\"application/vnd.ibm.secure-container\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sc\\\"]},\\\"application/vnd.iccprofile\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"icc\\\",\\\"icm\\\"]},\\\"application/vnd.ieee.1905\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.igloader\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"igl\\\"]},\\\"application/vnd.imagemeter.folder+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.imagemeter.image+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.immervision-ivp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ivp\\\"]},\\\"application/vnd.immervision-ivu\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ivu\\\"]},\\\"application/vnd.ims.imsccv1p1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ims.imsccv1p2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ims.imsccv1p3\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ims.lis.v2.result+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ims.lti.v2.toolconsumerprofile+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ims.lti.v2.toolproxy+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ims.lti.v2.toolproxy.id+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ims.lti.v2.toolsettings+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ims.lti.v2.toolsettings.simple+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.informedcontrol.rms+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.informix-visionary\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.infotech.project\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.infotech.project+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.innopath.wamp.notification\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.insors.igm\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"igm\\\"]},\\\"application/vnd.intercon.formnet\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xpw\\\",\\\"xpx\\\"]},\\\"application/vnd.intergeo\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"i2g\\\"]},\\\"application/vnd.intertrust.digibox\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.intertrust.nncp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.intu.qbo\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"qbo\\\"]},\\\"application/vnd.intu.qfx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"qfx\\\"]},\\\"application/vnd.iptc.g2.catalogitem+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.iptc.g2.conceptitem+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.iptc.g2.knowledgeitem+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.iptc.g2.newsitem+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.iptc.g2.newsmessage+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.iptc.g2.packageitem+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.iptc.g2.planningitem+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ipunplugged.rcprofile\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rcprofile\\\"]},\\\"application/vnd.irepository.package+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"irp\\\"]},\\\"application/vnd.is-xpr\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xpr\\\"]},\\\"application/vnd.isac.fcs\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fcs\\\"]},\\\"application/vnd.iso11783-10+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.jam\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jam\\\"]},\\\"application/vnd.japannet-directory-service\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.japannet-jpnstore-wakeup\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.japannet-payment-wakeup\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.japannet-registration\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.japannet-registration-wakeup\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.japannet-setstore-wakeup\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.japannet-verification\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.japannet-verification-wakeup\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.jcp.javame.midlet-rms\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rms\\\"]},\\\"application/vnd.jisp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jisp\\\"]},\\\"application/vnd.joost.joda-archive\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"joda\\\"]},\\\"application/vnd.jsk.isdn-ngn\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.kahootz\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ktz\\\",\\\"ktr\\\"]},\\\"application/vnd.kde.karbon\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"karbon\\\"]},\\\"application/vnd.kde.kchart\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"chrt\\\"]},\\\"application/vnd.kde.kformula\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"kfo\\\"]},\\\"application/vnd.kde.kivio\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"flw\\\"]},\\\"application/vnd.kde.kontour\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"kon\\\"]},\\\"application/vnd.kde.kpresenter\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"kpr\\\",\\\"kpt\\\"]},\\\"application/vnd.kde.kspread\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ksp\\\"]},\\\"application/vnd.kde.kword\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"kwd\\\",\\\"kwt\\\"]},\\\"application/vnd.kenameaapp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"htke\\\"]},\\\"application/vnd.kidspiration\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"kia\\\"]},\\\"application/vnd.kinar\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"kne\\\",\\\"knp\\\"]},\\\"application/vnd.koan\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"skp\\\",\\\"skd\\\",\\\"skt\\\",\\\"skm\\\"]},\\\"application/vnd.kodak-descriptor\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sse\\\"]},\\\"application/vnd.las\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.las.las+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.las.las+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"lasxml\\\"]},\\\"application/vnd.laszip\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.leap+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.liberty-request+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.llamagraphics.life-balance.desktop\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"lbd\\\"]},\\\"application/vnd.llamagraphics.life-balance.exchange+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"lbe\\\"]},\\\"application/vnd.logipipe.circuit+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"application/vnd.loom\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.lotus-1-2-3\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"123\\\"]},\\\"application/vnd.lotus-approach\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"apr\\\"]},\\\"application/vnd.lotus-freelance\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pre\\\"]},\\\"application/vnd.lotus-notes\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nsf\\\"]},\\\"application/vnd.lotus-organizer\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"org\\\"]},\\\"application/vnd.lotus-screencam\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"scm\\\"]},\\\"application/vnd.lotus-wordpro\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"lwp\\\"]},\\\"application/vnd.macports.portpkg\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"portpkg\\\"]},\\\"application/vnd.mapbox-vector-tile\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.marlin.drm.actiontoken+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.marlin.drm.conftoken+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.marlin.drm.license+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.marlin.drm.mdcf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.mason+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.maxmind.maxmind-db\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.mcd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mcd\\\"]},\\\"application/vnd.medcalcdata\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mc1\\\"]},\\\"application/vnd.mediastation.cdkey\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cdkey\\\"]},\\\"application/vnd.meridian-slingshot\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.mfer\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mwf\\\"]},\\\"application/vnd.mfmp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mfm\\\"]},\\\"application/vnd.micro+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.micrografx.flo\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"flo\\\"]},\\\"application/vnd.micrografx.igx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"igx\\\"]},\\\"application/vnd.microsoft.portable-executable\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.microsoft.windows.thumbnail-cache\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.miele+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.mif\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mif\\\"]},\\\"application/vnd.minisoft-hp3000-save\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.mitsubishi.misty-guard.trustweb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.mobius.daf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"daf\\\"]},\\\"application/vnd.mobius.dis\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dis\\\"]},\\\"application/vnd.mobius.mbk\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mbk\\\"]},\\\"application/vnd.mobius.mqy\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mqy\\\"]},\\\"application/vnd.mobius.msl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"msl\\\"]},\\\"application/vnd.mobius.plc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"plc\\\"]},\\\"application/vnd.mobius.txf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"txf\\\"]},\\\"application/vnd.mophun.application\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mpn\\\"]},\\\"application/vnd.mophun.certificate\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mpc\\\"]},\\\"application/vnd.motorola.flexsuite\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.motorola.flexsuite.adsi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.motorola.flexsuite.fis\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.motorola.flexsuite.gotap\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.motorola.flexsuite.kmr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.motorola.flexsuite.ttc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.motorola.flexsuite.wem\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.motorola.iprm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.mozilla.xul+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xul\\\"]},\\\"application/vnd.ms-3mfdocument\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-artgalry\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cil\\\"]},\\\"application/vnd.ms-asf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-cab-compressed\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cab\\\"]},\\\"application/vnd.ms-color.iccprofile\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/vnd.ms-excel\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"xls\\\",\\\"xlm\\\",\\\"xla\\\",\\\"xlc\\\",\\\"xlt\\\",\\\"xlw\\\"]},\\\"application/vnd.ms-excel.addin.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xlam\\\"]},\\\"application/vnd.ms-excel.sheet.binary.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xlsb\\\"]},\\\"application/vnd.ms-excel.sheet.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xlsm\\\"]},\\\"application/vnd.ms-excel.template.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xltm\\\"]},\\\"application/vnd.ms-fontobject\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"eot\\\"]},\\\"application/vnd.ms-htmlhelp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"chm\\\"]},\\\"application/vnd.ms-ims\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ims\\\"]},\\\"application/vnd.ms-lrm\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"lrm\\\"]},\\\"application/vnd.ms-office.activex+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ms-officetheme\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"thmx\\\"]},\\\"application/vnd.ms-opentype\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true},\\\"application/vnd.ms-outlook\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"msg\\\"]},\\\"application/vnd.ms-package.obfuscated-opentype\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/vnd.ms-pki.seccat\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cat\\\"]},\\\"application/vnd.ms-pki.stl\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"stl\\\"]},\\\"application/vnd.ms-playready.initiator+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ms-powerpoint\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"ppt\\\",\\\"pps\\\",\\\"pot\\\"]},\\\"application/vnd.ms-powerpoint.addin.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ppam\\\"]},\\\"application/vnd.ms-powerpoint.presentation.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pptm\\\"]},\\\"application/vnd.ms-powerpoint.slide.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sldm\\\"]},\\\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ppsm\\\"]},\\\"application/vnd.ms-powerpoint.template.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"potm\\\"]},\\\"application/vnd.ms-printdevicecapabilities+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ms-printing.printticket+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true},\\\"application/vnd.ms-printschematicket+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.ms-project\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mpp\\\",\\\"mpt\\\"]},\\\"application/vnd.ms-tnef\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-windows.devicepairing\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-windows.nwprinting.oob\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-windows.printerpairing\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-windows.wsd.oob\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-wmdrm.lic-chlg-req\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-wmdrm.lic-resp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-wmdrm.meter-chlg-req\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-wmdrm.meter-resp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ms-word.document.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"docm\\\"]},\\\"application/vnd.ms-word.template.macroenabled.12\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dotm\\\"]},\\\"application/vnd.ms-works\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wps\\\",\\\"wks\\\",\\\"wcm\\\",\\\"wdb\\\"]},\\\"application/vnd.ms-wpl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wpl\\\"]},\\\"application/vnd.ms-xpsdocument\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"xps\\\"]},\\\"application/vnd.msa-disk-image\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.mseq\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mseq\\\"]},\\\"application/vnd.msign\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.multiad.creator\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.multiad.creator.cif\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.music-niff\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.musician\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mus\\\"]},\\\"application/vnd.muvee.style\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"msty\\\"]},\\\"application/vnd.mynfc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"taglet\\\"]},\\\"application/vnd.ncd.control\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ncd.reference\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nearst.inv+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.nervana\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.netfpx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.neurolanguage.nlu\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nlu\\\"]},\\\"application/vnd.nimn\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nintendo.nitro.rom\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nintendo.snes.rom\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nitf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ntf\\\",\\\"nitf\\\"]},\\\"application/vnd.noblenet-directory\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nnd\\\"]},\\\"application/vnd.noblenet-sealer\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nns\\\"]},\\\"application/vnd.noblenet-web\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nnw\\\"]},\\\"application/vnd.nokia.catalogs\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nokia.conml+wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nokia.conml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.nokia.iptv.config+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.nokia.isds-radio-presets\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nokia.landmark+wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nokia.landmark+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.nokia.landmarkcollection+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.nokia.n-gage.ac+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ac\\\"]},\\\"application/vnd.nokia.n-gage.data\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ngdat\\\"]},\\\"application/vnd.nokia.n-gage.symbian.install\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"n-gage\\\"]},\\\"application/vnd.nokia.ncd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nokia.pcd+wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.nokia.pcd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.nokia.radio-preset\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rpst\\\"]},\\\"application/vnd.nokia.radio-presets\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rpss\\\"]},\\\"application/vnd.novadigm.edm\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"edm\\\"]},\\\"application/vnd.novadigm.edx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"edx\\\"]},\\\"application/vnd.novadigm.ext\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ext\\\"]},\\\"application/vnd.ntt-local.content-share\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ntt-local.file-transfer\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ntt-local.ogw_remote-access\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ntt-local.sip-ta_remote\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ntt-local.sip-ta_tcp_stream\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oasis.opendocument.chart\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"odc\\\"]},\\\"application/vnd.oasis.opendocument.chart-template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"otc\\\"]},\\\"application/vnd.oasis.opendocument.database\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"odb\\\"]},\\\"application/vnd.oasis.opendocument.formula\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"odf\\\"]},\\\"application/vnd.oasis.opendocument.formula-template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"odft\\\"]},\\\"application/vnd.oasis.opendocument.graphics\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"odg\\\"]},\\\"application/vnd.oasis.opendocument.graphics-template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"otg\\\"]},\\\"application/vnd.oasis.opendocument.image\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"odi\\\"]},\\\"application/vnd.oasis.opendocument.image-template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"oti\\\"]},\\\"application/vnd.oasis.opendocument.presentation\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"odp\\\"]},\\\"application/vnd.oasis.opendocument.presentation-template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"otp\\\"]},\\\"application/vnd.oasis.opendocument.spreadsheet\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"ods\\\"]},\\\"application/vnd.oasis.opendocument.spreadsheet-template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ots\\\"]},\\\"application/vnd.oasis.opendocument.text\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"odt\\\"]},\\\"application/vnd.oasis.opendocument.text-master\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"odm\\\"]},\\\"application/vnd.oasis.opendocument.text-template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ott\\\"]},\\\"application/vnd.oasis.opendocument.text-web\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"oth\\\"]},\\\"application/vnd.obn\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ocf+cbor\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oci.image.manifest.v1+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oftn.l10n+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.contentaccessdownload+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.contentaccessstreaming+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.cspg-hexbinary\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oipf.dae.svg+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.dae.xhtml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.mippvcontrolmessage+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.pae.gem\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oipf.spdiscovery+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.spdlist+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.ueprofile+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oipf.userprofile+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.olpc-sugar\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xo\\\"]},\\\"application/vnd.oma-scws-config\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma-scws-http-request\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma-scws-http-response\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.bcast.associated-procedure-parameter+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.bcast.drm-trigger+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.bcast.imd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.bcast.ltkm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.bcast.notification+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.bcast.provisioningtrigger\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.bcast.sgboot\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.bcast.sgdd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.bcast.sgdu\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.bcast.simple-symbol-container\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.bcast.smartcard-trigger+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.bcast.sprov+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.bcast.stkm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.cab-address-book+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.cab-feature-handler+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.cab-pcc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.cab-subs-invite+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.cab-user-prefs+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.dcd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.dcdc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.dd2+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"dd2\\\"]},\\\"application/vnd.oma.drm.risd+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.group-usage-list+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.lwm2m+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.lwm2m+tlv\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.pal+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.poc.detailed-progress-report+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.poc.final-report+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.poc.groups+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.poc.invocation-descriptor+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.poc.optimized-progress-report+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.push\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.oma.scidm.messages+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oma.xcap-directory+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.omads-email+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/vnd.omads-file+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/vnd.omads-folder+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/vnd.omaloc-supl-init\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.onepager\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.onepagertamp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.onepagertamx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.onepagertat\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.onepagertatp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.onepagertatx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.openblox.game+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"obgx\\\"]},\\\"application/vnd.openblox.game-binary\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.openeye.oeb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.openofficeorg.extension\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"oxt\\\"]},\\\"application/vnd.openstreetmap.data+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"osm\\\"]},\\\"application/vnd.openxmlformats-officedocument.custom-properties+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.drawing+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.extended-properties+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.presentation\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"pptx\\\"]},\\\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.slide\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sldx\\\"]},\\\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ppsx\\\"]},\\\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"potx\\\"]},\\\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"xlsx\\\"]},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xltx\\\"]},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.theme+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.themeoverride+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.vmldrawing\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"docx\\\"]},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dotx\\\"]},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-package.core-properties+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.openxmlformats-package.relationships+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oracle.resource+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.orange.indata\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.osa.netdeploy\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.osgeo.mapguide.package\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mgp\\\"]},\\\"application/vnd.osgi.bundle\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.osgi.dp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dp\\\"]},\\\"application/vnd.osgi.subsystem\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"esa\\\"]},\\\"application/vnd.otps.ct-kip+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.oxli.countgraph\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.pagerduty+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.palm\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pdb\\\",\\\"pqa\\\",\\\"oprc\\\"]},\\\"application/vnd.panoply\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.paos.xml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.patentdive\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.patientecommsdoc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.pawaafile\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"paw\\\"]},\\\"application/vnd.pcos\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.pg.format\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"str\\\"]},\\\"application/vnd.pg.osasli\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ei6\\\"]},\\\"application/vnd.piaccess.application-licence\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.picsel\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"efif\\\"]},\\\"application/vnd.pmi.widget\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wg\\\"]},\\\"application/vnd.poc.group-advertisement+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.pocketlearn\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"plf\\\"]},\\\"application/vnd.powerbuilder6\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pbd\\\"]},\\\"application/vnd.powerbuilder6-s\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.powerbuilder7\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.powerbuilder7-s\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.powerbuilder75\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.powerbuilder75-s\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.preminet\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.previewsystems.box\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"box\\\"]},\\\"application/vnd.proteus.magazine\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mgz\\\"]},\\\"application/vnd.psfs\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.publishare-delta-tree\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"qps\\\"]},\\\"application/vnd.pvi.ptid1\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ptid\\\"]},\\\"application/vnd.pwg-multiplexed\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.pwg-xhtml-print+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.qualcomm.brew-app-res\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.quarantainenet\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.quark.quarkxpress\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"qxd\\\",\\\"qxt\\\",\\\"qwd\\\",\\\"qwt\\\",\\\"qxl\\\",\\\"qxb\\\"]},\\\"application/vnd.quobject-quoxdocument\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.radisys.moml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-audit+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-audit-conf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-audit-conn+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-audit-dialog+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-audit-stream+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-conf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-dialog+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-dialog-base+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-dialog-fax-detect+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-dialog-group+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-dialog-speech+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.radisys.msml-dialog-transform+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.rainstor.data\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.rapid\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.rar\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.realvnc.bed\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"bed\\\"]},\\\"application/vnd.recordare.musicxml\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mxl\\\"]},\\\"application/vnd.recordare.musicxml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"musicxml\\\"]},\\\"application/vnd.renlearn.rlprint\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.restful+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.rig.cryptonote\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cryptonote\\\"]},\\\"application/vnd.rim.cod\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cod\\\"]},\\\"application/vnd.rn-realmedia\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"rm\\\"]},\\\"application/vnd.rn-realmedia-vbr\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"rmvb\\\"]},\\\"application/vnd.route66.link66+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"link66\\\"]},\\\"application/vnd.rs-274x\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ruckus.download\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.s3sms\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sailingtracker.track\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"st\\\"]},\\\"application/vnd.sar\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sbm.cid\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sbm.mid2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.scribus\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.3df\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.csf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.doc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.eml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.mht\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.net\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.ppt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.tiff\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealed.xls\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealedmedia.softseal.html\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sealedmedia.softseal.pdf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.seemail\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"see\\\"]},\\\"application/vnd.sema\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sema\\\"]},\\\"application/vnd.semd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"semd\\\"]},\\\"application/vnd.semf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"semf\\\"]},\\\"application/vnd.shade-save-file\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.shana.informed.formdata\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ifm\\\"]},\\\"application/vnd.shana.informed.formtemplate\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"itp\\\"]},\\\"application/vnd.shana.informed.interchange\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"iif\\\"]},\\\"application/vnd.shana.informed.package\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ipk\\\"]},\\\"application/vnd.shootproof+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.shopkick+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.shp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.shx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sigrok.session\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.simtech-mindmapper\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"twd\\\",\\\"twds\\\"]},\\\"application/vnd.siren+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.smaf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mmf\\\"]},\\\"application/vnd.smart.notebook\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.smart.teacher\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"teacher\\\"]},\\\"application/vnd.snesdev-page-table\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.software602.filler.form+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"fo\\\"]},\\\"application/vnd.software602.filler.form-xml-zip\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.solent.sdkm+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"sdkm\\\",\\\"sdkd\\\"]},\\\"application/vnd.spotfire.dxp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dxp\\\"]},\\\"application/vnd.spotfire.sfs\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sfs\\\"]},\\\"application/vnd.sqlite3\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sss-cod\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sss-dtf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sss-ntf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.stardivision.calc\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sdc\\\"]},\\\"application/vnd.stardivision.draw\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sda\\\"]},\\\"application/vnd.stardivision.impress\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sdd\\\"]},\\\"application/vnd.stardivision.math\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"smf\\\"]},\\\"application/vnd.stardivision.writer\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sdw\\\",\\\"vor\\\"]},\\\"application/vnd.stardivision.writer-global\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sgl\\\"]},\\\"application/vnd.stepmania.package\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"smzip\\\"]},\\\"application/vnd.stepmania.stepchart\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sm\\\"]},\\\"application/vnd.street-stream\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.sun.wadl+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"wadl\\\"]},\\\"application/vnd.sun.xml.calc\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sxc\\\"]},\\\"application/vnd.sun.xml.calc.template\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"stc\\\"]},\\\"application/vnd.sun.xml.draw\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sxd\\\"]},\\\"application/vnd.sun.xml.draw.template\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"std\\\"]},\\\"application/vnd.sun.xml.impress\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sxi\\\"]},\\\"application/vnd.sun.xml.impress.template\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sti\\\"]},\\\"application/vnd.sun.xml.math\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sxm\\\"]},\\\"application/vnd.sun.xml.writer\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sxw\\\"]},\\\"application/vnd.sun.xml.writer.global\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sxg\\\"]},\\\"application/vnd.sun.xml.writer.template\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"stw\\\"]},\\\"application/vnd.sus-calendar\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sus\\\",\\\"susp\\\"]},\\\"application/vnd.svd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"svd\\\"]},\\\"application/vnd.swiftview-ics\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.symbian.install\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sis\\\",\\\"sisx\\\"]},\\\"application/vnd.syncml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xsm\\\"]},\\\"application/vnd.syncml.dm+wbxml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"extensions\\\":[\\\"bdm\\\"]},\\\"application/vnd.syncml.dm+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xdm\\\"]},\\\"application/vnd.syncml.dm.notification\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.syncml.dmddf+wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.syncml.dmddf+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ddf\\\"]},\\\"application/vnd.syncml.dmtnds+wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.syncml.dmtnds+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true},\\\"application/vnd.syncml.ds.notification\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.tableschema+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.tao.intent-module-archive\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tao\\\"]},\\\"application/vnd.tcpdump.pcap\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pcap\\\",\\\"cap\\\",\\\"dmp\\\"]},\\\"application/vnd.think-cell.ppttc+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.tmd.mediaflex.api+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.tml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.tmobile-livetv\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tmo\\\"]},\\\"application/vnd.tri.onesource\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.trid.tpt\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tpt\\\"]},\\\"application/vnd.triscape.mxs\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mxs\\\"]},\\\"application/vnd.trueapp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tra\\\"]},\\\"application/vnd.truedoc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ubisoft.webplayer\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ufdl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ufd\\\",\\\"ufdl\\\"]},\\\"application/vnd.uiq.theme\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"utz\\\"]},\\\"application/vnd.umajin\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"umj\\\"]},\\\"application/vnd.unity\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"unityweb\\\"]},\\\"application/vnd.uoml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"uoml\\\"]},\\\"application/vnd.uplanet.alert\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.alert-wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.bearer-choice\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.bearer-choice-wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.cacheop\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.cacheop-wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.channel\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.channel-wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.list\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.list-wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.listcmd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.listcmd-wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uplanet.signal\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.uri-map\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.valve.source.material\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.vcx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"vcx\\\"]},\\\"application/vnd.vd-study\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.vectorworks\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.vel+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.verimatrix.vcas\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.veryant.thin\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.ves.encrypted\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.vidsoft.vidconference\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.visio\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"vsd\\\",\\\"vst\\\",\\\"vss\\\",\\\"vsw\\\"]},\\\"application/vnd.visionary\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"vis\\\"]},\\\"application/vnd.vividence.scriptfile\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.vsf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"vsf\\\"]},\\\"application/vnd.wap.sic\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wap.slc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wap.wbxml\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"extensions\\\":[\\\"wbxml\\\"]},\\\"application/vnd.wap.wmlc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wmlc\\\"]},\\\"application/vnd.wap.wmlscriptc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wmlsc\\\"]},\\\"application/vnd.webturbo\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wtb\\\"]},\\\"application/vnd.wfa.p2p\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wfa.wsc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.windows.devicepairing\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wmc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wmf.bootstrap\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wolfram.mathematica\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wolfram.mathematica.package\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wolfram.player\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"nbp\\\"]},\\\"application/vnd.wordperfect\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wpd\\\"]},\\\"application/vnd.wqd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wqd\\\"]},\\\"application/vnd.wrq-hp3000-labelled\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wt.stf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"stf\\\"]},\\\"application/vnd.wv.csp+wbxml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.wv.csp+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.wv.ssp+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.xacml+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.xara\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xar\\\"]},\\\"application/vnd.xfdl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xfdl\\\"]},\\\"application/vnd.xfdl.webform\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.xmi+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vnd.xmpie.cpkg\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.xmpie.dpkg\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.xmpie.plan\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.xmpie.ppkg\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.xmpie.xlim\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.yamaha.hv-dic\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hvd\\\"]},\\\"application/vnd.yamaha.hv-script\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hvs\\\"]},\\\"application/vnd.yamaha.hv-voice\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hvp\\\"]},\\\"application/vnd.yamaha.openscoreformat\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"osf\\\"]},\\\"application/vnd.yamaha.openscoreformat.osfpvg+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"osfpvg\\\"]},\\\"application/vnd.yamaha.remote-setup\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.yamaha.smaf-audio\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"saf\\\"]},\\\"application/vnd.yamaha.smaf-phrase\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"spf\\\"]},\\\"application/vnd.yamaha.through-ngn\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.yamaha.tunnel-udpencap\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.yaoweme\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.yellowriver-custom-menu\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cmp\\\"]},\\\"application/vnd.youtube.yt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/vnd.zul\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"zir\\\",\\\"zirz\\\"]},\\\"application/vnd.zzazz.deck+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"zaz\\\"]},\\\"application/voicexml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"vxml\\\"]},\\\"application/voucher-cms+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/vq-rtcpxr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/wasm\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"wasm\\\"]},\\\"application/watcherinfo+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/webpush-options+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/whoispp-query\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/whoispp-response\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/widget\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wgt\\\"]},\\\"application/winhlp\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"hlp\\\"]},\\\"application/wita\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/wordperfect5.1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/wsdl+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"wsdl\\\"]},\\\"application/wspolicy+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"wspolicy\\\"]},\\\"application/x-7z-compressed\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"7z\\\"]},\\\"application/x-abiword\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"abw\\\"]},\\\"application/x-ace-compressed\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"ace\\\"]},\\\"application/x-amf\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-apple-diskimage\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"dmg\\\"]},\\\"application/x-arj\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"arj\\\"]},\\\"application/x-authorware-bin\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"aab\\\",\\\"x32\\\",\\\"u32\\\",\\\"vox\\\"]},\\\"application/x-authorware-map\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"aam\\\"]},\\\"application/x-authorware-seg\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"aas\\\"]},\\\"application/x-bcpio\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"bcpio\\\"]},\\\"application/x-bdoc\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"bdoc\\\"]},\\\"application/x-bittorrent\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"torrent\\\"]},\\\"application/x-blorb\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"blb\\\",\\\"blorb\\\"]},\\\"application/x-bzip\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"bz\\\"]},\\\"application/x-bzip2\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"bz2\\\",\\\"boz\\\"]},\\\"application/x-cbr\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cbr\\\",\\\"cba\\\",\\\"cbt\\\",\\\"cbz\\\",\\\"cb7\\\"]},\\\"application/x-cdlink\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"vcd\\\"]},\\\"application/x-cfs-compressed\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cfs\\\"]},\\\"application/x-chat\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"chat\\\"]},\\\"application/x-chess-pgn\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pgn\\\"]},\\\"application/x-chrome-extension\\\":{\\\"extensions\\\":[\\\"crx\\\"]},\\\"application/x-cocoa\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"cco\\\"]},\\\"application/x-compress\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-conference\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"nsc\\\"]},\\\"application/x-cpio\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cpio\\\"]},\\\"application/x-csh\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"csh\\\"]},\\\"application/x-deb\\\":{\\\"compressible\\\":false},\\\"application/x-debian-package\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"deb\\\",\\\"udeb\\\"]},\\\"application/x-dgc-compressed\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"dgc\\\"]},\\\"application/x-director\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"dir\\\",\\\"dcr\\\",\\\"dxr\\\",\\\"cst\\\",\\\"cct\\\",\\\"cxt\\\",\\\"w3d\\\",\\\"fgd\\\",\\\"swa\\\"]},\\\"application/x-doom\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wad\\\"]},\\\"application/x-dtbncx+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ncx\\\"]},\\\"application/x-dtbook+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"dtb\\\"]},\\\"application/x-dtbresource+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"res\\\"]},\\\"application/x-dvi\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"dvi\\\"]},\\\"application/x-envoy\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"evy\\\"]},\\\"application/x-eva\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"eva\\\"]},\\\"application/x-font-bdf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"bdf\\\"]},\\\"application/x-font-dos\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-font-framemaker\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-font-ghostscript\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"gsf\\\"]},\\\"application/x-font-libgrx\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-font-linux-psf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"psf\\\"]},\\\"application/x-font-pcf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pcf\\\"]},\\\"application/x-font-snf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"snf\\\"]},\\\"application/x-font-speedo\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-font-sunos-news\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-font-type1\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pfa\\\",\\\"pfb\\\",\\\"pfm\\\",\\\"afm\\\"]},\\\"application/x-font-vfont\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-freearc\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"arc\\\"]},\\\"application/x-futuresplash\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"spl\\\"]},\\\"application/x-gca-compressed\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"gca\\\"]},\\\"application/x-glulx\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"ulx\\\"]},\\\"application/x-gnumeric\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"gnumeric\\\"]},\\\"application/x-gramps-xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"gramps\\\"]},\\\"application/x-gtar\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"gtar\\\"]},\\\"application/x-gzip\\\":{\\\"source\\\":\\\"apache\\\"},\\\"application/x-hdf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"hdf\\\"]},\\\"application/x-httpd-php\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"php\\\"]},\\\"application/x-install-instructions\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"install\\\"]},\\\"application/x-iso9660-image\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"iso\\\"]},\\\"application/x-java-archive-diff\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"jardiff\\\"]},\\\"application/x-java-jnlp-file\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"jnlp\\\"]},\\\"application/x-javascript\\\":{\\\"compressible\\\":true},\\\"application/x-keepass2\\\":{\\\"extensions\\\":[\\\"kdbx\\\"]},\\\"application/x-latex\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"latex\\\"]},\\\"application/x-lua-bytecode\\\":{\\\"extensions\\\":[\\\"luac\\\"]},\\\"application/x-lzh-compressed\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"lzh\\\",\\\"lha\\\"]},\\\"application/x-makeself\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"run\\\"]},\\\"application/x-mie\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mie\\\"]},\\\"application/x-mobipocket-ebook\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"prc\\\",\\\"mobi\\\"]},\\\"application/x-mpegurl\\\":{\\\"compressible\\\":false},\\\"application/x-ms-application\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"application\\\"]},\\\"application/x-ms-shortcut\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"lnk\\\"]},\\\"application/x-ms-wmd\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wmd\\\"]},\\\"application/x-ms-wmz\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wmz\\\"]},\\\"application/x-ms-xbap\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"xbap\\\"]},\\\"application/x-msaccess\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mdb\\\"]},\\\"application/x-msbinder\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"obd\\\"]},\\\"application/x-mscardfile\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"crd\\\"]},\\\"application/x-msclip\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"clp\\\"]},\\\"application/x-msdos-program\\\":{\\\"extensions\\\":[\\\"exe\\\"]},\\\"application/x-msdownload\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"exe\\\",\\\"dll\\\",\\\"com\\\",\\\"bat\\\",\\\"msi\\\"]},\\\"application/x-msmediaview\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mvb\\\",\\\"m13\\\",\\\"m14\\\"]},\\\"application/x-msmetafile\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wmf\\\",\\\"wmz\\\",\\\"emf\\\",\\\"emz\\\"]},\\\"application/x-msmoney\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mny\\\"]},\\\"application/x-mspublisher\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pub\\\"]},\\\"application/x-msschedule\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"scd\\\"]},\\\"application/x-msterminal\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"trm\\\"]},\\\"application/x-mswrite\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wri\\\"]},\\\"application/x-netcdf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"nc\\\",\\\"cdf\\\"]},\\\"application/x-ns-proxy-autoconfig\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"pac\\\"]},\\\"application/x-nzb\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"nzb\\\"]},\\\"application/x-perl\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"pl\\\",\\\"pm\\\"]},\\\"application/x-pilot\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"prc\\\",\\\"pdb\\\"]},\\\"application/x-pkcs12\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"p12\\\",\\\"pfx\\\"]},\\\"application/x-pkcs7-certificates\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"p7b\\\",\\\"spc\\\"]},\\\"application/x-pkcs7-certreqresp\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"p7r\\\"]},\\\"application/x-pki-message\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/x-rar-compressed\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"rar\\\"]},\\\"application/x-redhat-package-manager\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"rpm\\\"]},\\\"application/x-research-info-systems\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"ris\\\"]},\\\"application/x-sea\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"sea\\\"]},\\\"application/x-sh\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"sh\\\"]},\\\"application/x-shar\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"shar\\\"]},\\\"application/x-shockwave-flash\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"swf\\\"]},\\\"application/x-silverlight-app\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"xap\\\"]},\\\"application/x-sql\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sql\\\"]},\\\"application/x-stuffit\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"sit\\\"]},\\\"application/x-stuffitx\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sitx\\\"]},\\\"application/x-subrip\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"srt\\\"]},\\\"application/x-sv4cpio\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sv4cpio\\\"]},\\\"application/x-sv4crc\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sv4crc\\\"]},\\\"application/x-t3vm-image\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"t3\\\"]},\\\"application/x-tads\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"gam\\\"]},\\\"application/x-tar\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"tar\\\"]},\\\"application/x-tcl\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"tcl\\\",\\\"tk\\\"]},\\\"application/x-tex\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"tex\\\"]},\\\"application/x-tex-tfm\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"tfm\\\"]},\\\"application/x-texinfo\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"texinfo\\\",\\\"texi\\\"]},\\\"application/x-tgif\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"obj\\\"]},\\\"application/x-ustar\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"ustar\\\"]},\\\"application/x-virtualbox-hdd\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"hdd\\\"]},\\\"application/x-virtualbox-ova\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ova\\\"]},\\\"application/x-virtualbox-ovf\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ovf\\\"]},\\\"application/x-virtualbox-vbox\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"vbox\\\"]},\\\"application/x-virtualbox-vbox-extpack\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"vbox-extpack\\\"]},\\\"application/x-virtualbox-vdi\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"vdi\\\"]},\\\"application/x-virtualbox-vhd\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"vhd\\\"]},\\\"application/x-virtualbox-vmdk\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"vmdk\\\"]},\\\"application/x-wais-source\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"src\\\"]},\\\"application/x-web-app-manifest+json\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"webapp\\\"]},\\\"application/x-www-form-urlencoded\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/x-x509-ca-cert\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"der\\\",\\\"crt\\\",\\\"pem\\\"]},\\\"application/x-x509-ca-ra-cert\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/x-x509-next-ca-cert\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/x-xfig\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"fig\\\"]},\\\"application/x-xliff+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xlf\\\"]},\\\"application/x-xpinstall\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"xpi\\\"]},\\\"application/x-xz\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"xz\\\"]},\\\"application/x-zmachine\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"z1\\\",\\\"z2\\\",\\\"z3\\\",\\\"z4\\\",\\\"z5\\\",\\\"z6\\\",\\\"z7\\\",\\\"z8\\\"]},\\\"application/x400-bp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/xacml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/xaml+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xaml\\\"]},\\\"application/xcap-att+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xav\\\"]},\\\"application/xcap-caps+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xca\\\"]},\\\"application/xcap-diff+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xdf\\\"]},\\\"application/xcap-el+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xel\\\"]},\\\"application/xcap-error+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xer\\\"]},\\\"application/xcap-ns+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xns\\\"]},\\\"application/xcon-conference-info+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/xcon-conference-info-diff+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/xenc+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xenc\\\"]},\\\"application/xhtml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xhtml\\\",\\\"xht\\\"]},\\\"application/xhtml-voice+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true},\\\"application/xliff+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xlf\\\"]},\\\"application/xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xml\\\",\\\"xsl\\\",\\\"xsd\\\",\\\"rng\\\"]},\\\"application/xml-dtd\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"dtd\\\"]},\\\"application/xml-external-parsed-entity\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/xml-patch+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/xmpp+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/xop+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xop\\\"]},\\\"application/xproc+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xpl\\\"]},\\\"application/xslt+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xslt\\\"]},\\\"application/xspf+xml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xspf\\\"]},\\\"application/xv+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mxml\\\",\\\"xhvml\\\",\\\"xvml\\\",\\\"xvm\\\"]},\\\"application/yang\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"yang\\\"]},\\\"application/yang-data+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/yang-data+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/yang-patch+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/yang-patch+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"application/yin+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"yin\\\"]},\\\"application/zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"zip\\\"]},\\\"application/zlib\\\":{\\\"source\\\":\\\"iana\\\"},\\\"application/zstd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/1d-interleaved-parityfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/32kadpcm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/3gpp\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"3gpp\\\"]},\\\"audio/3gpp2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/aac\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/ac3\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/adpcm\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"adp\\\"]},\\\"audio/amr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/amr-wb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/amr-wb+\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/aptx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/asc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/atrac-advanced-lossless\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/atrac-x\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/atrac3\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/basic\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"au\\\",\\\"snd\\\"]},\\\"audio/bv16\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/bv32\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/clearmode\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/cn\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/dat12\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/dls\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/dsr-es201108\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/dsr-es202050\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/dsr-es202211\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/dsr-es202212\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/dv\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/dvi4\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/eac3\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/encaprtp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrc-qcp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrc0\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrc1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcb0\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcb1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcnw\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcnw0\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcnw1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcwb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcwb0\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evrcwb1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/evs\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/flexfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/fwdred\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g711-0\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g719\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g722\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g7221\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g723\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g726-16\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g726-24\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g726-32\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g726-40\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g728\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g729\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g7291\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g729d\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/g729e\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/gsm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/gsm-efr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/gsm-hr-08\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/ilbc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/ip-mr_v2.5\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/isac\\\":{\\\"source\\\":\\\"apache\\\"},\\\"audio/l16\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/l20\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/l24\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"audio/l8\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/lpc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/melp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/melp1200\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/melp2400\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/melp600\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/mhas\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/midi\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mid\\\",\\\"midi\\\",\\\"kar\\\",\\\"rmi\\\"]},\\\"audio/mobile-xmf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mxmf\\\"]},\\\"audio/mp3\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"mp3\\\"]},\\\"audio/mp4\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"m4a\\\",\\\"mp4a\\\"]},\\\"audio/mp4a-latm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/mpa\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/mpa-robust\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/mpeg\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"mpga\\\",\\\"mp2\\\",\\\"mp2a\\\",\\\"mp3\\\",\\\"m2a\\\",\\\"m3a\\\"]},\\\"audio/mpeg4-generic\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/musepack\\\":{\\\"source\\\":\\\"apache\\\"},\\\"audio/ogg\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"oga\\\",\\\"ogg\\\",\\\"spx\\\"]},\\\"audio/opus\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/parityfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/pcma\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/pcma-wb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/pcmu\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/pcmu-wb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/prs.sid\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/qcelp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/raptorfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/red\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/rtp-enc-aescm128\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/rtp-midi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/rtploopback\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/rtx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/s3m\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"s3m\\\"]},\\\"audio/silk\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sil\\\"]},\\\"audio/smv\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/smv-qcp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/smv0\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/sp-midi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/speex\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/t140c\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/t38\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/telephone-event\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/tetra_acelp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/tetra_acelp_bb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/tone\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/uemclip\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/ulpfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/usac\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vdvi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vmr-wb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.3gpp.iufp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.4sb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.audiokoz\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.celp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.cisco.nse\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.cmles.radio-events\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.cns.anp1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.cns.inf1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dece.audio\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uva\\\",\\\"uvva\\\"]},\\\"audio/vnd.digital-winds\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"eol\\\"]},\\\"audio/vnd.dlna.adts\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dolby.heaac.1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dolby.heaac.2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dolby.mlp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dolby.mps\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dolby.pl2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dolby.pl2x\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dolby.pl2z\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dolby.pulse.1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dra\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dra\\\"]},\\\"audio/vnd.dts\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dts\\\"]},\\\"audio/vnd.dts.hd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dtshd\\\"]},\\\"audio/vnd.dts.uhd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.dvb.file\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.everad.plj\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.hns.audio\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.lucent.voice\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"lvp\\\"]},\\\"audio/vnd.ms-playready.media.pya\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pya\\\"]},\\\"audio/vnd.nokia.mobile-xmf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.nortel.vbk\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.nuera.ecelp4800\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ecelp4800\\\"]},\\\"audio/vnd.nuera.ecelp7470\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ecelp7470\\\"]},\\\"audio/vnd.nuera.ecelp9600\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ecelp9600\\\"]},\\\"audio/vnd.octel.sbc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.presonus.multitrack\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.qcelp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.rhetorex.32kadpcm\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.rip\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rip\\\"]},\\\"audio/vnd.rn-realaudio\\\":{\\\"compressible\\\":false},\\\"audio/vnd.sealedmedia.softseal.mpeg\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.vmx.cvsd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/vnd.wave\\\":{\\\"compressible\\\":false},\\\"audio/vorbis\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"audio/vorbis-config\\\":{\\\"source\\\":\\\"iana\\\"},\\\"audio/wav\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"wav\\\"]},\\\"audio/wave\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"wav\\\"]},\\\"audio/webm\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"weba\\\"]},\\\"audio/x-aac\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"aac\\\"]},\\\"audio/x-aiff\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"aif\\\",\\\"aiff\\\",\\\"aifc\\\"]},\\\"audio/x-caf\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"caf\\\"]},\\\"audio/x-flac\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"flac\\\"]},\\\"audio/x-m4a\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"m4a\\\"]},\\\"audio/x-matroska\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mka\\\"]},\\\"audio/x-mpegurl\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"m3u\\\"]},\\\"audio/x-ms-wax\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wax\\\"]},\\\"audio/x-ms-wma\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wma\\\"]},\\\"audio/x-pn-realaudio\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"ram\\\",\\\"ra\\\"]},\\\"audio/x-pn-realaudio-plugin\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"rmp\\\"]},\\\"audio/x-realaudio\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"ra\\\"]},\\\"audio/x-tta\\\":{\\\"source\\\":\\\"apache\\\"},\\\"audio/x-wav\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wav\\\"]},\\\"audio/xm\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"xm\\\"]},\\\"chemical/x-cdx\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cdx\\\"]},\\\"chemical/x-cif\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cif\\\"]},\\\"chemical/x-cmdf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cmdf\\\"]},\\\"chemical/x-cml\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cml\\\"]},\\\"chemical/x-csml\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"csml\\\"]},\\\"chemical/x-pdb\\\":{\\\"source\\\":\\\"apache\\\"},\\\"chemical/x-xyz\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"xyz\\\"]},\\\"font/collection\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ttc\\\"]},\\\"font/otf\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"otf\\\"]},\\\"font/sfnt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"font/ttf\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ttf\\\"]},\\\"font/woff\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"woff\\\"]},\\\"font/woff2\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"woff2\\\"]},\\\"image/aces\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"exr\\\"]},\\\"image/apng\\\":{\\\"compressible\\\":false,\\\"extensions\\\":[\\\"apng\\\"]},\\\"image/avci\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/avcs\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/bmp\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"bmp\\\"]},\\\"image/cgm\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"cgm\\\"]},\\\"image/dicom-rle\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"drle\\\"]},\\\"image/emf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"emf\\\"]},\\\"image/fits\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fits\\\"]},\\\"image/g3fax\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"g3\\\"]},\\\"image/gif\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"gif\\\"]},\\\"image/heic\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"heic\\\"]},\\\"image/heic-sequence\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"heics\\\"]},\\\"image/heif\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"heif\\\"]},\\\"image/heif-sequence\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"heifs\\\"]},\\\"image/hej2k\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hej2\\\"]},\\\"image/hsj2\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"hsj2\\\"]},\\\"image/ief\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ief\\\"]},\\\"image/jls\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jls\\\"]},\\\"image/jp2\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"jp2\\\",\\\"jpg2\\\"]},\\\"image/jpeg\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"jpeg\\\",\\\"jpg\\\",\\\"jpe\\\"]},\\\"image/jph\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jph\\\"]},\\\"image/jphc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jhc\\\"]},\\\"image/jpm\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"jpm\\\"]},\\\"image/jpx\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"jpx\\\",\\\"jpf\\\"]},\\\"image/jxr\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jxr\\\"]},\\\"image/jxra\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jxra\\\"]},\\\"image/jxrs\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jxrs\\\"]},\\\"image/jxs\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jxs\\\"]},\\\"image/jxsc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jxsc\\\"]},\\\"image/jxsi\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jxsi\\\"]},\\\"image/jxss\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jxss\\\"]},\\\"image/ktx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ktx\\\"]},\\\"image/naplps\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/pjpeg\\\":{\\\"compressible\\\":false},\\\"image/png\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"png\\\"]},\\\"image/prs.btif\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"btif\\\"]},\\\"image/prs.pti\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pti\\\"]},\\\"image/pwg-raster\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/sgi\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sgi\\\"]},\\\"image/svg+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"svg\\\",\\\"svgz\\\"]},\\\"image/t38\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"t38\\\"]},\\\"image/tiff\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"tif\\\",\\\"tiff\\\"]},\\\"image/tiff-fx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tfx\\\"]},\\\"image/vnd.adobe.photoshop\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"psd\\\"]},\\\"image/vnd.airzip.accelerator.azv\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"azv\\\"]},\\\"image/vnd.cns.inf2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.dece.graphic\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvi\\\",\\\"uvvi\\\",\\\"uvg\\\",\\\"uvvg\\\"]},\\\"image/vnd.djvu\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"djvu\\\",\\\"djv\\\"]},\\\"image/vnd.dvb.subtitle\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sub\\\"]},\\\"image/vnd.dwg\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dwg\\\"]},\\\"image/vnd.dxf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dxf\\\"]},\\\"image/vnd.fastbidsheet\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fbs\\\"]},\\\"image/vnd.fpx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fpx\\\"]},\\\"image/vnd.fst\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fst\\\"]},\\\"image/vnd.fujixerox.edmics-mmr\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mmr\\\"]},\\\"image/vnd.fujixerox.edmics-rlc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"rlc\\\"]},\\\"image/vnd.globalgraphics.pgb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.microsoft.icon\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ico\\\"]},\\\"image/vnd.mix\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.mozilla.apng\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.ms-dds\\\":{\\\"extensions\\\":[\\\"dds\\\"]},\\\"image/vnd.ms-modi\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mdi\\\"]},\\\"image/vnd.ms-photo\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wdp\\\"]},\\\"image/vnd.net-fpx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"npx\\\"]},\\\"image/vnd.radiance\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.sealed.png\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.sealedmedia.softseal.gif\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.sealedmedia.softseal.jpg\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.svf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"image/vnd.tencent.tap\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"tap\\\"]},\\\"image/vnd.valve.source.texture\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"vtf\\\"]},\\\"image/vnd.wap.wbmp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wbmp\\\"]},\\\"image/vnd.xiff\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"xif\\\"]},\\\"image/vnd.zbrush.pcx\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pcx\\\"]},\\\"image/webp\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"webp\\\"]},\\\"image/wmf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wmf\\\"]},\\\"image/x-3ds\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"3ds\\\"]},\\\"image/x-cmu-raster\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"ras\\\"]},\\\"image/x-cmx\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"cmx\\\"]},\\\"image/x-freehand\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"fh\\\",\\\"fhc\\\",\\\"fh4\\\",\\\"fh5\\\",\\\"fh7\\\"]},\\\"image/x-icon\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ico\\\"]},\\\"image/x-jng\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"jng\\\"]},\\\"image/x-mrsid-image\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sid\\\"]},\\\"image/x-ms-bmp\\\":{\\\"source\\\":\\\"nginx\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"bmp\\\"]},\\\"image/x-pcx\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pcx\\\"]},\\\"image/x-pict\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pic\\\",\\\"pct\\\"]},\\\"image/x-portable-anymap\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pnm\\\"]},\\\"image/x-portable-bitmap\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pbm\\\"]},\\\"image/x-portable-graymap\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"pgm\\\"]},\\\"image/x-portable-pixmap\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"ppm\\\"]},\\\"image/x-rgb\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"rgb\\\"]},\\\"image/x-tga\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"tga\\\"]},\\\"image/x-xbitmap\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"xbm\\\"]},\\\"image/x-xcf\\\":{\\\"compressible\\\":false},\\\"image/x-xpixmap\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"xpm\\\"]},\\\"image/x-xwindowdump\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"xwd\\\"]},\\\"message/cpim\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/delivery-status\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/disposition-notification\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"disposition-notification\\\"]},\\\"message/external-body\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/feedback-report\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/global\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"u8msg\\\"]},\\\"message/global-delivery-status\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"u8dsn\\\"]},\\\"message/global-disposition-notification\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"u8mdn\\\"]},\\\"message/global-headers\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"u8hdr\\\"]},\\\"message/http\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"message/imdn+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"message/news\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/partial\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"message/rfc822\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"eml\\\",\\\"mime\\\"]},\\\"message/s-http\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/sip\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/sipfrag\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/tracking-status\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/vnd.si.simp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"message/vnd.wfa.wsc\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wsc\\\"]},\\\"model/3mf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"3mf\\\"]},\\\"model/gltf+json\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"gltf\\\"]},\\\"model/gltf-binary\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"glb\\\"]},\\\"model/iges\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"igs\\\",\\\"iges\\\"]},\\\"model/mesh\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"msh\\\",\\\"mesh\\\",\\\"silo\\\"]},\\\"model/mtl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mtl\\\"]},\\\"model/obj\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"obj\\\"]},\\\"model/stl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"stl\\\"]},\\\"model/vnd.collada+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"dae\\\"]},\\\"model/vnd.dwf\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dwf\\\"]},\\\"model/vnd.flatland.3dml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"model/vnd.gdl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gdl\\\"]},\\\"model/vnd.gs-gdl\\\":{\\\"source\\\":\\\"apache\\\"},\\\"model/vnd.gs.gdl\\\":{\\\"source\\\":\\\"iana\\\"},\\\"model/vnd.gtw\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gtw\\\"]},\\\"model/vnd.moml+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"model/vnd.mts\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mts\\\"]},\\\"model/vnd.opengex\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ogex\\\"]},\\\"model/vnd.parasolid.transmit.binary\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"x_b\\\"]},\\\"model/vnd.parasolid.transmit.text\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"x_t\\\"]},\\\"model/vnd.rosette.annotated-data-model\\\":{\\\"source\\\":\\\"iana\\\"},\\\"model/vnd.usdz+zip\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"usdz\\\"]},\\\"model/vnd.valve.source.compiled-map\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"bsp\\\"]},\\\"model/vnd.vtu\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"vtu\\\"]},\\\"model/vrml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"wrl\\\",\\\"vrml\\\"]},\\\"model/x3d+binary\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"x3db\\\",\\\"x3dbz\\\"]},\\\"model/x3d+fastinfoset\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"x3db\\\"]},\\\"model/x3d+vrml\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"x3dv\\\",\\\"x3dvz\\\"]},\\\"model/x3d+xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"x3d\\\",\\\"x3dz\\\"]},\\\"model/x3d-vrml\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"x3dv\\\"]},\\\"multipart/alternative\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"multipart/appledouble\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/byteranges\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/digest\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/encrypted\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"multipart/form-data\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"multipart/header-set\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/mixed\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/multilingual\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/parallel\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/related\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"multipart/report\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/signed\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false},\\\"multipart/vnd.bint.med-plus\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/voice-message\\\":{\\\"source\\\":\\\"iana\\\"},\\\"multipart/x-mixed-replace\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/1d-interleaved-parityfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/cache-manifest\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"appcache\\\",\\\"manifest\\\"]},\\\"text/calendar\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ics\\\",\\\"ifb\\\"]},\\\"text/calender\\\":{\\\"compressible\\\":true},\\\"text/cmd\\\":{\\\"compressible\\\":true},\\\"text/coffeescript\\\":{\\\"extensions\\\":[\\\"coffee\\\",\\\"litcoffee\\\"]},\\\"text/css\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"css\\\"]},\\\"text/csv\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"csv\\\"]},\\\"text/csv-schema\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/directory\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/dns\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/ecmascript\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/encaprtp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/enriched\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/flexfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/fwdred\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/grammar-ref-list\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/html\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"html\\\",\\\"htm\\\",\\\"shtml\\\"]},\\\"text/jade\\\":{\\\"extensions\\\":[\\\"jade\\\"]},\\\"text/javascript\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true},\\\"text/jcr-cnd\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/jsx\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"jsx\\\"]},\\\"text/less\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"less\\\"]},\\\"text/markdown\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"markdown\\\",\\\"md\\\"]},\\\"text/mathml\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"mml\\\"]},\\\"text/mdx\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mdx\\\"]},\\\"text/mizar\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/n3\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"n3\\\"]},\\\"text/parameters\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\"},\\\"text/parityfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/plain\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"txt\\\",\\\"text\\\",\\\"conf\\\",\\\"def\\\",\\\"list\\\",\\\"log\\\",\\\"in\\\",\\\"ini\\\"]},\\\"text/provenance-notation\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\"},\\\"text/prs.fallenstein.rst\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/prs.lines.tag\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dsc\\\"]},\\\"text/prs.prop.logic\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/raptorfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/red\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/rfc822-headers\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/richtext\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rtx\\\"]},\\\"text/rtf\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"rtf\\\"]},\\\"text/rtp-enc-aescm128\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/rtploopback\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/rtx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/sgml\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sgml\\\",\\\"sgm\\\"]},\\\"text/shex\\\":{\\\"extensions\\\":[\\\"shex\\\"]},\\\"text/slim\\\":{\\\"extensions\\\":[\\\"slim\\\",\\\"slm\\\"]},\\\"text/strings\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/stylus\\\":{\\\"extensions\\\":[\\\"stylus\\\",\\\"styl\\\"]},\\\"text/t140\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/tab-separated-values\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"tsv\\\"]},\\\"text/troff\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"t\\\",\\\"tr\\\",\\\"roff\\\",\\\"man\\\",\\\"me\\\",\\\"ms\\\"]},\\\"text/turtle\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"extensions\\\":[\\\"ttl\\\"]},\\\"text/ulpfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/uri-list\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"uri\\\",\\\"uris\\\",\\\"urls\\\"]},\\\"text/vcard\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"vcard\\\"]},\\\"text/vnd.a\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.abc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.ascii-art\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.curl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"curl\\\"]},\\\"text/vnd.curl.dcurl\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"dcurl\\\"]},\\\"text/vnd.curl.mcurl\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mcurl\\\"]},\\\"text/vnd.curl.scurl\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"scurl\\\"]},\\\"text/vnd.debian.copyright\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\"},\\\"text/vnd.dmclientscript\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.dvb.subtitle\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"sub\\\"]},\\\"text/vnd.esmertec.theme-descriptor\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\"},\\\"text/vnd.ficlab.flt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.fly\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fly\\\"]},\\\"text/vnd.fmi.flexstor\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"flx\\\"]},\\\"text/vnd.gml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.graphviz\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"gv\\\"]},\\\"text/vnd.hgl\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.in3d.3dml\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"3dml\\\"]},\\\"text/vnd.in3d.spot\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"spot\\\"]},\\\"text/vnd.iptc.newsml\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.iptc.nitf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.latex-z\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.motorola.reflex\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.ms-mediapackage\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.net2phone.commcenter.command\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.radisys.msml-basic-layout\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.senx.warpscript\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.si.uricatalogue\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.sosi\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.sun.j2me.app-descriptor\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"extensions\\\":[\\\"jad\\\"]},\\\"text/vnd.trolltech.linguist\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\"},\\\"text/vnd.wap.si\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.wap.sl\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/vnd.wap.wml\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wml\\\"]},\\\"text/vnd.wap.wmlscript\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"wmls\\\"]},\\\"text/vtt\\\":{\\\"source\\\":\\\"iana\\\",\\\"charset\\\":\\\"UTF-8\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"vtt\\\"]},\\\"text/x-asm\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"s\\\",\\\"asm\\\"]},\\\"text/x-c\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"c\\\",\\\"cc\\\",\\\"cxx\\\",\\\"cpp\\\",\\\"h\\\",\\\"hh\\\",\\\"dic\\\"]},\\\"text/x-component\\\":{\\\"source\\\":\\\"nginx\\\",\\\"extensions\\\":[\\\"htc\\\"]},\\\"text/x-fortran\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"f\\\",\\\"for\\\",\\\"f77\\\",\\\"f90\\\"]},\\\"text/x-gwt-rpc\\\":{\\\"compressible\\\":true},\\\"text/x-handlebars-template\\\":{\\\"extensions\\\":[\\\"hbs\\\"]},\\\"text/x-java-source\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"java\\\"]},\\\"text/x-jquery-tmpl\\\":{\\\"compressible\\\":true},\\\"text/x-lua\\\":{\\\"extensions\\\":[\\\"lua\\\"]},\\\"text/x-markdown\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"mkd\\\"]},\\\"text/x-nfo\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"nfo\\\"]},\\\"text/x-opml\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"opml\\\"]},\\\"text/x-org\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"org\\\"]},\\\"text/x-pascal\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"p\\\",\\\"pas\\\"]},\\\"text/x-processing\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"pde\\\"]},\\\"text/x-sass\\\":{\\\"extensions\\\":[\\\"sass\\\"]},\\\"text/x-scss\\\":{\\\"extensions\\\":[\\\"scss\\\"]},\\\"text/x-setext\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"etx\\\"]},\\\"text/x-sfv\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"sfv\\\"]},\\\"text/x-suse-ymp\\\":{\\\"compressible\\\":true,\\\"extensions\\\":[\\\"ymp\\\"]},\\\"text/x-uuencode\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"uu\\\"]},\\\"text/x-vcalendar\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"vcs\\\"]},\\\"text/x-vcard\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"vcf\\\"]},\\\"text/xml\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":true,\\\"extensions\\\":[\\\"xml\\\"]},\\\"text/xml-external-parsed-entity\\\":{\\\"source\\\":\\\"iana\\\"},\\\"text/yaml\\\":{\\\"extensions\\\":[\\\"yaml\\\",\\\"yml\\\"]},\\\"video/1d-interleaved-parityfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/3gpp\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"3gp\\\",\\\"3gpp\\\"]},\\\"video/3gpp-tt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/3gpp2\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"3g2\\\"]},\\\"video/bmpeg\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/bt656\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/celb\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/dv\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/encaprtp\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/flexfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/h261\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"h261\\\"]},\\\"video/h263\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"h263\\\"]},\\\"video/h263-1998\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/h263-2000\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/h264\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"h264\\\"]},\\\"video/h264-rcdo\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/h264-svc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/h265\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/iso.segment\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/jpeg\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"jpgv\\\"]},\\\"video/jpeg2000\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/jpm\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"jpm\\\",\\\"jpgm\\\"]},\\\"video/mj2\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mj2\\\",\\\"mjp2\\\"]},\\\"video/mp1s\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/mp2p\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/mp2t\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"ts\\\"]},\\\"video/mp4\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"mp4\\\",\\\"mp4v\\\",\\\"mpg4\\\"]},\\\"video/mp4v-es\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/mpeg\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"mpeg\\\",\\\"mpg\\\",\\\"mpe\\\",\\\"m1v\\\",\\\"m2v\\\"]},\\\"video/mpeg4-generic\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/mpv\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/nv\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/ogg\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"ogv\\\"]},\\\"video/parityfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/pointer\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/quicktime\\\":{\\\"source\\\":\\\"iana\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"qt\\\",\\\"mov\\\"]},\\\"video/raptorfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/raw\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/rtp-enc-aescm128\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/rtploopback\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/rtx\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/smpte291\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/smpte292m\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/ulpfec\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vc1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vc2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.cctv\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.dece.hd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvh\\\",\\\"uvvh\\\"]},\\\"video/vnd.dece.mobile\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvm\\\",\\\"uvvm\\\"]},\\\"video/vnd.dece.mp4\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.dece.pd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvp\\\",\\\"uvvp\\\"]},\\\"video/vnd.dece.sd\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvs\\\",\\\"uvvs\\\"]},\\\"video/vnd.dece.video\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvv\\\",\\\"uvvv\\\"]},\\\"video/vnd.directv.mpeg\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.directv.mpeg-tts\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.dlna.mpeg-tts\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.dvb.file\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"dvb\\\"]},\\\"video/vnd.fvt\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"fvt\\\"]},\\\"video/vnd.hns.video\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.iptvforum.1dparityfec-1010\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.iptvforum.1dparityfec-2005\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.iptvforum.2dparityfec-1010\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.iptvforum.2dparityfec-2005\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.iptvforum.ttsavc\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.iptvforum.ttsmpeg2\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.motorola.video\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.motorola.videop\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.mpegurl\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"mxu\\\",\\\"m4u\\\"]},\\\"video/vnd.ms-playready.media.pyv\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"pyv\\\"]},\\\"video/vnd.nokia.interleaved-multimedia\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.nokia.mp4vr\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.nokia.videovoip\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.objectvideo\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.radgamettools.bink\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.radgamettools.smacker\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.sealed.mpeg1\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.sealed.mpeg4\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.sealed.swf\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.sealedmedia.softseal.mov\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vnd.uvvu.mp4\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"uvu\\\",\\\"uvvu\\\"]},\\\"video/vnd.vivo\\\":{\\\"source\\\":\\\"iana\\\",\\\"extensions\\\":[\\\"viv\\\"]},\\\"video/vnd.youtube.yt\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/vp8\\\":{\\\"source\\\":\\\"iana\\\"},\\\"video/webm\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"webm\\\"]},\\\"video/x-f4v\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"f4v\\\"]},\\\"video/x-fli\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"fli\\\"]},\\\"video/x-flv\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"flv\\\"]},\\\"video/x-m4v\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"m4v\\\"]},\\\"video/x-matroska\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"mkv\\\",\\\"mk3d\\\",\\\"mks\\\"]},\\\"video/x-mng\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"mng\\\"]},\\\"video/x-ms-asf\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"asf\\\",\\\"asx\\\"]},\\\"video/x-ms-vob\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"vob\\\"]},\\\"video/x-ms-wm\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wm\\\"]},\\\"video/x-ms-wmv\\\":{\\\"source\\\":\\\"apache\\\",\\\"compressible\\\":false,\\\"extensions\\\":[\\\"wmv\\\"]},\\\"video/x-ms-wmx\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wmx\\\"]},\\\"video/x-ms-wvx\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"wvx\\\"]},\\\"video/x-msvideo\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"avi\\\"]},\\\"video/x-sgi-movie\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"movie\\\"]},\\\"video/x-smv\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"smv\\\"]},\\\"x-conference/x-cooltalk\\\":{\\\"source\\\":\\\"apache\\\",\\\"extensions\\\":[\\\"ice\\\"]},\\\"x-shader/x-fragment\\\":{\\\"compressible\\\":true},\\\"x-shader/x-vertex\\\":{\\\"compressible\\\":true}}\");\n\n//# sourceURL=webpack:///./node_modules/mime-db/db.json?");

/***/ }),

/***/ "./node_modules/mime-db/index.js":
/*!***************************************!*\
  !*** ./node_modules/mime-db/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = __webpack_require__(/*! ./db.json */ \"./node_modules/mime-db/db.json\")\n\n\n//# sourceURL=webpack:///./node_modules/mime-db/index.js?");

/***/ }),

/***/ "./node_modules/mime-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/mime-types/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = __webpack_require__(/*! mime-db */ \"./node_modules/mime-db/index.js\")\nvar extname = __webpack_require__(/*! path */ \"path\").extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n\n\n//# sourceURL=webpack:///./node_modules/mime-types/index.js?");

/***/ }),

/***/ "./node_modules/node-fetch/lib/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/node-fetch/lib/index.mjs ***!
  \***********************************************/
/*! exports provided: default, Headers, Request, Response, FetchError */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FetchError\", function() { return FetchError; });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zlib */ \"zlib\");\n\n\n\n\n\n\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n\n// fix for \"Readable\" isn't a named export issue\nconst Readable = stream__WEBPACK_IMPORTED_MODULE_0__.Readable;\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\nclass Blob {\n\tconstructor() {\n\t\tthis[TYPE] = '';\n\n\t\tconst blobParts = arguments[0];\n\t\tconst options = arguments[1];\n\n\t\tconst buffers = [];\n\t\tlet size = 0;\n\n\t\tif (blobParts) {\n\t\t\tconst a = blobParts;\n\t\t\tconst length = Number(a.length);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst element = a[i];\n\t\t\t\tlet buffer;\n\t\t\t\tif (element instanceof Buffer) {\n\t\t\t\t\tbuffer = element;\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\n\t\t\t\t\tbuffer = Buffer.from(element);\n\t\t\t\t} else if (element instanceof Blob) {\n\t\t\t\t\tbuffer = element[BUFFER];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\n\t\t\t\t}\n\t\t\t\tsize += buffer.length;\n\t\t\t\tbuffers.push(buffer);\n\t\t\t}\n\t\t}\n\n\t\tthis[BUFFER] = Buffer.concat(buffers);\n\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\n\t\t\tthis[TYPE] = type;\n\t\t}\n\t}\n\tget size() {\n\t\treturn this[BUFFER].length;\n\t}\n\tget type() {\n\t\treturn this[TYPE];\n\t}\n\ttext() {\n\t\treturn Promise.resolve(this[BUFFER].toString());\n\t}\n\tarrayBuffer() {\n\t\tconst buf = this[BUFFER];\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\treturn Promise.resolve(ab);\n\t}\n\tstream() {\n\t\tconst readable = new Readable();\n\t\treadable._read = function () {};\n\t\treadable.push(this[BUFFER]);\n\t\treadable.push(null);\n\t\treturn readable;\n\t}\n\ttoString() {\n\t\treturn '[object Blob]';\n\t}\n\tslice() {\n\t\tconst size = this.size;\n\n\t\tconst start = arguments[0];\n\t\tconst end = arguments[1];\n\t\tlet relativeStart, relativeEnd;\n\t\tif (start === undefined) {\n\t\t\trelativeStart = 0;\n\t\t} else if (start < 0) {\n\t\t\trelativeStart = Math.max(size + start, 0);\n\t\t} else {\n\t\t\trelativeStart = Math.min(start, size);\n\t\t}\n\t\tif (end === undefined) {\n\t\t\trelativeEnd = size;\n\t\t} else if (end < 0) {\n\t\t\trelativeEnd = Math.max(size + end, 0);\n\t\t} else {\n\t\t\trelativeEnd = Math.min(end, size);\n\t\t}\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\n\n\t\tconst buffer = this[BUFFER];\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n\t\tconst blob = new Blob([], { type: arguments[2] });\n\t\tblob[BUFFER] = slicedBuffer;\n\t\treturn blob;\n\t}\n}\n\nObject.defineProperties(Blob.prototype, {\n\tsize: { enumerable: true },\n\ttype: { enumerable: true },\n\tslice: { enumerable: true }\n});\n\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n\tvalue: 'Blob',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n\n  this.message = message;\n  this.type = type;\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';\n\nlet convert;\ntry {\n\tconvert = require('encoding').convert;\n} catch (e) {}\n\nconst INTERNALS = Symbol('Body internals');\n\n// fix an issue where \"PassThrough\" isn't a named export for node <10\nconst PassThrough = stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough;\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body) {\n\tvar _this = this;\n\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t    _ref$size = _ref.size;\n\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\n\tvar _ref$timeout = _ref.timeout;\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n\n\tif (body == null) {\n\t\t// body is undefined or null\n\t\tbody = null;\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\tbody = Buffer.from(body.toString());\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\tbody = Buffer.from(body);\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t} else if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) ; else {\n\t\t// none of the above\n\t\t// coerce to string then buffer\n\t\tbody = Buffer.from(String(body));\n\t}\n\tthis[INTERNALS] = {\n\t\tbody,\n\t\tdisturbed: false,\n\t\terror: null\n\t};\n\tthis.size = size;\n\tthis.timeout = timeout;\n\n\tif (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) {\n\t\tbody.on('error', function (err) {\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\n\t\t\t_this[INTERNALS].error = error;\n\t\t});\n\t}\n}\n\nBody.prototype = {\n\tget body() {\n\t\treturn this[INTERNALS].body;\n\t},\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t},\n\n\t/**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */\n\tarrayBuffer() {\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t});\n\t},\n\n\t/**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */\n\tblob() {\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn Object.assign(\n\t\t\t// Prevent copying\n\t\t\tnew Blob([], {\n\t\t\t\ttype: ct.toLowerCase()\n\t\t\t}), {\n\t\t\t\t[BUFFER]: buf\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n  * Decode response as json\n  *\n  * @return  Promise\n  */\n\tjson() {\n\t\tvar _this2 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(buffer.toString());\n\t\t\t} catch (err) {\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n  * Decode response as text\n  *\n  * @return  Promise\n  */\n\ttext() {\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn buffer.toString();\n\t\t});\n\t},\n\n\t/**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */\n\tbuffer() {\n\t\treturn consumeBody.call(this);\n\t},\n\n\t/**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */\n\ttextConverted() {\n\t\tvar _this3 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn convertBody(buffer, _this3.headers);\n\t\t});\n\t}\n};\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: { enumerable: true },\n\tbodyUsed: { enumerable: true },\n\tarrayBuffer: { enumerable: true },\n\tblob: { enumerable: true },\n\tjson: { enumerable: true },\n\ttext: { enumerable: true }\n});\n\nBody.mixIn = function (proto) {\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\n\t\t// istanbul ignore else: future proof\n\t\tif (!(name in proto)) {\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n\t\t\tObject.defineProperty(proto, name, desc);\n\t\t}\n\t}\n};\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */\nfunction consumeBody() {\n\tvar _this4 = this;\n\n\tif (this[INTERNALS].disturbed) {\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n\t}\n\n\tthis[INTERNALS].disturbed = true;\n\n\tif (this[INTERNALS].error) {\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\n\t}\n\n\tlet body = this.body;\n\n\t// body is null\n\tif (body === null) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is blob\n\tif (isBlob(body)) {\n\t\tbody = body.stream();\n\t}\n\n\t// body is buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn Body.Promise.resolve(body);\n\t}\n\n\t// istanbul ignore if: should never happen\n\tif (!(body instanceof stream__WEBPACK_IMPORTED_MODULE_0__)) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is stream\n\t// get ready to actually consume the body\n\tlet accum = [];\n\tlet accumBytes = 0;\n\tlet abort = false;\n\n\treturn new Body.Promise(function (resolve, reject) {\n\t\tlet resTimeout;\n\n\t\t// allow timeout on slow response body\n\t\tif (_this4.timeout) {\n\t\t\tresTimeout = setTimeout(function () {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\n\t\t\t}, _this4.timeout);\n\t\t}\n\n\t\t// handle stream errors\n\t\tbody.on('error', function (err) {\n\t\t\tif (err.name === 'AbortError') {\n\t\t\t\t// if the request was aborted, reject with this Error\n\t\t\t\tabort = true;\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t// other errors, such as incorrect content-encoding\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\n\t\tbody.on('data', function (chunk) {\n\t\t\tif (abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t});\n\n\t\tbody.on('end', function () {\n\t\t\tif (abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\n\t\t\ttry {\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\n\t\t\t} catch (err) {\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody(buffer, headers) {\n\tif (typeof convert !== 'function') {\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\n\t}\n\n\tconst ct = headers.get('content-type');\n\tlet charset = 'utf-8';\n\tlet res, str;\n\n\t// header\n\tif (ct) {\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tstr = buffer.slice(0, 1024).toString();\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(buffer, 'UTF-8', charset).toString();\n}\n\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */\nfunction isURLSearchParams(obj) {\n\t// Duck-typing as a necessary condition.\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\n\t\treturn false;\n\t}\n\n\t// Brand-checking and more duck-typing as optional condition.\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\n}\n\n/**\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob(obj) {\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nfunction clone(instance) {\n\tlet p1, p2;\n\tlet body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__ && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Any options.body input\n */\nfunction extractContentType(body) {\n\tif (body === null) {\n\t\t// body is null\n\t\treturn null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn 'text/plain;charset=UTF-8';\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t} else if (isBlob(body)) {\n\t\t// body is blob\n\t\treturn body.type || null;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn null;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\treturn null;\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\treturn null;\n\t} else if (typeof body.getBoundary === 'function') {\n\t\t// detect form data input from form-data module\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\n\t} else if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t} else {\n\t\t// Body constructor defaults other things to string\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n}\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */\nfunction getTotalBytes(instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn 0;\n\t} else if (isBlob(body)) {\n\t\treturn body.size;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn body.length;\n\t} else if (body && typeof body.getLengthSync === 'function') {\n\t\t// detect form data input from form-data module\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\n\t\t\t// 2.x\n\t\t\treturn body.getLengthSync();\n\t\t}\n\t\treturn null;\n\t} else {\n\t\t// body is stream\n\t\treturn null;\n\t}\n}\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */\nfunction writeToStream(dest, instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\tdest.end();\n\t} else if (isBlob(body)) {\n\t\tbody.stream().pipe(dest);\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else {\n\t\t// body is stream\n\t\tbody.pipe(dest);\n\t}\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction validateName(name) {\n\tname = `${name}`;\n\tif (invalidTokenRegex.test(name) || name === '') {\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\n\t}\n}\n\nfunction validateValue(value) {\n\tvalue = `${value}`;\n\tif (invalidHeaderCharRegex.test(value)) {\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\n\t}\n}\n\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */\nfunction find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst MAP = Symbol('map');\nclass Headers {\n\t/**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */\n\tconstructor() {\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n\t\tthis[MAP] = Object.create(null);\n\n\t\tif (init instanceof Headers) {\n\t\t\tconst rawHeaders = init.raw();\n\t\t\tconst headerNames = Object.keys(rawHeaders);\n\n\t\t\tfor (const headerName of headerNames) {\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\n\t\t\t\t\tthis.append(headerName, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't worry about converting prop to ByteString here as append()\n\t\t// will handle it.\n\t\tif (init == null) ; else if (typeof init === 'object') {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\tif (method != null) {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor (const pair of init) {\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\n\t\t\t\t\t}\n\t\t\t\t\tpairs.push(Array.from(pair));\n\t\t\t\t}\n\n\t\t\t\tfor (const pair of pairs) {\n\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t}\n\t\t\t\t\tthis.append(pair[0], pair[1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// record<ByteString, ByteString>\n\t\t\t\tfor (const key of Object.keys(init)) {\n\t\t\t\t\tconst value = init[key];\n\t\t\t\t\tthis.append(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Provided initializer must be an object');\n\t\t}\n\t}\n\n\t/**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */\n\tget(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this[MAP][key].join(', ');\n\t}\n\n\t/**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */\n\tforEach(callback) {\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n\t\tlet pairs = getHeaders(this);\n\t\tlet i = 0;\n\t\twhile (i < pairs.length) {\n\t\t\tvar _pairs$i = pairs[i];\n\t\t\tconst name = _pairs$i[0],\n\t\t\t      value = _pairs$i[1];\n\n\t\t\tcallback.call(thisArg, value, name, this);\n\t\t\tpairs = getHeaders(this);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tset(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\n\t}\n\n\t/**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tappend(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tthis[MAP][key].push(value);\n\t\t} else {\n\t\t\tthis[MAP][name] = [value];\n\t\t}\n\t}\n\n\t/**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */\n\thas(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\treturn find(this[MAP], name) !== undefined;\n\t}\n\n\t/**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */\n\tdelete(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tdelete this[MAP][key];\n\t\t}\n\t}\n\n\t/**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */\n\traw() {\n\t\treturn this[MAP];\n\t}\n\n\t/**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */\n\tkeys() {\n\t\treturn createHeadersIterator(this, 'key');\n\t}\n\n\t/**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */\n\tvalues() {\n\t\treturn createHeadersIterator(this, 'value');\n\t}\n\n\t/**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */\n\t[Symbol.iterator]() {\n\t\treturn createHeadersIterator(this, 'key+value');\n\t}\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n\tvalue: 'Headers',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Headers.prototype, {\n\tget: { enumerable: true },\n\tforEach: { enumerable: true },\n\tset: { enumerable: true },\n\tappend: { enumerable: true },\n\thas: { enumerable: true },\n\tdelete: { enumerable: true },\n\tkeys: { enumerable: true },\n\tvalues: { enumerable: true },\n\tentries: { enumerable: true }\n});\n\nfunction getHeaders(headers) {\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\n\n\tconst keys = Object.keys(headers[MAP]).sort();\n\treturn keys.map(kind === 'key' ? function (k) {\n\t\treturn k.toLowerCase();\n\t} : kind === 'value' ? function (k) {\n\t\treturn headers[MAP][k].join(', ');\n\t} : function (k) {\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\n\t});\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n\tconst iterator = Object.create(HeadersIteratorPrototype);\n\titerator[INTERNAL] = {\n\t\ttarget,\n\t\tkind,\n\t\tindex: 0\n\t};\n\treturn iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n\tnext() {\n\t\t// istanbul ignore if\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\n\t\t}\n\n\t\tvar _INTERNAL = this[INTERNAL];\n\t\tconst target = _INTERNAL.target,\n\t\t      kind = _INTERNAL.kind,\n\t\t      index = _INTERNAL.index;\n\n\t\tconst values = getHeaders(target, kind);\n\t\tconst len = values.length;\n\t\tif (index >= len) {\n\t\t\treturn {\n\t\t\t\tvalue: undefined,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tthis[INTERNAL].index = index + 1;\n\n\t\treturn {\n\t\t\tvalue: values[index],\n\t\t\tdone: false\n\t\t};\n\t}\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n\tvalue: 'HeadersIterator',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */\nfunction exportNodeCompatibleHeaders(headers) {\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\n\n\t// http.request() only supports string as Host header. This hack makes\n\t// specifying custom Host header possible.\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\n\tif (hostHeaderKey !== undefined) {\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\n\t}\n\n\treturn obj;\n}\n\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */\nfunction createHeadersLenient(obj) {\n\tconst headers = new Headers();\n\tfor (const name of Object.keys(obj)) {\n\t\tif (invalidTokenRegex.test(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Array.isArray(obj[name])) {\n\t\t\tfor (const val of obj[name]) {\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (headers[MAP][name] === undefined) {\n\t\t\t\t\theaders[MAP][name] = [val];\n\t\t\t\t} else {\n\t\t\t\t\theaders[MAP][name].push(val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\n\t\t\theaders[MAP][name] = [obj[name]];\n\t\t}\n\t}\n\treturn headers;\n}\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\nconst STATUS_CODES = http__WEBPACK_IMPORTED_MODULE_1__.STATUS_CODES;\n\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response {\n\tconstructor() {\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tBody.call(this, body, opts);\n\n\t\tconst status = opts.status || 200;\n\t\tconst headers = new Headers(opts.headers);\n\n\t\tif (body != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$1] = {\n\t\t\turl: opts.url,\n\t\t\tstatus,\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\n\t\t\theaders,\n\t\t\tcounter: opts.counter\n\t\t};\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n  * Convenience property representing if the request ended normally\n  */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS$1].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\t/**\n  * Clone this response\n  *\n  * @return  Response\n  */\n\tclone() {\n\t\treturn new Response(clone(this), {\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected\n\t\t});\n\t}\n}\n\nBody.mixIn(Response.prototype);\n\nObject.defineProperties(Response.prototype, {\n\turl: { enumerable: true },\n\tstatus: { enumerable: true },\n\tok: { enumerable: true },\n\tredirected: { enumerable: true },\n\tstatusText: { enumerable: true },\n\theaders: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n\tvalue: 'Response',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nconst INTERNALS$2 = Symbol('Request internals');\n\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\nconst parse_url = url__WEBPACK_IMPORTED_MODULE_2__.parse;\nconst format_url = url__WEBPACK_IMPORTED_MODULE_2__.format;\n\nconst streamDestructionSupported = 'destroy' in stream__WEBPACK_IMPORTED_MODULE_0__.Readable.prototype;\n\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */\nfunction isRequest(input) {\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\n}\n\nfunction isAbortSignal(signal) {\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\n}\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n\tconstructor(input) {\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tlet parsedURL;\n\n\t\t// normalize input\n\t\tif (!isRequest(input)) {\n\t\t\tif (input && input.href) {\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\n\t\t\t\t// `href` property anyway)\n\t\t\t\tparsedURL = parse_url(input.href);\n\t\t\t} else {\n\t\t\t\t// coerce input to a string before attempting to parse\n\t\t\t\tparsedURL = parse_url(`${input}`);\n\t\t\t}\n\t\t\tinput = {};\n\t\t} else {\n\t\t\tparsedURL = parse_url(input.url);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n\n\t\tBody.call(this, inputBody, {\n\t\t\ttimeout: init.timeout || input.timeout || 0,\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ? input.signal : null;\n\t\tif ('signal' in init) signal = init.signal;\n\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal\n\t\t};\n\n\t\t// node-fetch-only options\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS$2].method;\n\t}\n\n\tget url() {\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$2].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS$2].redirect;\n\t}\n\n\tget signal() {\n\t\treturn this[INTERNALS$2].signal;\n\t}\n\n\t/**\n  * Clone this request\n  *\n  * @return  Request\n  */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n}\n\nBody.mixIn(Request.prototype);\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n\tvalue: 'Request',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Request.prototype, {\n\tmethod: { enumerable: true },\n\turl: { enumerable: true },\n\theaders: { enumerable: true },\n\tredirect: { enumerable: true },\n\tclone: { enumerable: true },\n\tsignal: { enumerable: true }\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nfunction getNodeRequestOptions(request) {\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\n\tconst headers = new Headers(request[INTERNALS$2].headers);\n\n\t// fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// Basic fetch\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\n\t\tthrow new TypeError('Only absolute URLs are supported');\n\t}\n\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\n\t}\n\n\tif (request.signal && request.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable && !streamDestructionSupported) {\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\tif (request.body != null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\tif (typeof totalBytes === 'number') {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\n\t}\n\n\tlet agent = request.agent;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\tif (!headers.has('Connection') && !agent) {\n\t\theaders.set('Connection', 'close');\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\treturn Object.assign({}, parsedURL, {\n\t\tmethod: request.method,\n\t\theaders: exportNodeCompatibleHeaders(headers),\n\t\tagent\n\t});\n}\n\n/**\n * abort-error.js\n *\n * AbortError interface for cancelled requests\n */\n\n/**\n * Create AbortError instance\n *\n * @param   String      message      Error message for human\n * @return  AbortError\n */\nfunction AbortError(message) {\n  Error.call(this, message);\n\n  this.type = 'aborted';\n  this.message = message;\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nAbortError.prototype = Object.create(Error.prototype);\nAbortError.prototype.constructor = AbortError;\nAbortError.prototype.name = 'AbortError';\n\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\nconst PassThrough$1 = stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough;\nconst resolve_url = url__WEBPACK_IMPORTED_MODULE_2__.resolve;\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nfunction fetch(url, opts) {\n\n\t// allow custom promise\n\tif (!fetch.Promise) {\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\n\t}\n\n\tBody.Promise = fetch.Promise;\n\n\t// wrap http.request into fetch\n\treturn new fetch.Promise(function (resolve, reject) {\n\t\t// build request object\n\t\tconst request = new Request(url, opts);\n\t\tconst options = getNodeRequestOptions(request);\n\n\t\tconst send = (options.protocol === 'https:' ? https__WEBPACK_IMPORTED_MODULE_3__ : http__WEBPACK_IMPORTED_MODULE_1__).request;\n\t\tconst signal = request.signal;\n\n\t\tlet response = null;\n\n\t\tconst abort = function abort() {\n\t\t\tlet error = new AbortError('The user aborted a request.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\t\t\tif (!response || !response.body) return;\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = function abortAndFinalize() {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// send request\n\t\tconst req = send(options);\n\t\tlet reqTimeout;\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tfunction finalize() {\n\t\t\treq.abort();\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\tclearTimeout(reqTimeout);\n\t\t}\n\n\t\tif (request.timeout) {\n\t\t\treq.once('socket', function (socket) {\n\t\t\t\treqTimeout = setTimeout(function () {\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n\t\t\t\t\tfinalize();\n\t\t\t\t}, request.timeout);\n\t\t\t});\n\t\t}\n\n\t\treq.on('error', function (err) {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\t\t\tfinalize();\n\t\t});\n\n\t\treq.on('response', function (res) {\n\t\t\tclearTimeout(reqTimeout);\n\n\t\t\tconst headers = createHeadersLenient(res.headers);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tconst locationURL = location === null ? null : resolve_url(request.url, location);\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\t// handle corrupted header\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow':\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOpts = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\ttimeout: request.timeout\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\n\t\t\t\t\t\t\trequestOpts.body = undefined;\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prepare response\n\t\t\tres.once('end', function () {\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\t});\n\t\t\tlet body = res.pipe(new PassThrough$1());\n\n\t\t\tconst response_options = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: res.statusCode,\n\t\t\t\tstatusText: res.statusMessage,\n\t\t\t\theaders: headers,\n\t\t\t\tsize: request.size,\n\t\t\t\ttimeout: request.timeout,\n\t\t\t\tcounter: request.counter\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib__WEBPACK_IMPORTED_MODULE_4__.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib__WEBPACK_IMPORTED_MODULE_4__.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// for gzip\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\n\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_4__.createGunzip(zlibOptions));\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for deflate\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\n\t\t\t\t// handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\n\t\t\t\traw.once('data', function (chunk) {\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_4__.createInflate());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_4__.createInflateRaw());\n\t\t\t\t\t}\n\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for br\n\t\t\tif (codings == 'br' && typeof zlib__WEBPACK_IMPORTED_MODULE_4__.createBrotliDecompress === 'function') {\n\t\t\t\tbody = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_4__.createBrotliDecompress());\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// otherwise, use response as-is\n\t\t\tresponse = new Response(body, response_options);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(req, request);\n\t});\n}\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = function (code) {\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n\n// expose Promise\nfetch.Promise = global.Promise;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (fetch);\n\n\n\n//# sourceURL=webpack:///./node_modules/node-fetch/lib/index.mjs?");

/***/ }),

/***/ "./node_modules/prism-media/src/core/FFmpeg.js":
/*!*****************************************************!*\
  !*** ./node_modules/prism-media/src/core/FFmpeg.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const ChildProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n\nlet FFMPEG = {\n  command: null,\n  output: null,\n};\n\nconst VERSION_REGEX = /version (.+) Copyright/mi;\n\nObject.defineProperty(FFMPEG, 'version', {\n  get() {\n    return VERSION_REGEX.exec(FFMPEG.output)[1];\n  },\n  enumerable: true,\n});\n\n/**\n * An FFmpeg transform stream that provides an interface to FFmpeg.\n * @memberof core\n */\nclass FFmpeg extends Duplex {\n  /**\n   * Creates a new FFmpeg transform stream\n   * @memberof core\n   * @param {Object} options Options you would pass to a regular Transform stream, plus an `args` option\n   * @param {Array<string>} options.args Arguments to pass to FFmpeg\n   * @example\n   * // By default, if you don't specify an input (`-i ...`) prism will assume you're piping a stream into it.\n   * const transcoder = new prism.FFmpeg({\n   *  args: [\n   *    '-analyzeduration', '0',\n   *    '-loglevel', '0',\n   *    '-f', 's16le',\n   *    '-ar', '48000',\n   *    '-ac', '2',\n   *  ]\n   * });\n   * const s16le = mp3File.pipe(transcoder);\n   * const opus = s16le.pipe(new prism.opus.Encoder({ rate: 48000, channels: 2, frameSize: 960 }));\n   */\n  constructor(options = {}) {\n    super();\n    this.process = FFmpeg.create(options);\n    const EVENTS = {\n      readable: this._reader,\n      data: this._reader,\n      end: this._reader,\n      unpipe: this._reader,\n      finish: this._writer,\n      drain: this._writer,\n    };\n\n    this._readableState = this._reader._readableState;\n    this._writableState = this._writer._writableState;\n\n    this._copy(['write', 'end'], this._writer);\n    this._copy(['read', 'setEncoding', 'pipe', 'unpipe'], this._reader);\n\n    for (const method of ['on', 'once', 'removeListener', 'removeListeners', 'listeners']) {\n      this[method] = (ev, fn) => EVENTS[ev] ? EVENTS[ev][method](ev, fn) : Duplex.prototype[method].call(this, ev, fn);\n    }\n\n    const processError = error => this.emit('error', error);\n    this._reader.on('error', processError);\n    this._writer.on('error', processError);\n  }\n\n  get _reader() { return this.process.stdout; }\n  get _writer() { return this.process.stdin; }\n\n  _copy(methods, target) {\n    for (const method of methods) {\n      this[method] = target[method].bind(target);\n    }\n  }\n\n  _destroy(err, cb) {\n    super._destroy(err, cb);\n    this.once('error', () => {});\n    this.process.kill('SIGKILL');\n  }\n\n\n  /**\n   * The available FFmpeg information\n   * @typedef {Object} FFmpegInfo\n   * @memberof core\n   * @property {string} command The command used to launch FFmpeg\n   * @property {string} output The output from running `ffmpeg -h`\n   * @property {string} version The version of FFmpeg being used, determined from `output`.\n   */\n\n  /**\n   * Finds a suitable FFmpeg command and obtains the debug information from it.\n   * @param {boolean} [force=false] If true, will ignore any cached results and search for the command again\n   * @returns {FFmpegInfo}\n   * @throws Will throw an error if FFmpeg cannot be found.\n   * @example\n   * const ffmpeg = prism.FFmpeg.getInfo();\n   *\n   * console.log(`Using FFmpeg version ${ffmpeg.version}`);\n   *\n   * if (ffmpeg.output.includes('--enable-libopus')) {\n   *   console.log('libopus is available!');\n   * } else {\n   *   console.log('libopus is unavailable!');\n   * }\n   */\n  static getInfo(force = false) {\n    if (FFMPEG.command && !force) return FFMPEG;\n    const sources = [() => {\n      const ffmpegStatic = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'ffmpeg-static'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n      return ffmpegStatic.path || ffmpegStatic;\n    }, 'ffmpeg', 'avconv', './ffmpeg', './avconv'];\n    for (let source of sources) {\n      try {\n        if (typeof source === 'function') source = source();\n        const result = ChildProcess.spawnSync(source, ['-h'], { windowsHide: true });\n        if (result.error) throw result.error;\n        Object.assign(FFMPEG, {\n          command: source,\n          output: Buffer.concat(result.output.filter(Boolean)).toString(),\n        });\n        return FFMPEG;\n      } catch (error) {\n        // Do nothing\n      }\n    }\n    throw new Error('FFmpeg/avconv not found!');\n  }\n\n  /**\n   * Creates a new FFmpeg instance. If you do not include `-i ...` it will be assumed that `-i -` should be prepended\n   * to the options and that you'll be piping data into the process.\n   * @param {String[]} [args=[]] Arguments to pass to FFmpeg\n   * @returns {ChildProcess}\n   * @private\n   * @throws Will throw an error if FFmpeg cannot be found.\n   */\n  static create({ args = [] } = {}) {\n    if (!args.includes('-i')) args.unshift('-i', '-');\n    return ChildProcess.spawn(FFmpeg.getInfo().command, args.concat(['pipe:1']), { windowsHide: true });\n  }\n}\n\nmodule.exports = FFmpeg;\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/core/FFmpeg.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/core/VolumeTransformer.js":
/*!****************************************************************!*\
  !*** ./node_modules/prism-media/src/core/VolumeTransformer.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Based on discord.js' old volume system\n\nconst { Transform } = __webpack_require__(/*! stream */ \"stream\");\n\n/**\n * Transforms a stream of PCM volume.\n * @memberof core\n * @extends TransformStream\n */\nclass VolumeTransformer extends Transform {\n  /**\n   * @memberof core\n   * @param {Object} options Any optional TransformStream options plus some extra:\n   * @param {string} options.type The type of transformer: s16le (signed 16-bit little-endian), s16be, s32le, s32be\n   * @param {number} [options.volume=1] The output volume of the stream\n   * @example\n   * // Half the volume of a signed 16-bit little-endian PCM stream\n   * input\n   *  .pipe(new prism.VolumeTransformer({ type: 's16le', volume: 0.5 }))\n   *  .pipe(writeStream);\n   */\n  constructor(options = {}) {\n    super(options);\n    switch (options.type) {\n      case 's16le':\n        this._readInt = (buffer, index) => buffer.readInt16LE(index);\n        this._writeInt = (buffer, int, index) => buffer.writeInt16LE(int, index);\n        this._bits = 16;\n        break;\n      case 's16be':\n        this._readInt = (buffer, index) => buffer.readInt16BE(index);\n        this._writeInt = (buffer, int, index) => buffer.writeInt16BE(int, index);\n        this._bits = 16;\n        break;\n      case 's32le':\n        this._readInt = (buffer, index) => buffer.readInt32LE(index);\n        this._writeInt = (buffer, int, index) => buffer.writeInt32LE(int, index);\n        this._bits = 32;\n        break;\n      case 's32be':\n        this._readInt = (buffer, index) => buffer.readInt32BE(index);\n        this._writeInt = (buffer, int, index) => buffer.writeInt32BE(int, index);\n        this._bits = 32;\n        break;\n      default:\n        throw new Error('VolumeTransformer type should be one of s16le, s16be, s32le, s32be');\n    }\n    this._bytes = this._bits / 8;\n    this._extremum = Math.pow(2, this._bits - 1);\n    this.volume = typeof options.volume === 'undefined' ? 1 : options.volume;\n    this._chunk = Buffer.alloc(0);\n  }\n\n  _readInt(buffer, index) { return index; }\n  _writeInt(buffer, int, index) { return index; }\n\n  _transform(chunk, encoding, done) {\n    // If the volume is 1, act like a passthrough stream\n    if (this.volume === 1) {\n      this.push(chunk);\n      return done();\n    }\n\n    const { _bytes, _extremum } = this;\n\n    chunk = this._chunk = Buffer.concat([this._chunk, chunk]);\n    if (chunk.length < _bytes) return done();\n\n    const transformed = Buffer.allocUnsafe(chunk.length);\n    const complete = Math.floor(chunk.length / _bytes) * _bytes;\n\n    for (let i = 0; i < complete; i += _bytes) {\n      const int = Math.min(_extremum - 1, Math.max(-_extremum, Math.floor(this.volume * this._readInt(chunk, i))));\n      this._writeInt(transformed, int, i);\n    }\n\n    this._chunk = chunk.slice(complete);\n    this.push(transformed);\n    return done();\n  }\n\n  _destroy(err, cb) {\n    super._destroy(err, cb);\n    this._chunk = null;\n  }\n\n  /**\n   * Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.\n   * @param {number} volume The volume that you want to set\n   */\n  setVolume(volume) {\n    this.volume = volume;\n  }\n\n  /**\n   * Sets the volume in decibels.\n   * @param {number} db The decibels\n   */\n  setVolumeDecibels(db) {\n    this.setVolume(Math.pow(10, db / 20));\n  }\n\n  /**\n   * Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.\n   * @param {number} value The value for the volume\n   */\n  setVolumeLogarithmic(value) {\n    this.setVolume(Math.pow(value, 1.660964));\n  }\n\n  /**\n   * The current volume of the stream in decibels\n   * @readonly\n   * @type {number}\n   */\n  get volumeDecibels() {\n    return Math.log10(this._volume) * 20;\n  }\n  /**\n   * The current volume of the stream from a logarithmic scale\n   * @readonly\n   * @type {number}\n   */\n  get volumeLogarithmic() {\n    return Math.pow(this._volume, 1 / 1.660964);\n  }\n}\n\nmodule.exports = VolumeTransformer;\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/core/VolumeTransformer.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/core/WebmBase.js":
/*!*******************************************************!*\
  !*** ./node_modules/prism-media/src/core/WebmBase.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { Transform } = __webpack_require__(/*! stream */ \"stream\");\n\n/**\n * Base class for WebmOpusDemuxer and WebmVorbisDemuxer.\n * **You shouldn't directly instantiate this class, use the opus.WebmDemuxer and vorbis.WebmDemuxer\n * implementations instead!**\n * @memberof core\n * @protected\n * @extends TransformStream\n */\nclass WebmBaseDemuxer extends Transform {\n  /**\n   * Creates a new Webm demuxer.\n   * @private\n   * @memberof core\n   * @param {Object} [options] options that you would pass to a regular Transform stream.\n   */\n  constructor(options = {}) {\n    super(Object.assign({ readableObjectMode: true }, options));\n    this._remainder = null;\n    this._length = 0;\n    this._count = 0;\n    this._skipUntil = null;\n    this._track = null;\n    this._incompleteTrack = {};\n    this._ebmlFound = false;\n  }\n\n  _transform(chunk, encoding, done) {\n    this._length += chunk.length;\n    if (this._remainder) {\n      chunk = Buffer.concat([this._remainder, chunk]);\n      this._remainder = null;\n    }\n    let offset = 0;\n    if (this._skipUntil && this._length > this._skipUntil) {\n      offset = this._skipUntil - this._count;\n      this._skipUntil = null;\n    } else if (this._skipUntil) {\n      this._count += chunk.length;\n      return done();\n    }\n    let result;\n    while (result !== TOO_SHORT) {\n      result = this._readTag(chunk, offset);\n      if (result === TOO_SHORT) break;\n      if (result._skipUntil) {\n        this._skipUntil = result._skipUntil;\n        break;\n      }\n      if (result.offset) offset = result.offset;\n      else break;\n    }\n    this._count += offset;\n    this._remainder = chunk.slice(offset);\n    return done();\n  }\n\n  /**\n   * Reads an EBML ID from a buffer.\n   * @private\n   * @param {Buffer} chunk the buffer to read from.\n   * @param {number} offset the offset in the buffer.\n   * @returns {Object|Symbol} contains an `id` property (buffer) and the new `offset` (number).\n   * Returns the TOO_SHORT symbol if the data wasn't big enough to facilitate the request.\n   */\n  _readEBMLId(chunk, offset) {\n    const idLength = vintLength(chunk, offset);\n    if (idLength === TOO_SHORT) return TOO_SHORT;\n    return {\n      id: chunk.slice(offset, offset + idLength),\n      offset: offset + idLength,\n    };\n  }\n\n  /**\n   * Reads a size variable-integer to calculate the length of the data of a tag.\n   * @private\n   * @param {Buffer} chunk the buffer to read from.\n   * @param {number} offset the offset in the buffer.\n   * @returns {Object|Symbol} contains property `offset` (number), `dataLength` (number) and `sizeLength` (number).\n   * Returns the TOO_SHORT symbol if the data wasn't big enough to facilitate the request.\n   */\n  _readTagDataSize(chunk, offset) {\n    const sizeLength = vintLength(chunk, offset);\n    if (sizeLength === TOO_SHORT) return TOO_SHORT;\n    const dataLength = expandVint(chunk, offset, offset + sizeLength);\n    return { offset: offset + sizeLength, dataLength, sizeLength };\n  }\n\n  /**\n   * Takes a buffer and attempts to read and process a tag.\n   * @private\n   * @param {Buffer} chunk the buffer to read from.\n   * @param {number} offset the offset in the buffer.\n   * @returns {Object|Symbol} contains the new `offset` (number) and optionally the `_skipUntil` property,\n   * indicating that the stream should ignore any data until a certain length is reached.\n   * Returns the TOO_SHORT symbol if the data wasn't big enough to facilitate the request.\n   */\n  _readTag(chunk, offset) {\n    const idData = this._readEBMLId(chunk, offset);\n    if (idData === TOO_SHORT) return TOO_SHORT;\n    const ebmlID = idData.id.toString('hex');\n    if (!this._ebmlFound) {\n      if (ebmlID === '1a45dfa3') this._ebmlFound = true;\n      else throw Error('Did not find the EBML tag at the start of the stream');\n    }\n    offset = idData.offset;\n    const sizeData = this._readTagDataSize(chunk, offset);\n    if (sizeData === TOO_SHORT) return TOO_SHORT;\n    const { dataLength } = sizeData;\n    offset = sizeData.offset;\n    // If this tag isn't useful, tell the stream to stop processing data until the tag ends\n    if (typeof TAGS[ebmlID] === 'undefined') {\n      if (chunk.length > offset + dataLength) {\n        return { offset: offset + dataLength };\n      }\n      return { offset, _skipUntil: this._count + offset + dataLength };\n    }\n\n    const tagHasChildren = TAGS[ebmlID];\n    if (tagHasChildren) {\n      return { offset };\n    }\n\n    if (offset + dataLength > chunk.length) return TOO_SHORT;\n    const data = chunk.slice(offset, offset + dataLength);\n    if (!this._track) {\n      if (ebmlID === 'ae') this._incompleteTrack = {};\n      if (ebmlID === 'd7') this._incompleteTrack.number = data[0];\n      if (ebmlID === '83') this._incompleteTrack.type = data[0];\n      if (this._incompleteTrack.type === 2 && typeof this._incompleteTrack.number !== 'undefined') {\n        this._track = this._incompleteTrack;\n      }\n    }\n    if (ebmlID === '63a2') {\n      this._checkHead(data);\n    } else if (ebmlID === 'a3') {\n      if (!this._track) throw Error('No audio track in this webm!');\n      if ((data[0] & 0xF) === this._track.number) {\n        this.push(data.slice(4));\n      }\n    }\n    return { offset: offset + dataLength };\n  }\n}\n\n/**\n * A symbol that is returned by some functions that indicates the buffer it has been provided is not large enough\n * to facilitate a request.\n * @name WebmBaseDemuxer#TOO_SHORT\n * @memberof core\n * @private\n * @type {Symbol}\n */\nconst TOO_SHORT = WebmBaseDemuxer.TOO_SHORT = Symbol('TOO_SHORT');\n\n/**\n * A map that takes a value of an EBML ID in hex string form, with the value being a boolean that indicates whether\n * this tag has children.\n * @name WebmBaseDemuxer#TAGS\n * @memberof core\n * @private\n * @type {Object}\n */\nconst TAGS = WebmBaseDemuxer.TAGS = { // value is true if the element has children\n  '1a45dfa3': true, // EBML\n  '18538067': true, // Segment\n  '1f43b675': true, // Cluster\n  '1654ae6b': true, // Tracks\n  'ae': true, // TrackEntry\n  'd7': false, // TrackNumber\n  '83': false, // TrackType\n  'a3': false, // SimpleBlock\n  '63a2': false,\n};\n\nmodule.exports = WebmBaseDemuxer;\n\nfunction vintLength(buffer, index) {\n  let i = 0;\n  for (; i < 8; i++) if ((1 << (7 - i)) & buffer[index]) break;\n  i++;\n  if (index + i > buffer.length) {\n    return TOO_SHORT;\n  }\n  return i;\n}\n\nfunction expandVint(buffer, start, end) {\n  const length = vintLength(buffer, start);\n  if (end > buffer.length || length === TOO_SHORT) return TOO_SHORT;\n  let mask = (1 << (8 - length)) - 1;\n  let value = buffer[start] & mask;\n  for (let i = start + 1; i < end; i++) {\n    value = (value << 8) + buffer[i];\n  }\n  return value;\n}\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/core/WebmBase.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/core/index.js":
/*!****************************************************!*\
  !*** ./node_modules/prism-media/src/core/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Core features.\n * **You shouldn't prefix imports from this namespace with `core`.**\n * @namespace core\n */\nmodule.exports = {\n  FFmpeg: __webpack_require__(/*! ./FFmpeg */ \"./node_modules/prism-media/src/core/FFmpeg.js\"),\n  VolumeTransformer: __webpack_require__(/*! ./VolumeTransformer */ \"./node_modules/prism-media/src/core/VolumeTransformer.js\"),\n};\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/core/index.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/prism-media/src/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = {\r\n  opus: __webpack_require__(/*! ./opus */ \"./node_modules/prism-media/src/opus/index.js\"),\r\n  vorbis: __webpack_require__(/*! ./vorbis */ \"./node_modules/prism-media/src/vorbis/index.js\"),\r\n  ...__webpack_require__(/*! ./core */ \"./node_modules/prism-media/src/core/index.js\"),\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/index.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/opus/OggDemuxer.js":
/*!*********************************************************!*\
  !*** ./node_modules/prism-media/src/opus/OggDemuxer.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { Transform } = __webpack_require__(/*! stream */ \"stream\");\n\nconst OGG_PAGE_HEADER_SIZE = 26;\nconst STREAM_STRUCTURE_VERSION = 0;\n\nconst charCode = x => x.charCodeAt(0);\nconst OGGS_HEADER = Buffer.from([...'OggS'].map(charCode));\nconst OPUS_HEAD = Buffer.from([...'OpusHead'].map(charCode));\nconst OPUS_TAGS = Buffer.from([...'OpusTags'].map(charCode));\n\n/**\n * Demuxes an Ogg stream (containing Opus audio) to output an Opus stream.\n * @extends {TransformStream}\n * @memberof opus\n */\nclass OggDemuxer extends Transform {\n  /**\n   * Creates a new OggOpus demuxer.\n   * @param {Object} [options] options that you would pass to a regular Transform stream.\n   * @memberof opus\n   */\n  constructor(options = {}) {\n    super(Object.assign({ readableObjectMode: true }, options));\n    this._remainder = null;\n    this._head = null;\n    this._bitstream = null;\n  }\n\n  _transform(chunk, encoding, done) {\n    if (this._remainder) {\n      chunk = Buffer.concat([this._remainder, chunk]);\n      this._remainder = null;\n    }\n\n    while (chunk) {\n      const result = this._readPage(chunk);\n      if (result) chunk = result;\n      else break;\n    }\n    this._remainder = chunk;\n    done();\n  }\n\n  /**\n   * Reads a page from a buffer\n   * @private\n   * @param {Buffer} chunk the chunk containing the page\n   * @returns {boolean|Buffer} if a buffer, it will be a slice of the excess data of the original, otherwise it will be\n   * false and would indicate that there is not enough data to go ahead with reading this page.\n   */\n  _readPage(chunk) {\n    if (chunk.length < OGG_PAGE_HEADER_SIZE) {\n      return false;\n    }\n    if (!chunk.slice(0, 4).equals(OGGS_HEADER)) {\n      throw Error(`capture_pattern is not ${OGGS_HEADER}`);\n    }\n    if (chunk.readUInt8(4) !== STREAM_STRUCTURE_VERSION) {\n      throw Error(`stream_structure_version is not ${STREAM_STRUCTURE_VERSION}`);\n    }\n\n    if (chunk.length < 27) return false;\n    const pageSegments = chunk.readUInt8(26);\n    if (chunk.length < 27 + pageSegments) return false;\n    const table = chunk.slice(27, 27 + pageSegments);\n    const bitstream = chunk.readUInt32BE(14);\n\n    let sizes = [], totalSize = 0;\n\n    for (let i = 0; i < pageSegments;) {\n      let size = 0, x = 255;\n      while (x === 255) {\n        if (i >= table.length) return false;\n        x = table.readUInt8(i);\n        i++;\n        size += x;\n      }\n      sizes.push(size);\n      totalSize += size;\n    }\n\n    if (chunk.length < 27 + pageSegments + totalSize) return false;\n\n    let start = 27 + pageSegments;\n    for (const size of sizes) {\n      const segment = chunk.slice(start, start + size);\n      const header = segment.slice(0, 8);\n      if (this._head) {\n        if (header.equals(OPUS_TAGS)) this.emit('tags', segment);\n        else if (this._bitstream === bitstream) this.push(segment);\n      } else if (header.equals(OPUS_HEAD)) {\n        this.emit('head', segment);\n        this._head = segment;\n        this._bitstream = bitstream;\n      } else {\n        this.emit('unknownSegment', segment);\n      }\n      start += size;\n    }\n    return chunk.slice(start);\n  }\n}\n\n/**\n * Emitted when the demuxer encounters the opus head.\n * @event OggDemuxer#head\n * @memberof opus\n * @param {Buffer} segment a buffer containing the opus head data.\n */\n\n/**\n * Emitted when the demuxer encounters opus tags.\n * @event OggDemuxer#tags\n * @memberof opus\n * @param {Buffer} segment a buffer containing the opus tags.\n */\n\nmodule.exports = OggDemuxer;\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/opus/OggDemuxer.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/opus/Opus.js":
/*!***************************************************!*\
  !*** ./node_modules/prism-media/src/opus/Opus.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Partly based on https://github.com/Rantanen/node-opus/blob/master/lib/Encoder.js\n\nconst { Transform } = __webpack_require__(/*! stream */ \"stream\");\nconst loader = __webpack_require__(/*! ../util/loader */ \"./node_modules/prism-media/src/util/loader.js\");\n\nconst CTL = {\n  BITRATE: 4002,\n  FEC: 4012,\n  PLP: 4014,\n};\n\nlet Opus = {};\n\nfunction loadOpus(refresh = false) {\n  if (Opus.Encoder && !refresh) return Opus;\n\n  Opus = loader.require([\n    ['@discordjs/opus', opus => ({ Encoder: opus.OpusEncoder })],\n    ['node-opus', opus => ({ Encoder: opus.OpusEncoder })],\n    ['opusscript', opus => ({ Encoder: opus })],\n  ]);\n  return Opus;\n}\n\nconst charCode = x => x.charCodeAt(0);\nconst OPUS_HEAD = Buffer.from([...'OpusHead'].map(charCode));\nconst OPUS_TAGS = Buffer.from([...'OpusTags'].map(charCode));\n\n// frame size = (channels * rate * frame_duration) / 1000\n\n/**\n * Takes a stream of Opus data and outputs a stream of PCM data, or the inverse.\n * **You shouldn't directly instantiate this class, see opus.Encoder and opus.Decoder instead!**\n * @memberof opus\n * @extends TransformStream\n * @protected\n */\nclass OpusStream extends Transform {\n  /**\n   * Creates a new Opus transformer.\n   * @private\n   * @memberof opus\n   * @param {Object} [options] options that you would pass to a regular Transform stream\n   */\n  constructor(options = {}) {\n    if (!loadOpus().Encoder) {\n      throw Error('Could not find an Opus module! Please install @discordjs/opus, node-opus, or opusscript.');\n    }\n    super(Object.assign({ readableObjectMode: true }, options));\n    if (Opus.name === 'opusscript') {\n      options.application = Opus.Encoder.Application[options.application];\n    }\n    this.encoder = new Opus.Encoder(options.rate, options.channels, options.application);\n\n    this._options = options;\n    this._required = this._options.frameSize * this._options.channels * 2;\n  }\n\n  _encode(buffer) {\n    return this.encoder.encode(buffer, this._options.frameSize);\n  }\n\n  _decode(buffer) {\n    return this.encoder.decode(buffer, Opus.name === 'opusscript' ? null : this._options.frameSize);\n  }\n\n  /**\n   * Returns the Opus module being used - `opusscript`, `node-opus`, or `@discordjs/opus`.\n   * @type {string}\n   * @readonly\n   * @example\n   * console.log(`Using Opus module ${prism.opus.Encoder.type}`);\n   */\n  static get type() {\n    return Opus.name;\n  }\n\n  /**\n   * Sets the bitrate of the stream.\n   * @param {number} bitrate the bitrate to use use, e.g. 48000\n   * @public\n   */\n  setBitrate(bitrate) {\n    (this.encoder.applyEncoderCTL || this.encoder.encoderCTL)\n      .apply(this.encoder, [CTL.BITRATE, Math.min(128e3, Math.max(16e3, bitrate))]);\n  }\n\n  /**\n   * Enables or disables forward error correction.\n   * @param {boolean} enabled whether or not to enable FEC.\n   * @public\n   */\n  setFEC(enabled) {\n    (this.encoder.applyEncoderCTL || this.encoder.encoderCTL)\n      .apply(this.encoder, [CTL.FEC, enabled ? 1 : 0]);\n  }\n\n  /**\n   * Sets the expected packet loss over network transmission.\n   * @param {number} [percentage] a percentage (represented between 0 and 1)\n   */\n  setPLP(percentage) {\n    (this.encoder.applyEncoderCTL || this.encoder.encoderCTL)\n      .apply(this.encoder, [CTL.PLP, Math.min(100, Math.max(0, percentage * 100))]);\n  }\n\n  _final(cb) {\n    if (Opus.name === 'opusscript' && this.encoder) this.encoder.delete();\n    cb();\n  }\n}\n\n/**\n * An Opus encoder stream.\n *\n * Outputs opus packets in [object mode.](https://nodejs.org/api/stream.html#stream_object_mode)\n * @extends opus.OpusStream\n * @memberof opus\n * @example\n * const encoder = new prism.opus.Encoder({ frameSize: 960, channels: 2, rate: 48000 });\n * pcmAudio.pipe(encoder);\n * // encoder will now output Opus-encoded audio packets\n */\nclass Encoder extends OpusStream {\n  /**\n   * Creates a new Opus encoder stream.\n   * @memberof opus\n   * @param {Object} options options that you would pass to a regular OpusStream, plus a few more:\n   * @param {number} options.frameSize the frame size in bytes to use (e.g. 960 for stereo audio at 48KHz with a frame\n   * duration of 20ms)\n   * @param {number} options.channels the number of channels to use\n   * @param {number} options.rate the sampling rate in Hz\n   */\n  constructor(options) {\n    super(options);\n    this._buffer = Buffer.alloc(0);\n  }\n\n  async _transform(chunk, encoding, done) {\n    this._buffer = Buffer.concat([this._buffer, chunk]);\n    let n = 0;\n    while (this._buffer.length >= this._required * (n + 1)) {\n      const buf = await this._encode(this._buffer.slice(n * this._required, (n + 1) * this._required));\n      this.push(buf);\n      n++;\n    }\n    if (n > 0) this._buffer = this._buffer.slice(n * this._required);\n    return done();\n  }\n\n  _destroy(err, cb) {\n    super._destroy(err, cb);\n    this._buffer = null;\n  }\n}\n\n/**\n * An Opus decoder stream.\n *\n * Note that any stream you pipe into this must be in\n * [object mode](https://nodejs.org/api/stream.html#stream_object_mode) and should output Opus packets.\n * @extends opus.OpusStream\n * @memberof opus\n * @example\n * const decoder = new prism.opus.Decoder({ frameSize: 960, channels: 2, rate: 48000 });\n * input.pipe(decoder);\n * // decoder will now output PCM audio\n */\nclass Decoder extends OpusStream {\n  _transform(chunk, encoding, done) {\n    const signature = chunk.slice(0, 8);\n    if (signature.equals(OPUS_HEAD)) {\n      this.emit('format', {\n        channels: this._options.channels,\n        sampleRate: this._options.rate,\n        bitDepth: 16,\n        float: false,\n        signed: true,\n        version: chunk.readUInt8(8),\n        preSkip: chunk.readUInt16LE(10),\n        gain: chunk.readUInt16LE(16),\n      });\n      return done();\n    }\n    if (signature.equals(OPUS_TAGS)) {\n      this.emit('tags', chunk);\n      return done();\n    }\n    this.push(this._decode(chunk));\n    return done();\n  }\n}\n\nmodule.exports = { Decoder, Encoder };\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/opus/Opus.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/opus/WebmDemuxer.js":
/*!**********************************************************!*\
  !*** ./node_modules/prism-media/src/opus/WebmDemuxer.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const WebmBaseDemuxer = __webpack_require__(/*! ../core/WebmBase */ \"./node_modules/prism-media/src/core/WebmBase.js\");\n\nconst OPUS_HEAD = Buffer.from([...'OpusHead'].map(x => x.charCodeAt(0)));\n\n/**\n * Demuxes a Webm stream (containing Opus audio) to output an Opus stream.\n * @extends core.WebmBaseDemuxer\n * @memberof opus\n * @example\n * const fs = require('fs');\n * const file = fs.createReadStream('./audio.webm');\n * const demuxer = new prism.opus.WebmDemuxer();\n * const opus = file.pipe(demuxer);\n * // opus is now a ReadableStream in object mode outputting Opus packets\n */\nclass WebmDemuxer extends WebmBaseDemuxer {\n  _checkHead(data) {\n    if (!data.slice(0, 8).equals(OPUS_HEAD)) {\n      throw Error('Audio codec is not Opus!');\n    }\n  }\n}\n\nmodule.exports = WebmDemuxer;\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/opus/WebmDemuxer.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/opus/index.js":
/*!****************************************************!*\
  !*** ./node_modules/prism-media/src/opus/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Opus features\n * @namespace opus\n */\nmodule.exports = {\n  // Encoder and Decoder\n  ...__webpack_require__(/*! ./Opus */ \"./node_modules/prism-media/src/opus/Opus.js\"),\n  OggDemuxer: __webpack_require__(/*! ./OggDemuxer */ \"./node_modules/prism-media/src/opus/OggDemuxer.js\"),\n  WebmDemuxer: __webpack_require__(/*! ./WebmDemuxer */ \"./node_modules/prism-media/src/opus/WebmDemuxer.js\"),\n};\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/opus/index.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/util sync recursive":
/*!************************************************!*\
  !*** ./node_modules/prism-media/src/util sync ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/prism-media/src/util sync recursive\";\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/util_sync?");

/***/ }),

/***/ "./node_modules/prism-media/src/util/loader.js":
/*!*****************************************************!*\
  !*** ./node_modules/prism-media/src/util/loader.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.require = function loader(list) {\n  const errorLog = [];\n  for (const [name, fn] of list) {\n    try {\n      const data = fn(__webpack_require__(\"./node_modules/prism-media/src/util sync recursive\")(name));\n      data.name = name;\n      return data;\n    } catch (e) {\n      errorLog.push(e);\n    }\n  }\n  throw new Error(errorLog.join('\\n'));\n};\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/util/loader.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/vorbis/WebmDemuxer.js":
/*!************************************************************!*\
  !*** ./node_modules/prism-media/src/vorbis/WebmDemuxer.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const WebmBaseDemuxer = __webpack_require__(/*! ../core/WebmBase */ \"./node_modules/prism-media/src/core/WebmBase.js\");\n\nconst VORBIS_HEAD = Buffer.from([...'vorbis'].map(x => x.charCodeAt(0)));\n\n/**\n * Demuxes a Webm stream (containing Vorbis audio) to output a Vorbis stream.\n * @memberof vorbis\n * @extends core.WebmBaseDemuxer\n */\nclass WebmDemuxer extends WebmBaseDemuxer {\n  _checkHead(data) {\n    if (data.readUInt8(0) !== 2 || !data.slice(4, 10).equals(VORBIS_HEAD)) {\n      throw Error('Audio codec is not Vorbis!');\n    }\n\n    this.push(data.slice(3, 3 + data.readUInt8(1)));\n    this.push(data.slice(3 + data.readUInt8(1), 3 + data.readUInt8(1) + data.readUInt8(2)));\n    this.push(data.slice(3 + data.readUInt8(1) + data.readUInt8(2)));\n  }\n}\n\nmodule.exports = WebmDemuxer;\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/vorbis/WebmDemuxer.js?");

/***/ }),

/***/ "./node_modules/prism-media/src/vorbis/index.js":
/*!******************************************************!*\
  !*** ./node_modules/prism-media/src/vorbis/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Vorbis features\n * @namespace vorbis\n */\n\nmodule.exports = {\n  WebmDemuxer: __webpack_require__(/*! ./WebmDemuxer */ \"./node_modules/prism-media/src/vorbis/WebmDemuxer.js\"),\n};\n\n\n//# sourceURL=webpack:///./node_modules/prism-media/src/vorbis/index.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./src/command.js":
/*!************************!*\
  !*** ./src/command.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const create_game = __webpack_require__(/*! ./command/game.js */ \"./src/command/game.js\");\nconst rules = __webpack_require__(/*! ./command/rules.js */ \"./src/command/rules.js\");\n\n/*  */\nvar command_list = {\n    'word-definition': create_game,\n    'rules': rules,\n}\n\nmodule.exports.check_command = function check_command(client, message) {\n    let text = message.content;\n    if (text.substring(0, 1) == '!') {\n        let args = text.substring(1).split(' ');\n        let cmd = args[0];\n\n        if (command_list.hasOwnProperty(cmd)) {\n            let functor = command_list[cmd].command; \n            return functor(client, message);\n        }\n    }\n    return null;\n};\n\n\n//# sourceURL=webpack:///./src/command.js?");

/***/ }),

/***/ "./src/command/game.js":
/*!*****************************!*\
  !*** ./src/command/game.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ../game/index.js */ \"./src/game/index.js\");\n\nvar command = function (client, message) {\n    let player_nb = parseInt(message.content.split(' ').slice(1)[0]);\n    if (isNaN(player_nb) || player_nb < 0 || player_nb > 10) {\n        player_nb = Game.DEFAULT_PLAYER_NB;\n        message.channel.send(\"Nombre de joueur invalide, utilisez un nombre en 1 et 10. On lance la partie avec \" + player_nb + \" joueurs !\");\n    }\n    game = Game.create_game(message.channel.id, player_nb);\n    text = \"Partie commencée !\\nSi tu ne connais pas les règles, tape `!rules`.\\nNous jouons avec \" +\n            game['player_nb'] +\n            \" joueurs !\\nLe mot a définir est \" + game['word'] +\n            \".\";\n    message.channel.send(text);\n    return true;\n}\n\nmodule.exports = {\n    command: command\n};\n\n\n//# sourceURL=webpack:///./src/command/game.js?");

/***/ }),

/***/ "./src/command/rules.js":
/*!******************************!*\
  !*** ./src/command/rules.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var rules = function (client, message) {\n    let text = \"World definition est un jeu dans lequel il faut inventer la définition d'un mot inconnu.\\n\" +\n    \"Une fois que chaque joueur a proposé une définition, tout le monde vote pour la définition qu'il trouve la plus plausible.\\n\" +\n    \"Si vous trouvez la bonne définition, vous marquez un point, sinon le point revient a l'auteur de la définition.\\n\" +\n    \"Si vous connaissez déja le sens du mot il est possible de sauter le mot avec `!next_word`.\\n\" +\n    \"Pour commencer une partie utilisez `!word-definition <nombre de joueur>`.\";\n    message.channel.send(text);\n    return true;\n}\n\nmodule.exports = {\n    command: rules\n};\n\n\n//# sourceURL=webpack:///./src/command/rules.js?");

/***/ }),

/***/ "./src/game/index.js":
/*!***************************!*\
  !*** ./src/game/index.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vote = __webpack_require__(/*! ./vote.js */ \"./src/game/vote.js\");\nconst Model = __webpack_require__(/*! ./model.js */ \"./src/game/model.js\");\n\nvar check_game_submission = async function(client, message) {\n    let channelId = message.channel.id;\n    let game = Model.get_game(channelId);\n    if (game.state !== \"write\") {\n        return false;\n    }\n    let guess = message.content;\n    let user = message.author;\n    await message.delete().then(msg => {\n        let text = message.author.username + ', ta définition est enregistrée.';\n        console.log(`submission from ${msg.author.username} : ${msg.content}.`)\n        msg.channel.send(text);\n    }).catch(console.error);\n    game.submissions[user.id] = guess;\n    if (!game.scores[user.id]) {\n        game.scores[user.id] = {\n            'user': user.username,\n            'points': 0,\n        }\n    }\n    return true;\n}\n\nvar check_game_state = async function(client, message) {\n    let game = Model.get_game(message.channel.id);\n    if (!game) {\n        return false;\n    }\n    if (game.state === \"write\") {\n        await check_game_submission(client, message);\n    }\n    if (game.state === \"write\" && Object.keys(game.submissions).length >= game.player_nb) {\n        console.log(`Starting vote.`);\n        Vote.start_vote(client, message);\n    }\n    if (game.state === \"vote\") {\n        Vote.count_vote(client, message);\n    }\n    return true;\n}\n\nmodule.exports = {\n    create_game: Model.create_game,\n    check_game_state: check_game_state,\n    DEFAULT_PLAYER_NB: Model.DEFAULT_PLAYER_NB,\n};\n\n\n//# sourceURL=webpack:///./src/game/index.js?");

/***/ }),

/***/ "./src/game/model.js":
/*!***************************!*\
  !*** ./src/game/model.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const DEFAULT_PLAYER_NB = 2;\nconst words = __webpack_require__(/*! ./words.js */ \"./src/game/words.js\");\n\nvar current_games = [];\n\nvar get_game = function(channelID) {\n    if (current_games.indexOf(channelID)) {\n        return current_games[channelID];\n    }\n    return null;\n}\n\n\nfunction get_random_word() {\n    const keys = Object.keys(words);\n    const randIndex = Math.floor(Math.random() * keys.length);\n    const randKey = keys[randIndex];\n    return randKey;\n}\n\n/* \n** states : \"write\",\"vote\"\n*/\nvar create_game = function(channelID, player_nb=2) {\n    current_games[channelID] = {\n        word: get_random_word(),\n        state: 'write',\n        player_nb: player_nb,\n        scores: {},\n        used_words: [],\n        submissions: {}\n    };\n    return get_game(channelID);\n}\n\nmodule.exports = {\n    get_game: get_game,\n    create_game: create_game,\n    DEFAULT_PLAYER_NB: DEFAULT_PLAYER_NB,\n};\n\n//# sourceURL=webpack:///./src/game/model.js?");

/***/ }),

/***/ "./src/game/vote.js":
/*!**************************!*\
  !*** ./src/game/vote.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Model = __webpack_require__(/*! ./model.js */ \"./src/game/model.js\");\nconst words = __webpack_require__(/*! ./words.js */ \"./src/game/words.js\");\n\n/* Randomize array in-place using Durstenfeld shuffle algorithm */\nvar shuffleArray = function (array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nvar start_vote = function(client, message) {\n    let game = Model.get_game(message.channel.id);\n    game.state = \"vote\";\n    let text = \"Toute les définitions ont été écrites ! On passe au vote :\"\n    message.channel.send(text);\n\n    game.votes = []\n    /* adding the right answer */\n    game.submissions[1] = words[game.word];\n\n    for (i in game.submissions) {\n        game.votes.push({\n            'submission': game.submissions[i],\n            'userId': i\n        });\n    }\n\n    /* get random order */\n    shuffleArray(game.votes);\n\n    text = \"\";\n    let index = 1;\n    game.votes.forEach(voteOption => {\n        voteOption.position = index;\n        text += index + ':\\t`' + voteOption.submission + '`\\n';\n        index += 1;\n    });\n    message.channel.send(text);\n    return True;\n}\n\nvar count_vote = function(client, message) {\n    let game = Model.get_game(message.channel.id);\n   \n    return;\n}\n\nmodule.exports = {\n    start_vote: start_vote,\n    count_vote: count_vote,\n};\n\n//# sourceURL=webpack:///./src/game/vote.js?");

/***/ }),

/***/ "./src/game/words.js":
/*!***************************!*\
  !*** ./src/game/words.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n    \"Achaler\": \"Contrarier quelqu'un\",\n    \"Acrimonie\": \"Mecontentement, amertume\",\n    \"Acrostiche\": \"Petit poeme dont les premieres lettres de chaque vers forment un nom, une devise...\",\n    \"Admonestation\": \"Réprimande\",\n    \"Affiquet\": \"Petit bijou que l'on fixe a une robe ou dans les cheveux\",\n    \"Agnelage\": \"Mise bas chez les brebis\",\n    \"Agoraphobie\": \"Crainte des espaces ouverts, des places publiques\",\n    \"Agueusie\": \"Perte du sens du gout\",\n    \"Alacrité\": \"Gaïté\",\n    \"Ambages\": \"Franchement. parler sans ambages équivaut à parler franchement\",\n    \"Amentifère\": \"Qui porte des inflorescences en chatons !!!\",\n    \"Amok\": \"Crise de folie homicide dont sont parfois frappés certains opiomanes malais\",\n    \"Anachorète\": \"Ascète qui vit seul\",\n    \"Anacoluthe\": \"Rutpure dans la construction de la phrase\",\n    \"Anaphore\": \"Repetition d'un mot ou d'un groupe de mot en debut de phrases successives\",\n    \"Androcéphale\": \"Qui a une tête humaine\",\n    \"Antonomase\": \"Emploi d'un nom commun ou d'une périphrase à la place d'un nom propre, ou inversement\",\n    \"Apagogie\": \"Démonstration par l'absurde\",\n    \"Apophtegme\": \"Maxime mémorable d'un illustre personnage\",\n    \"Aplacophore\": \"Classe de mollusques primitifs marins qui vivent dans la vase\",\n    \"Aporie\": \"Difficulté logique sans issue\",\n    \"arachibutyrophobie\": \"Phobie d'avoir du beurre de cacahuète collé sur le palais\",\n    \"Atermoiement\": \"Action d'hésiter, de remettre à plus tard (s'utilise au pluriel)\",\n    \"Aubier\": \"Partie du tronc qui se situe sous l'ecorce. Ce sont les couches de l'arbre les plus récemment formées\",\n    \"Avers\": \"Face d'une pièce ou d'une médaille, opposée au revers\",\n    \"Avunculaire\": \"Qui se rapporte à l'oncle ou à la tante\",\n    \"Babiller\": \"bavarder beaucoup, inutilement\",\n    \"Balanoglosse\": \"Ver des plages\",\n    \"Bamboche\": \"faire la fête, guincher (vieux language familier). On dit 'faire bamboche'\",\n    \"Barbon\": \"vieillard desagreable ou ennuyeux\",\n    \"Biaural\": \"qui concerne l'audition par les 2 oreilles\",\n    \"Billevesée\": \"propos frivole\",\n    \"Bimane\": \"qui a deux mains (l'homme est un animal bimane)\",\n    \"Bome\": \"espar horizontal sur lequel est enverguee une voile aurique, au tiers ou triangulaire\",\n    \"Bonzesse\": \"religieuse bouddhiste\",\n    \"Boustrophedon\": \"ecriture alternée de gauche à droite puis de droite à gauche\",\n    \"Cacochyme\": \"D'une santé déficiente\",\n    \"Callipyge\": \"Dont les fesses sont belles (une vénus callipyge)\",\n    \"Calter\": \"s'enfuir rapidement\",\n    \"Campaniforme\": \"qui à la forme d'une cloche\",\n    \"Capitation\": \"Taxe par tête. Abolie en 1789 !\",\n    \"Cathartique\": \"Qui purifie, qui permet de purger\",\n    \"Cénobite\": \"qui vit en communauté\",\n    \"Cénotaphe\": \"Tombeau élevé à la mémoire d'un mort mais qui ne contient pas son corps\",\n    \"Céphalalgie\": \"Mal de tête\",\n    \"Châlit\": \"Cadre de lit en bois ou en métal\",\n    \"Chattemite\": \"Personne qui affecte des manières douces et modestes pour tromper son entourage\",\n    \"Charbonette\": \"Bois d'un diamètre inférieur à 7 cm\",\n    \"Débagouler\": \"Vomir\",\n    \"Décadique\": \"Nombre ayant une infinité de chiffres avant la sortie, et une infinité de chiffres après la virgule Décalvant : Qui rend chauve\",\n    \"Décaniller\": \"S'enfuir\",\n    \"Décitex\": \"Poids d'un fil exprimé en gramme pour 10 000 mètres de fil\",\n    \"Dégoiser\": \"Débiter des paroles\",\n    \"Délétère\": \"Qui met la santé en danger\",\n    \"Déprédation\": \"Vol et pillage suivi de dégradation\",\n    \"Déréliction\": \"Etat de l'homme qui se sent abandonné, isolé, privé de tout secours divin\",\n    \"Dessiccateur\": \"Appareil servant à déshydrater une substance ou à tenir divers produits à l'abri de l'humidité\",\n    \"Diaphane\": \"Qui laisse passer les rayons lumineux sans permettre de distinguer les formes (translucide)\",\n    \"Diaphorèse\": \"Transpiration abondante\",\n    \"Dispendieux\": \"Qui exige une grande dépense\",\n    \"Distal\": \"Qui est le plus éloigné d'un point de référence d'une structure\",\n    \"Diverticule\": \"Cavité en forme de poche (en médecine, mais pas uniquement comme le diverticule axial de Lascaux)\",\n    \"Doxa\": \"Ensemble des opinions communément admises dans une société donnée\",\n    \"Drolatique\": \"Qui est récréatif et pytoresque\",\n    \"Ductile\": \"Qui peut être étendu, allongé, sans se briser\",\n    \"Dynamogénie\": \"Accroissement de la fonction d'un organe sous l'action d'une excitation\",\n    \"Ebaubi\": \"Extrêmement étonné\",\n    \"Ebaudir\": \"Egayer, réjouir\",\n    \"Eburné\": \"Qui à la couleur et la consistance de l'ivoire\",\n    \"Echolalie\": \"Répétition automatique des paroles de l'interlocuteur\",\n    \"Ecornifler\": \"Se procurer çà et là aux dépens d'autrui\",\n    \"Egrotant\": \"Souffrant\",\n    \"Electronarcose\": \"Court sommeil provoqué par le passage d'un léger courant électrique à travers le cerveau\",\n    \"Emblavure\": \"Terre ensemencée en céréale comme le blé\",\n    \"Emmouscailler\": \"Emmerder\",\n    \"Empeigne\": \"Dessus d'une chaussure, du cou-de-pied jusqu'à la pointe\",\n    \"Encoubler\": \"Importuner, gêner\",\n    \"Enervation\": \"Affaiblissement\",\n    \"Ensiforme\": \"En forme d'épée\",\n    \"Entéléchie\": \"Etat de perfection, de parfait accomplissement de l'être\",\n    \"Entropie\": \"Mesure mathématique de la quantité d'incertitude et d'aléa\",\n    \"Entropion\": \"Renversement des paupières en dedans\",\n    \"Epacte\": \"Nombre qui exprime l'âge de la lune au 31 décembre de chaque année et qui indique combien il faut ajouter de jours à l'année lunaire pour qu'elle soit égale à l'année solaire\",\n    \"Epanadiplose\": \"Qui termine comme cela a commencé (comme beaucoup de livres de Stephen King)\",\n    \"Epectase\": \"Décès pendant l'orgasme\",\n    \"Epenthèse\": \"Apparition à l'intérieur d'un mot d'un phonème non éthymologique\",\n    \"Epithalame\": \"Poème composé à l'occasion d'un mariage, en l'honneur des jeunes mariés\",\n    \"Equanamité\": \"Egalité d'âme, d'humeur\",\n    \"Ereuthophobie\": \"Crainte, peur de rougir\",\n    \"Exonder\": \"Sortir au-dessus de l?eau, en parlant d?une terre ou d'organismes aquatiques ou amphibies\",\n    \"Faix\": \"Charge très pesante\",\n    \"Falarique\": \"Arme de jet incendiaire\",\n    \"Faquin\": \"Individu sans valeur, plat et impertinent\",\n    \"Fat\": \"Qui montre sa prétention de façon déplaisante et quelque peu ridicule\",\n    \"Fatrasie\": \"Poème du Moyen Age, d'un caractère incohérent ou absurde, formé de dictons, proverbes, etc... mis bout à bout et contenant des allusions satiriques\",\n    \"Fébricule\": \"Petite fièvre\",\n    \"Fjeld\": \"Plateau rocheux usé par un glacier continental\",\n    \"Fjord\": \"Ancienne vallée glaciaire envahie par les eaux marines durant la déglaciation\",\n    \"Flagorner\": \"Flatter bassement, servilement\",\n    \"Floculation\": \"Rassemblement, sous forme de petits flocons, des particules d'une suspension colloïdale\",\n    \"Foirade\": \"Le fait de foirer, de rater\",\n    \"Fondouk\": \"Dans les pays arabes, emplacement du marché, ou auberge\",\n    \"Forclore\": \"Exclure, se faire priver du bénéfice d'une faculté ou d'un droit non exercé dans les délais fixés\",\n    \"Formication\": \"Fourmillement, agitation\",\n    \"Foucade\": \"Caprice, emportement passager\",\n    \"Foutriquet\": \"Personnage insignifiant et incapable\",\n    \"Fraichin\": \"Odeur de marée\",\n    \"Frontispice\": \"Façade principale d'un grand édifice\",\n    \"Fulguration\": \"Lueur électrique qui se produit dans les hautes régions de l'atmosphère sans qu'on entende le tonnerre\",\n    \"Fustet\": \"Sumac à houppes plumeuses, dont le bois fourni une matière tinctoriale jaune\",\n    \"Gabarre\": \"Embarcation pour le transport de marchandise\",\n    \"Gadjo\": \"Homme qui n'appartient pas à la communauté des Gitans\",\n    \"Galapiat\": \"Polisson\",\n    \"Galéjade\": \"Histoire inventée ou plaisanterie destinée à mystifier\",\n    \"Galimafrée\": \"Plat peu appétissant\",\n    \"Galimatias\": \"Discours confus et embrouillé\",\n    \"Gambit\": \"Manoeuvre aux echecs consistant à sacrifier une pièce pour se donner un avantage\",\n    \"Garrocher\": \"Lancer\",\n    \"Girie\": \"Plainte affectée\",\n    \"Glabelle\": \"Partie légérement proéminente située entre les 2 sourcils\",\n    \"Glairer\": \"Frotter de blanc d'oeuf la couverture d'un livre pour lui donner du lustre\",\n    \"Glose\": \"Annotation en marge d'un texte pour expliquer un mot difficile\",\n    \"Godailler\": \"Faire des faux plis sur les vêtements\",\n    \"Gone\": \"Jeune enfant\",\n    \"Gonochorisme\": \"Séparation complète des sexes dans des individus distincts\",\n    \"Grandelet\": \"Qui commence à devenir grand\",\n    \"Grigne\": \"Fente du boulanger faite sur le pain\",\n    \"Halieutique\": \"Qui concerne la pêche\",\n    \"Hapax\": \"Mot, forme, emploi dont on ne peut relever qu'un exemple (à une époque donnée ou dans un corpus donné)\",\n    \"Haplologie\": \"Fait de n'énoncer que l'une de deux articulations semblables et successives. (ex : tragicomique au lieu de tragico-comique)\",\n    \"Haret\": \"Chat domestique retourné à l'état sauvage et vit du gibier\",\n    \"Hâve\": \"Affaibli par la faim, la fatigue ou la souffrance\",\n    \"Hébertisme\": \"Méthode d'éducation physique qui consiste en exercices effectués en plein air\",\n    \"Heimatlos\": \"Qui a perdu sa nationalité d'origine sans en acquérir de nouvelle\",\n    \"Hellénisation\": \"Fait de donner un caractère Grec à quelque chose (un pays, un peuple, un texte...)\",\n    \"Hendiadys\": \"Figure de rhétorique qui consiste à dissocier en deux noms coordonnés une expression unique\",\n    \"Hercher\": \"Pousser les wagonnets de minerai au fond d'une mine\",\n    \"Hétaïre\": \"Prostituée d'un rang social élevé\",\n    \"Holisme\": \"Théorie selon laquelle l'homme est un tout indivisible qui ne peut être expliqué par ses différentes composantes\",\n    \"Homoncule\": \"Petit être vivant à forme humaine que les alchimistes prétendaient fabriquer\",\n    \"Hourvari\": \"Cri des chasseurs pour rappeller les chiens perdus de vue. Synonyme de Tapage\",\n    \"Huis\": \"Porte (d'où 'à huis clos')\",\n    \"Hypallage\": \"Figure de style qui consiste à attribuer à certains mots d'une phrase ce qui convient à d'autres mots de la même phrase\",\n    \"Hyphe\": \"Filament du mycélium des champignons supérieurs\",\n    \"Hypocondriaque\": \"D'humeur triste et capricieuse\",\n    \"Hypotypose\": \"Description animée et frappante\",\n    \"Ichtyoïde\": \"Qui ressemble à un poisson\",\n    \"Impavide\": \"Qui n'éprouve ou ne montre aucune peur\",\n    \"Impéritie\": \"Manque d'aptitude, d'habileté notamment dans l'exercice de sa fonction\",\n    \"Implexe\": \"Dont l'intrigue est compliquée\",\n    \"Inanité\": \"Inutilité\",\n    \"Incipit\": \"Premiers mots d'un manuscrit, d'un livre\",\n    \"Incube\": \"Démon masculin censé abuser d'une femme pendant son sommeil\",\n    \"Incunable\": \"Ouvrage imprimé avant 1500\",\n    \"Indigète\": \"Propre à un lieu, à une famille\",\n    \"Ineffable\": \"Qui ne peut-être exprimé par des paroles\",\n    \"Infixe\": \"Elément qui s'insère dans l'intérieur d'un mot afin d'en modifier le sens\",\n    \"Infundibuliforme\": \"Qui a la forme d'un entonnoir\",\n    \"Interdigital\": \"Situé entre deux doigts\",\n    \"Intertidal\": \"Zone d'oscillation de la marée\",\n    \"Irréfragable\": \"Qu'on ne peut contredire\",\n    \"Jactance\": \"Vanité\",\n    \"Jaculatoire\": \"Prière courte et fervente\",\n    \"Jamborée\": \"Réunion Internationale de scouts\",\n    \"Jangada\": \"Radeau de bois très léger portant une cabane d'habitation utilisé par les pêcheurs brésiliens\",\n    \"Janotisme\": \"Construction maladroite d'une phrase entrainant une mauvaise interprétation (ex : c'est la voiture de ma grand-mère qui est morte)\",\n    \"Jectisse\": \"Qui peuvent se poser à la main\",\n    \"Jobastre\": \"Imbécile un peu fou\",\n    \"Kaolin\": \"Silicate d'alumine pur provenant de l'altération des feldspaths, des granits, argile qui compose les pâtes céramiques\",\n    \"Kaon\": \"Particule élémentaire dont la masse est 970 fois plus grande que celle de l'électron\",\n    \"Kénophobie\": \"Peur du noir\",\n    \"Kraken\": \"Monstre marin fabuleux des légendes scandinaves\",\n    \"Labile\": \"Peu stable, qui tombe facilement\",\n    \"Lacunaire\": \"Qui présente des lacunes\",\n    \"Lacustre\": \"Qui vit près d'un lac\",\n    \"Laïusser\": \"Discourir\",\n    \"Lallation\": \"Emission de sons plus ou moins articulés par l'enfant, avant l'acquisition du langage\",\n    \"Latitudinaire\": \"Qui a une morale très large, très relâchée\",\n    \"Latrie\": \"Forme la plus élevée d'adoration qui ne doit être accordée qu'à Dieu seul\",\n    \"Laudatif\": \"Qui contient un éloge\",\n    \"Lavure\": \"Liquide qui a servi à laver quelque chose ou quelqu'un\",\n    \"Lège\": \"Vide ou incomplétement chargé\",\n    \"Lénitif\": \"Adoucissant, apaisant\",\n    \"Lépipodendron\": \"Grand lycopode fossile arborescent de l'ère primaire\",\n    \"Lerche\": \"Pas beaucoup, peu, bésef\",\n    \"Leucotomie\": \"Lobotomie partielle\",\n    \"Levretté\": \"Qui a la taille svelte, le ventre creusé du lévrier\",\n    \"Lexème\": \"Morphème lexical libre\",\n    \"Lexis\": \"Enoncé considéré indépendamment de sa vérité\",\n    \"Li\": \"Mesure chinoise (environ 576 mètres)\",\n    \"Libelle\": \"Court écrit de caractère satirique, pamphlet\",\n    \"Liminal\": \"Qui est au niveau du seuil de perception (par opposition à subliminal)\",\n    \"Linéature\": \"Nombre de ligne d'une image complète\",\n    \"Linge\": \"Femelle du Lynx\",\n    \"Liponombre\": \"Nombre qui lorsqu'il est écrit en toute lettre, ne contient pas de 'e'\",\n    \"Lipopremier\": \"Liponombre qui est premier\",\n    \"Liteau\": \"Lieu où le loup se repose pendant le jour\",\n    \"Lotier\": \"Herbe des prés et des talus\",\n    \"Lucaniste\": \"Amateur de cerfs-volants\",\n    \"Lucre\": \"Profit plus ou moins licite dont on est avide\",\n    \"Lunisolaire\": \"Qui a rapport à la fois à la Lune et au Soleil\",\n    \"Lutrin\": \"Pupitre sur lequel on met les livres de chant\",\n    \"Macache\": \"Pas du tout, rien du tout\",\n    \"Machure\": \"Parties où le poil n'a pas été coupé net, a été écrasé\",\n    \"Mafflu\": \"Qui a de grosse joue\",\n    \"Maganer\": \"Fatiguer, affaiblir\",\n    \"Magyar\": \"Qui a rapport au peuple établi au IXe siècle dans l'actuelle Hongrie\",\n    \"Maïeuticien\": \"Homme qui exerce la profession de sage-femme\",\n    \"Makimono\": \"Peinture japonaise sur soie ou papier, beaucoup plus large que haute\",\n    \"Maltose\": \"Diholoside obtenu par action de l'amylase sur l'amidon\",\n    \"Maltôte\": \"Impôt extraordinaire\",\n    \"Mamelouk\": \"Cavalier des anciennes milices égyptiennes, garde du corps du sultan\",\n    \"Mandala\": \"Représentation géométrique et symbolique de l'univers, dans le brahmanisme et le bouddhisme\",\n    \"Manducation\": \"Acte de manger\",\n    \"Manuterge\": \"Linge dont se sert le célébrant pour s'essuyer les mains au moment du lavabo pendant la messe\",\n    \"Maringouin\": \"Insecte diptère tel que le moustique, le cousin\",\n    \"Maritorne\": \"Femme laide, malpropre et désagréable\",\n    \"Mas\": \"Maison de campagne ou ferme de Provence de style traditionnel\",\n    \"Matefaim\": \"Galette, crêpe épaisse\",\n    \"Matras\": \"Gros trait d'arbalète terminé par une tête cylindrique ou quadrangulaire\",\n    \"Maubèche\": \"Bécasseau de grande taille du nord de l'Europe\",\n    \"Mazagran\": \"Café chaud ou froid servi dans un verre\",\n    \"Mazdéisme\": \"Religion zoroastrienne de l'Iran antique encore pratiquée par les Guèbres et les Parsis\",\n    \"Méandrine\": \"Madrépore comprenant des polypiers vermiculés disposés en rangées sinueuses\",\n    \"Médianoche\": \"Repas pris peu après minuit\",\n    \"Médicastre\": \"Mauvais médecin, charlatan\",\n    \"Médiocratie\": \"Gouvernement, domination des médiocres\",\n    \"Mennonite\": \"Membre d'un mouvement anabaptiste dans la première moitié du XVIe siècle, aujourd'hui implanté aux pays-bas et aux Etats-Unis\",\n    \"Mentisme\": \"Fuite des idées\",\n    \"Menuise\": \"Petit plomb de chasse\",\n    \"Méphistophélique\": \"Qui semble appartenir au démon Méphistophélès\",\n    \"Méphitique\": \"Dont l'exhalaison est toxique et puante\",\n    \"Mérostomes\": \"Classe d'arthropodes dont la bouche s'ouvre entre les pattes\",\n    \"Merzlota\": \"Couche du sol et du sous-sol qui ne dégèle jamais\",\n    \"Meson\": \"Hadron formé d'un quark et d'un antiquark\",\n    \"Métonymie\": \"Figure de style qui consiste à utiliser un mot pour exprimer une idée ou un autre concept. Par exemple, 'boire un verre' qui exprime boire le contenu\",\n    \"Mézigue\": \"Synonyme de 'Moi'\",\n    \"Micheton\": \"Client d'un ou d'une prostitué\",\n    \"Mignoter\": \"Traiter délicatement, avec gentillesse\",\n    \"Milliaire\": \"Qui marque la distance d'un mille romain\",\n    \"Mimivirus\": \"Virus géant à ADN de la taille d'une petite bactérie\",\n    \"Mirliflore\": \"Jeune prétentieux\",\n    \"Misandre\": \"Qui a de la haine ou du mépris pour les hommes (opposé de Misogyne)\",\n    \"Misantrhope\": \"Personne qui manifeste de l'aversion pour ses semblables\",\n    \"Misogyne\": \"Qui a de la haine et du mépris pour les femmes (opposé de Misandre)\",\n    \"Miston\": \"Gamin, gamine\",\n    \"Mistoufle\": \"Méchanceté, vilainie\",\n    \"Mithridatiser\": \"Immuniser en accoutumant à un poison\",\n    \"Modénature\": \"Profil des moulures en architecture\",\n    \"Moere\": \"Lagune d'eau douce comblée, asséchée puis mise en culture\",\n    \"Monaural\": \"Relatif à une seule oreille\",\n    \"Monergol\": \"Produit apte à la propulsion d'un moteur de fusée\",\n    \"Monition\": \"Avertissement donné par l'autorité ecclésiastique avant d'adresser une censure\",\n    \"Monoecie\": \"Etat d'une plante monoïque\",\n    \"Monstration\": \"Action de montrer\",\n    \"Monte-en-l'air\": \"Voleur, cambrioleur\",\n    \"Mornifle\": \"Baffe, gifle\",\n    \"Moujingue\": \"Enfant plutôt difficile\",\n    \"Muance\": \"Dans la solmisation, substitution d'un hexacorde à un autre\",\n    \"Musarder\": \"Perdre son temps, flâner\",\n    \"Mutule\": \"Ornement d'un entablement dorique qui est placé sous la larmier en face du triglyphe\",\n    \"Nadir\": \"Point de la sphère céleste diamétralement opposé au zénith et qui se trouve sur la verticale de l'observateur\",\n    \"Naissain\": \"Embryons ou larves des huitres et moules d'élevage\",\n    \"Nanan\": \"Bonbons, friandises. C'est du Nanan signifie que c'est très facile\",\n    \"Nasarde\": \"Pichenette sur le nez\",\n    \"Néoblaste\": \"Cellule indifférenciée qui assure la reconstitution des parties accidentellement amputées chez certains animaux\",\n    \"Nervation\": \"Disposition des nervures d'une feuille ou des ailes d'un insecte\",\n    \"Nervi\": \"Tueur, homme de main\",\n    \"Nib\": \"Synonyme de Rien\",\n    \"Nicodème\": \"Nigaud\",\n    \"Nifé\": \"Noyau de la Terre qui serait consitué de Nickel et de Fer\",\n    \"Nitescence\": \"Lueur, rayonnement\",\n    \"Noctiluque\": \"Qui peut émettre une lueur dans l'obscurité\",\n    \"Notule\": \"Petite annotation à un texte\",\n    \"Nubile\": \"Qui a atteint l'âge de se marrier\",\n    \"Objectivation\": \"Rendre objectif\",\n    \"Objurgation\": \"Reproche, réprimande\",\n    \"Obvie\": \"Evident, logique\",\n    \"Oekoumène\": \"Espace habitable de la surface terrestre\",\n    \"Onagre\": \"Ane sauvage de grande taille\",\n    \"Onques\": \"Jamais\",\n    \"Onguiculé\": \"Qui a un ongle à chaque doigt\",\n    \"Onychophagie\": \"Habitude de se ronger les ongles\",\n    \"Ophiolâtrie\": \"Adoration du serpent\",\n    \"Opimes\": \"Riches dépouilles ou riche profit\",\n    \"Opprobre\": \"Qui humilie, qui déshonore\",\n    \"Oraliser\": \"Lire ou réciter à haute voix un texte\",\n    \"Orant\": \"Personnage représenté en prière, dans l'art chrétien ancien\",\n    \"Orbicole\": \"Qui se trouve sur tous les points du globe\",\n    \"Orbitèle\": \"Araignée qui tisse un toile polygonale à symétrie centrale\",\n    \"Oréade\": \"Nymphe des montagnes et des bois\",\n    \"Organsiner\": \"Tordre les fils de soie pour en obtenir l'organsin\",\n    \"Orillon\": \"Partie d'un objet en forme de petite oreille\",\n    \"Oronymie\": \"Etude toponymique des noms des montagne\",\n    \"Ouananich\": \"Saumon d'eau douce péché au Canada\",\n    \"Oukase\": \"Décision arbitraire, historiquement, édit promulgué par le tsar\",\n    \"Ovalie\": \"Ensemble des régions du globe où l'on joue au rugby\",\n    \"Pacage\": \"Terrain où vont paître les bestiaux\",\n    \"Pageot\": \"Lit\",\n    \"Pairle\": \"Meuble en forme d'Y dontl es branches atteignent les angles supérieurs de l'écu\",\n    \"Palestre\": \"Dans l'antiquité, lieu public où l'on s'exercait à la lutte et à la gymnastique\",\n    \"Palisson\": \"Instrument de fer qui sert à chamoiser\",\n    \"Palsambleu\": \"Juron utilisé au XVII\",\n    \"Paltoquet\": \"Homme insignifiant et prétentieux\",\n    \"Palustre\": \"Qui se rapporte au marais\",\n    \"Pandiculation\": \"Mouvement qui consiste à étendre les bras et les jambes tout en se penchant en arrière. Le fait de s'étirer\",\n    \"Panifiable\": \"Qui peut servir comme matière première dans la fabrication du pain\",\n    \"Panspermie\": \"Théorie selon laquelle la vie sur Terre est issue de germes venus d'ailleurs...\",\n    \"Parangon\": \"Modèle\",\n    \"Paratexte\": \"Ensemble formé par le péritexte et l'épitexte\",\n    \"Parémiologie\": \"Etude des proverbes\",\n    \"Paronyme\": \"Se dit de mots presque homonymes et qui peuvent facilement être confondus\",\n    \"Parturition\": \"Accouchement\",\n    \"Pasquin\": \"Bouffon\",\n    \"Patouillard\": \"Navire lent, lourd et plutôt en mauvais état\",\n    \"Pattinsonage\": \"Mode de traitement des plombs argentifères par cristallisation fractionnée, pour séparer l'argent du plomb\",\n    \"Pédieux\": \"Qui a rapport ou appartient au pied\",\n    \"Péguer\": \"Coller, enduire d'une substance visqueuse ou collante\",\n    \"Pellucide\": \"Zone translucide\",\n    \"Pendeloque\": \"Bijou suspendu à une boucle d'oreille\",\n    \"Péripatéticien\": \"Partisan de la doctrine d'Aristote\",\n    \"Périssodactyles\": \"Ordre de mammifères placentaires ongulés qui comprend des animaux reposant sur le sol par un nombre impair de doigts dont le médian est le plus développé\",\n    \"Périssologie\": \"Pléonasme fautif (comme 'descendre en bas')\",\n    \"Péronnelle\": \"Jeune femme ou jeune fille sotte et bavarde\",\n    \"Petiole\": \"Nom de la tige reliant la feuille au rameau\",\n    \"Pétrarquiser\": \"Aimer platoniquement, comme Pétrarque aimait Laure\",\n    \"Pétulance\": \"Ardeur exubérante, brusque et désordonnée\",\n    \"Pétuner\": \"Fumer du tabac\",\n    \"Phatique\": \"Fonction du langage utilisé pour établir une communication sans apport d'information (allo, bonjour...)\",\n    \"Phénakistiscope\": \"Appareil formé de deux disques qui donne l'illusion du mouvement par lapersistance des images rétiniennes\",\n    \"Photopériode\": \"Répartition dans la journée entre la durée de la phase diurne et celle de la phase obscure\",\n    \"Phylarque\": \"Président d'une tribu à Athènes\",\n    \"Phyllotaxie\": \"Positionnement des feuilles d'arbres sur un rameau\",\n    \"Piaculaire\": \"Relatif à une expiation\",\n    \"Piauler\": \"Crier en pleurnichant\",\n    \"Pica\": \"Goût morbide pour des substances non comestibles\",\n    \"Piétaille\": \"Petit, subalterne\",\n    \"Pioupiou\": \"Jeune fantassin\",\n    \"Placoter\": \"Bavarder\",\n    \"Plurivoque\": \"Qui a plusieurs valeurs\",\n    \"Pollicitation\": \"Offre exprimée mais non encore acceptée\",\n    \"Porchaison\": \"Saison pendant laquelle le sanglier est le plus gras\",\n    \"Satyriasis\": \"Comportement de l'homme cherchant en permanence le plaisir sexuel. Equivalent à la nymphomanie chez la femme.\",\n    \"Sphinge\": \"Sphinx à buste de femme\",\n    \"Succube\": \"Démon féminin qui abuse d'un homme pendant son sommeil\",\n    \"Tautologie\": \"Phrase toujours vraie, mais présentée de manière différente\",\n    \"Tétraktys\": \"10 points rangés en 4 rangés (1 puis 2, puis 3, puis 4) représentant un triangle, également appelé décade\",\n    \"Triskaidekaphobie\": \"Phobie du nombre 13, et en particulier du Vendredi 13\",\n    \"Tuple\": \"Enregistrement d'une base de données\"\n};\n\n//# sourceURL=webpack:///./src/game/words.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Discord = __webpack_require__(/*! discord.js */ \"./node_modules/discord.js/src/index.js\");\nconst auth = __webpack_require__(/*! ../build/auth.json */ \"./build/auth.json\");\n\nconst command = __webpack_require__(/*! ./command.js */ \"./src/command.js\");\nconst Game = __webpack_require__(/*! ./game/index.js */ \"./src/game/index.js\");\n\n// Initialize Discord Bot\nvar client = new Discord.Client();\n\nclient.on('ready',  () => {\n    logger.info('Connected');\n});\n\nclient.on('message', message => {\n    var test = message;\n    if (message.author.bot) {\n        return;\n    }\n\n    let command_result = command.check_command(client, message);\n\n    if (command_result) {\n        return;\n    }\n    \n    Game.check_game_state(client, message);\n});\n\nclient.login(auth.token);\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"child_process\");\n\n//# sourceURL=webpack:///external_%22child_process%22?");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"crypto\");\n\n//# sourceURL=webpack:///external_%22crypto%22?");

/***/ }),

/***/ "dgram":
/*!************************!*\
  !*** external "dgram" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"dgram\");\n\n//# sourceURL=webpack:///external_%22dgram%22?");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"events\");\n\n//# sourceURL=webpack:///external_%22events%22?");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");\n\n//# sourceURL=webpack:///external_%22fs%22?");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"http\");\n\n//# sourceURL=webpack:///external_%22http%22?");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"https\");\n\n//# sourceURL=webpack:///external_%22https%22?");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"net\");\n\n//# sourceURL=webpack:///external_%22net%22?");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"path\");\n\n//# sourceURL=webpack:///external_%22path%22?");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"stream\");\n\n//# sourceURL=webpack:///external_%22stream%22?");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"tls\");\n\n//# sourceURL=webpack:///external_%22tls%22?");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"url\");\n\n//# sourceURL=webpack:///external_%22url%22?");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"util\");\n\n//# sourceURL=webpack:///external_%22util%22?");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"worker_threads\");\n\n//# sourceURL=webpack:///external_%22worker_threads%22?");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"zlib\");\n\n//# sourceURL=webpack:///external_%22zlib%22?");

/***/ })

/******/ });